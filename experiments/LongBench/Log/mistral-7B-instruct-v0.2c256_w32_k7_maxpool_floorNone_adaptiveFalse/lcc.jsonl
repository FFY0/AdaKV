{"pred": "\t\t\t\tParticipant p = m_Participants[i] as Participant;\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tMobile m = p.Play", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tself._init_graph(Y_, Z_)\n\t\t\t\n\t\t\tA = self.branching(e, Y_, Z_)\n\t\t\tsolutions.append(A)\n\t\t\t\n\t\t\tP.put((self.graph_score(A", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "if __name__ == '__main__':\n    TestSndfile.main()\n# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4\n# End of code.\n# This script tests the basic functionality of the Sndfile class.\n# It opens", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def get_video_status(self, video_id):\n        \"\"\"\n        Get the status of a video.\n        \"\"\"\n        # TODO: Implement this method\n        pass\n\nThis method is supposed to get the status of a video. \n\nHere's what you need", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t\twriter.addAttribute(\"label\", styleValue.getLabel());\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\ndef get_question_data(question_id):\n    # This function should return a QuestionData object\n    # that can be used to ask the question and check answers\n    # The question_id is the id of the question in the database\n    # You can use the yaml file to", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    mob.Target = new SR_Target(SR_NewRune.TargetType.Location, this);\n                    break;\n                case 3:\n                    mob.SendMessage(\"Target a location to mark:\");\n                    mob.Target = new SR_Target(SR", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "          for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n        }\n        s.println(\"***\");\n    }\n}\n\n/*\n * ServerHelloDone is sent by the server to indicate that it has finished\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "          try {\n                sp = new JESpace (name, path);\n                spaceRegistrar.put (name, sp);\n            } catch (SpaceError e) {\n                error (\"Error creating space: \" + e.getMessage());\n                return null;\n           ", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.top();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate void consumeItem() {\n\t\t\tif ( Dungeon.hero.energy > 0 ) {\n\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "# Create a dispatcher instance with the target class\ndispatcher = SimpleHTTPRequestHandler\n# Create an instance of the target class with the dispatcher\ntarget = dispatcher(request, response, environ)\n# Define the target's POST method\ntarget.do_POST = self.do_", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "  def lock_status(self, status_id):\n        self.statuses[status_id]['locked'] = True\n        self.update()\n\n        # Lock the status in the webview\n        mark = \"lockStatus('%s')\" % status_id\n        self.", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "def action_create_archive(self, connection, params):\n    self.action_log(\"Create archive\", \"INFO\")\n    session = self.get_session(connection)\n    self.action_log(\"Get session\", \"INFO\")\n    self.action_log(byte_to", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) new ZoneIdentityPermission (SecurityZone.Internet).Union (a, b);\n\t\t\tAssert.IsNotNull (c);\n\t\t\tAssert.AreEqual (SecurityZone.Internet, c.Zone);\n\t\t\t", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "# This is the main entry point for the script.\n# It sets up the logging, loads the certificate and key files,\n# and then sets up the SSLContext and socket factory.\n# It then connects to the server and sends a message.\n# The message is encrypted and sent over the", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "      DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "      self.__tmp_file = os.path.join(self.__tmp_dir, 'datastream-%s' % str(uuid.uuid4()))\n        self.__datastream_fd = os.open(self.__tmp_file, os.O_RDWR | os.O", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1 && store.GetValue(3).ToString().Contains(\"new option2\")) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(0));\n\t\t\t\t\tjumpID_new = Convert.To", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "      String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] != null) {\n                String argName = args[i].getName();\n                String argValue =", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMER(new TimedConfigFile(\"timers.yml\")\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void loadToData()\n\t\t\t{\n\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\t// Create the nodes\n\t\tPreferenceNode generalNode = new PreferenceNode(\"generalPreferences\");\n\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\tadd", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "              if (m_Owner.CheckSequence())\n                {\n                    m_Owner.Target = new InternalTarget(m_Owner);\n                    m_Owner.WontDropItems = false;\n                    m_Owner.FixedParticles(0x3728,", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "# def _finalize_loaded(self, states):\n#     for state in states:\n#         if state.is_new:\n#             self._new_identity_map.add(state.identity)\n#         elif state.is_deleted:\n#             self._deleted_", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field: fields) {\n\t\t\tString name = field.getName().toString();\n\t\t\tif(name2Field.containsKey(name)) {\n\t\t\t\tint i = 1;\n\t\t\t\tString newName = name;\n\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "====================\n\nclass StaticFileHandler(RequestHandler):\n\"\"\"\n.. testcode::\n\n    import os\n    import tornado.web\n\n    class MainHandler(tornado.web.RequestHandler):\n        def get(self):\n            self.render(\"index.html", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n//\n// Generated by the Novell.Components.Web.Designer.MultiViewDesigner.cs code generator.\n//\nnamespace System.Web.UI.WebControls\n{\n\t[ParseChildren", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "if __name__ == '__main__':\n    args = parser.parse_args()\n    downloader = WigleDownloader( args.user, args.coordfile, args.outpath )\n    downloader.run()", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "              if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Skills", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "      builds += platforms.get(ctx.request.platform, [])\n    # Add Android builds if we're on a mobile device\n    if mobile:\n        builds += android_builds(build)\n    # Sort the builds by OS and then by version number\n    builds = sorted(", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeans = TStateBeanBL.loadByProjectTypeIssueType(projectID, issueTypeID);\n\t\t\tstateBeans = TStateBeanBL.filterByID(stateBeans", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "          foreach ( ArgumentSyntax argumentSyntax in argumentSyntaxs ) {\n                if ( argumentSyntax.Expression is IdentifierNameSyntax identifierNameSyntax && memberList.Any( x => x.Identifier.ValueText == identifierNameSyntax.Identifier.ValueText && x.TypeMemberName.Name == \"Item", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "      split_test = self._create_split_test_with_partition_id(0)\n        # Verify that the children are set to the first group's children.\n        self.assertEqual(split_test.children[0].display_name, 'Group 0')\n        self", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "          if (verticalMetrics != null) {\n                Object[] metrics = verticalMetrics.ToArray();\n                Array.Sort(metrics, this);\n                PdfDictionary metricsDict = new PdfDictionary();\n                metricsDict.Put(PdfName.TYPE, new Pdf", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the parent\n\t\t\t\t\t\t\tCell", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "      return new ListenableFutureTask<Bitmap>(callable);\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      try {\n        return BitmapFactory.decodeStream(context.getAssets().open(model.getSprite()));\n      } catch (IOException i", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "              if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "# TODO: Add more classes for other views and actions\n# TODO: Add more tests for the classes above\n# TODO: Add more functionality to the classes above\n# TODO: Add more views and actions to the classes above\n# TODO: Add more tests for the views and actions above\n# TODO: Add", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequences, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyRecognitionListeners(BigInteger timestamp,\n\t\t\tLabanSequence", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "              if (Enabled)\n                    ImageUrl = EnabledImageUrl;\n                else\n                    ImageUrl = DisabledImageUrl;\n            }\n            base.Render(writer);\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "sharpness = compound.getInteger(\"sharpness\");\n\t}\n\t\n\t@Override\n\tpublic NBTTagCompound writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "      return getId() + \" [\" + getProbability() + \"%]\";\n    }\n}\n/**\n * The effect of a disaster.\n */\npublic class EffectType extends FreeColObjectType {\n    /**\n     * The effect of a disaster.\n     */\n    public", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "# admin can access any group\nt = store.get_token_by_username('admin')\nassert t['admin'] == True\nassert t['groups'] == ['everyone']\n# test can access only their group\nt = store.get_token_by_username('test')\n", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "# Test that the delta is correctly calculated\nself.assertEqual(person.delta(), {'name': None, 'owns': [{'id': organization.id, 'name': None}], 'employer': {'id': organization.id, 'name': None}})\n# Test that the delta is", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "=====================\n\ndef plot_data(self):\n    \"\"\"Plot the data.\"\"\"\n    if not self.data:\n        print(\"No data to plot.\")\n        return\n\n    # Get the data and column names\n    data = self.data\n    x_col = self", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "              if (!ignored.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var item in ignored)\n            {\n                if (toScan.Contains(item))\n                {\n                    to", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed == null ? null : write(key, computed));\n\t}\n\t@Override\n\tpublic E getOrDefault(Object key, E defaultValue) {\n\t\treturn read(key, internalMap.getOrDefault(key, defaultValue));\n\t", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "      cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) > 0:\n            obj = resbrains[0].getObject()\n            obj.toggleDiscussion()\n", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tpublic int Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z = value; }\n\t\t}\n\t\tpublic int X\n\t\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    // get channel_uri\n                    channelUri = scene.LandChannelUri;\n                    if (String.IsNullOrEmpty(channelUri))\n                    {\n                        // create channel\n                        channelUri = scene.CreateParcelChannel(land.ParcelID, land.", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriod ppCur=PayPeriods.GetCur();\n\t\t\tif(PayPeriods.GetPayPeriods(PayPeriods.GetPayPeriodsByDate(textDateStart.DateTime,PayPeriods.Get", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "      pattern = re.compile(r'^(?P<lat>[+-]?\\d{1,3}\\.\\d{1,2})(?P<lon>[+-]?\\d{1,3}\\.\\d{1,2})')\n        lat_lon", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "# This function is used by the group_member_create function to check if the user\n# is allowed to add a member to the group or organization.\ndef _check_group_or_org_member_create_auth(context, data_dict):\n    group_or_org_id", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint childIndex = node.getChildIndex(example.getLabel(predictionAttribute));\n\t\t\t\t// setting outcome\n\t\t\t\toutcomes[parentIndex] = childIndex;\n\t\t\t\t// setting depth\n\t\t\t\tdepths[parentIndex", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "          return this.SearchSegments(settings, segments, null);\n        }\n        /// <summary>\n        /// Performs a search for an array of segments and returns the search results.\n        /// </summary>\n        /// <param name=\"settings\">The search settings.</param>\n       ", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "          codePoint = string.charAt(offset++) << 10\n                      | string.charAt(offset++) & 0x3FF;\n         }\n         if (_range != null && _range.contains(codePoint)) {\n            return offset;\n         }\n         return", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\tObservationForm observationForm = ObservationFormServiceFactory.getInstance().getObservationFormService().getObservationFormByAccessionNumber(accessionNumber);\n\t\tif (observationForm != null && observationForm.getStudyFormName() != null && !observationForm.get", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderToClient(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.ModVersion != ModVersion)\n\t\t", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif (beans == null)\n\t\t\treturn coll;\n\t\tfor (int i = 0; i < beans.length; i++)\n\t\t\tcoll.add(beans[i].build());\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify(\"Invalid option!\")\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "          int [] ret = new int[A.Dimensions.NumberOfDimensions];\n            int[] dims = A.Dimensions.GetAll();\n            int index = 0;\n            for (int i = dims.Length - 1; i >= 0; i--) {", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "plotName = pD.get( 'plotName', None )\n  if plotName is None:\n    return S_ERROR( \"Missing plot name!\" )\n  pD[ 'plotName' ] = plotName\n  #Get plotname\n  if not 'plotType' in", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (world.IsReplaying || player.IsPaused) return;\n\t\t\tvar closestFactories = new List<Actor>();\n\t\t\tvar closestFactoriesDistances = new List<int>();\n\t\t\tforeach (var actor in world.Actors", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "      // Save the compiled plan\n        catalogStmt.setPlan(plan);\n        return plan;\n    }\n    public static void main(String[] args) throws Exception {\n        // Create a database\n        DatabaseConfig config = new DatabaseConfig();\n        config.setName(\"testdb\");", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(221, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (Parity)parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = stop_bits;\n\t\t\t", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "  page = self.client.get(self.user.get_absolute_url())\n    self.assertTemplateUsed(page, 'user_profile.html')\n    self.assertEqual(page.context['user'], self.user)\n    self.assertFalse(page.context['c", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "  _keep_tempdir = parser.parse_args().keep_tempdir\n    unittest.main()\nif __name__ == '__main__':\n    main()\n# vim: set fileencoding=utf-8 :\n# Local Variables:\n# mode: python\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tself.list.setList(self.newAPList)\n\t\t\t\tself.newAPList = []\n\t\t\t\tself.oldAPList = self.newAPList\n\t\t\t\tself.newAPList = []\n\t\t\t\tself.", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "              int barWidth = (int)Math.Ceiling(xScale * 1.0f);\n                int barHeight = (int)Math.Ceiling(yScale * 1.0f);\n                int textWidth = (int)Math.Ceiling", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "  return results;\n  }\n}\n\n// This is the end of the code.\n\nThe code above is a Java class named `PropertiesUtils` which extends the standard Java `Properties` class and provides some utility methods for working with properties files. The class includes a static method `hasKey(", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "# x_points = np.linspace(x_min, x_max, num_points)\n# y_points = np.linspace(y_min, y_max, num_points)\n# z_points = np.linspace(z_min, z_max,", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "          if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrent", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "          set { _numValues = value; }\n        }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "          this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(292, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n    def __init__(self, name, DLL, **kwargs):\n        self.name = name\n        self.DLL = DLL\n        self.null_func = self.null_func_template(name)\n        self.wrapper = wrapper_template(name, self.", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "          baos.write(emptyStreams.toByteArray());\n            writeUint64(header, baos.size());\n            header.write(baos.toByteArray());\n        }\n    }\n\n    private void writeUint64(final DataOutput header, final long", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    alphaLevel -= 5;\n                    if (alphaLevel <= 0)\n                    {\n                        inRamp = true;\n                        try {\n                            Thread.sleep(rampDelay);\n                        } catch (InterruptedException e) {\n                            e", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "          _ = _client.GetDownloadsAsync(new DownloadClientSettings { MaxDownloads = 10 });\n            _ = _client.GetDownloadsAsync(new DownloadClientSettings { MaxDownloads = 10 });\n            _ = _client.GetDownloadsAsync(new DownloadClient", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "          if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n            }\n            if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken,", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "# F) 0.0\t\t\t# Background level (ADU)\n# G) 0.0\t\t\t# Background rms (ADU)\n# H) 0.0\t\t\t# Background sky rms (ADU)\n# I) 0.0", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    i += ((b & 0x04) << 2);\n                    i += ((b & 0x02) << 4);\n                    i += ((b & 0x01) << 6);\n                    i += ((b & 0x", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "  @property\n    def _course_key(self):\n        \"\"\"\n        Return the CourseKey for the course.\n        \"\"\"\n        if self._course_key is None:\n            self._course_key = CourseKey.from_string(\n                self._get_course_", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tString chanceString = splitNumber[1].replace(\"%\", \"\");\n\t\t\tchance = Float.parseFloat(chanceString);\n\t\t}\n\t\treturn (int) (Math.random() * ", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "# Define the main function\ndef main():\n    # Create the module\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True, type='str'),\n            state=dict(default='present', choices=['present', 'absent", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "          this.TabControl1.TabPages.Add(this.tabPage1);\n            this.TabControl1.TabPages.Add(this.tabPage2);\n            this.TabControl1.TabPages.Add(this.tabPage3);\n            this.TabControl1.", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "```\n        for plugname, plug in self.plugins.items():\n            try:\n                plugruncount += 1\n                self.ui_log.info(_(\" Running plugin %s ...\") % plugname)\n                plug.run()\n            except Exception as", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class IAbstractSession(IResource):\n    def __init__(self, sessionId, sessionName, sessionType, sessionStart, sessionEnd, sessionLocation, sessionRoom, sessionColor, sessionDescription, sessionAbstract, sessionSlots, sessionSlotsList, sessionSlotsListOrder, sessionSlots", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(new File(new File(System.getProperty(\"user.dir\")), fileTextField.getText()), messageBrowser, messageBrowser.getChannel(),", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getNumber(\"value\").intValue();\n\t\t       \t\t} else if (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t} else if (", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "      if (currentSession != null && currentSession.isOpened()) {\n            Bundle fields = new Bundle();\n            fields.putString(FIELDS, REQUEST_FIELDS);\n            Request request = new Request(currentSession, \"/me\", fields, null, new", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.chance;\n\t\t}\n\t\tfor (Emotion emotion : emotions) {\n\t\t\temotion.chance /= sum;\n\t\t}\n\t}\n\tpublic interface Emotion", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "#                    'property1': 2, 'property2': 3}\n                    'property1': 2, 'property2': 3}\n            }],\n            self.build_job_to_xml(self.build_job))\n\n    def test_xml_", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "  Long = LongOrigin + (e*N/sqrt(1-e*e*sin(phi1)*sin(phi1)))\n    Lat = phi1;\n    return Lat, Long\n#----------------------------------------------------------------------\n#  UTM Zone Constants\n#----------------------------------------------------------------", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n    form = ReportUserForm(request.POST)\n    if form.is_valid():\n        report = form.save(commit=False)\n        report.user = request.user\n        report.save()\n        messages.success(request, \"User reported successfully.\")\n        return", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddSeriesView(LaunchpadFormView):\n    \"\"\"A form to add new product series\"\"\"\n    schema = IProductSeries\n    label = \"Add a new series\"\n    next_url = \"++series\"\n    def create(self, data):\n        \"\"\"Create a new", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.WriteLine(\"", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "              temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "=====================\n    config_post_processors = [\n        # This post processor will add the 'isa' tag to the list of tags\n        # if the 'isa' argument is provided.\n        (lambda args: (args[0] + [constants.supported_tags[\n           ", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "              return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override Type[] GetCustomAttributeTypes ()\n            {\n                return new Type[0];\n           ", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "# Add your custom PIDs here\n# For example:\n# class OBD_PID_Custom(OBD_Packet):\n#     name = \"Custom PID\"\n#     fields_desc = [\n#         StrLen1(\"data\", 8),\n#         Int16", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.bus_name = dbus.bus.get_bus().get_name()\n\t\tself.connection = dbus.bus.get_bus().get_connection()\n\t\tself.connection.add_signal_handler('name-acquired', self.on_", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "          }\n        }\n    }\n}\n\n//This code is for the Mystic's Prism.  It is a crafted item that is used to create runes.\n//The Mystic's Prism is a 2-handed item that can be crafted by a Myst", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    self._preserved = self._app._g.pop('__request_ctx__', None)\n    if self._preserved is not None:\n        self._preserved.__call__()\n        return\n\n    if self._app._g.get('__debugger__'):", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "  response = _pubsub_consumer(session, cluster_id, topic_name, needs_columns=False)\n\n    if topic_name:\n        response = response.filter(PubSubConsumer.topic_name == topic_name)\n\n    return response\n\n# vim", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "          if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "dx = (angles[:, np.newaxis] * alen[np.newaxis, :]) / alen\nelse:\n    # Find projection of axis on detector\n    axis_proj = np.cross(ray_trajectory, ray_direction)\n    # Find distance from projection", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\nclass TPB(Provider):\n    def __init__(self):\n        self.url = 'http://thepiratebay.se/'\n        self.searchURL = self.url + 'search/'\n        self.searchRegex = r'<a href=\"(http[s", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (type == FontSize.Absolute) {\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\t}\n\t\t\treturn font_size_names [(int) type] + (unit.IsEmpty ? \"\" : \":\" + unit.ToString (fmt));", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(\"Block size is not correct.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add the blocks\n\t\t\tbyte", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerObj = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerObj.Properties[0].Key, Is.EqualTo(\"The outermost object's property\"));\n\t\t\tAssert.That(innerObj.Properties[1].Key", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "              for (int w = 0; w < width; w++) {\n                    int index = h * width + w;\n                    if (w < width - 1) {\n                        edges.add(T2.of(Integer.toString(w), Integer.toString(", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "=====================\n\ni1 = isoelastics(ds, lut_identifier=\"test-bad-lut\",\n                channel_width=ds.config[\"imaging\"][\"pixel size\"],\n                flow_rate=ds.config[\"setup\"][\"flow rate\"],\n                vis", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "      final File file1 = new File(\"data/test1.db\");\n        final File file2 = new File(\"data/test2.db\");\n\n        final LocalTripleStore store1 = new LocalTripleStore(file1);\n        final LocalTripleStore store2 = new", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "if __name__ == '__main__':\n    unittest.main()\n\nThis is the last line of code in the script, which runs the unit tests. It imports the unittest module and then calls its main function. This is a standard way of running unit tests in Python.", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallation(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.Shutdown();\n\t\t\tOpenGL.DeleteContext(context);\n\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\twindow.Dispose();\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "  @property\n    def total_covariance(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the total *xy* covariance matrix.\n        \"\"\"\n        return np.dot(self.data_covariance, self.model_covari", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "      return new CmsLink(m_structure, m_type, m_typeName, m_structureId, m_internal, m_target, m_queryString, m_queryParams, m_queryHash, m_typeId, m_typeNameId, m_typeNameId", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁  noingAccount = getEucalyptusAccount();\n                  noingAccount = getEucalyptusAccount();\n                  noingAccount = getEucalyptusAccount();\n                  noingAccount = getEucalyptusAccount();\n", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "          add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public IFolder SelectedFolder\n        {\n            get { return _selectedTreeNode == null ? null : _selectedTreeNode.Folder; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "      ImportVmTemplateParameters parameters = new ImportVmTemplateParameters();\n        parameters.setName(name);\n        parameters.setImportAsNewEntity(isImportAsNewEntity);\n        ImportVmTemplateCommand command = new ImportVmTemplateCommand();\n        command.setParameters(parameters", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.TopAttach = ((global::Gtk.AttachOptions)(this.spinbuttonCheckPeriod.GetPropertyValue (\"top-attach\")));\n\t\t\tw10.LeftAttach = ((global::Gtk.AttachOptions)(this.spinbuttonCheckPeriod", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "# self.system['TOTALSTATUS'] = self.totalstatus\n# self.system['TOTALSTATUS'] = self.totalstatus\n# self.system['TOTALSTATUS'] = self.totalstatus\n# self.system['TOTALSTATUS'] = self.totalstatus\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic FieldBuilder DefineField(string name, TypeFieldType fieldType, FieldAttributes attributes)\n\t\t{\n\t\t\treturn new FieldBuilder(this, name, fieldType, attributes);\n\t\t}\n", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "    return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getIndex(getQuadIndex(i, x))));\n            }\n        }\n    }\n\n    /**\n     * @param quadIndex\n     *            the quad index", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "      if (showDateData.equals(\"false\")) {\n            result.add(CmsDocumentListConstants.COLUMN_DATE_CREATED);\n            result.add(CmsDocumentListConstants.COLUMN_DATE_MODIFIED);\n        }\n        return result;\n    }", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}\n//  The following code is for the InputField component.  It is not part of the code above.\n//  It is used to set the height of", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "      Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    private int GetBestHeight()\n    {\n      return (int)GetBestHeightF();\n    }\n    //----------------------------------------------------------------", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n               ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "          // Validation of the Conference's start and end dates\n            // (the validation of the Conference's start and end dates is done in the Validate method of the TConference class)\n            // The following code is only needed if the Conference's start and end dates are not validated in", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "              stream.Read (buffer, 0, (int) stream.Length);\n                // Adding file content as byte[]\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __str__(self):\n        \"\"\"String representation of the object\"\"\"\n        return \"PayloadRequirements(packages=%s, groups=%s)\" % (\n            self.packages, self.groups\n        )\n\n    def __repr__(self):\n        \"\"\"Representation for debug", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && (CopyRange || _customRange != null); }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset {\n\t\t\t\tif (_customRange != value", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string ConfigurationDirectory {\n\t\t\tget { return confDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\n\t\t\tget { return cacheDir; }\n\t\t}\n\t\tpublic", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "          if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation lineAnnotation = (SourceLineAnnotation) bugAnnotation;\n                if (lineAnnotation.getLineNumber() < 0) {\n                    throw new IllegalStateException(\"Invalid line number: \" + lineAnnotation.get", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "}\nThis code is a base class for food items in Ultima Online. It includes properties such as weight, fill factor, and hunger/thirst restoration. The abstract method Eat() is defined, which will be overridden in subclasses to handle the specific eating behavior. The Food class also includes construct", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Q.IsReady())\n                    {\n                        var qMinions =\n                ", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, anchor, GridBagConstraints.BOTH);\n\t}\n\t/**\n\t * Returns a GridBagConstraints with the given x, y, width, height, anchor and fill.\n\t", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "# def __init__(self, region, location):\n#     self.region = region\n#     self.location = location\n#     self.warnings = []\n#     self.forecast = {}\n#     self.current = {}\n#     self.uv = {}\n#    ", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "  self.assertEquals(field_model_def['name'], field_def['name'])\n    self.assertEquals(field_model_def['pid'], field_def['pid'])\n    self.assertEquals(field_model_def['rules'], field_def['rules'])\n    self.assertEquals", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new object[]{\"E1\", \"E10\"});\n                // test widening to short\n                SendEventServiceUtil.SendEvent(env, \"S0\", new object[]{\"S0\", \"S10\"});\n                result = env.CompileAnd", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        clibrebound(c, other)\n        return c\n\n\nThe code above", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n\nThis code is a part of an OpenERP module. It extends the existing 'view' model to add some new methods and fields", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "          value = createHTMLView(c, text);\n        }\n        if (value != oldValue) {\n            c.putClientProperty(BasicHTML.propertyKey, value);\n        }\n    }\n    /**\n     * Creates a new HTML view for the given component.\n    ", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "s = create(filename, content)\nassert s.content_is_testharness\nassert s.manifest_item.url == \"/\" + filename\nassert s.manifest_item.type == \"script\"\nassert s.manifest_item.src == content.decode(\"utf", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmNamedSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.AddNamedQuery(namedQueryReference, mapDocToNamedQuery(mapDocToQuery(mapDocToQueryName(namedQueryReference))));\n\t\t}", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer );\n\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "      invocationQueue.pop();\n    }\n\n    private boolean contains(MethodInvocation invocation) {\n        for (MethodInvocation m : invocationQueue) {\n            if (m.callee() == invocation) {\n                return true;\n            }\n        }", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "# pytest_args = pytest.split()\n# self.pytest_cmd = self.args['pytest'] + \" \" + \" \".join(pytest_args)\n\nThis code is trying to extract the pytest command from the pr metadata and then\nappend it to the existing", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "              if (phi) {\n                    ValueStamp stamp = ValueStamp.forNode(value);\n                    ValuePhiNode phiNode = getCachedPhi(stamp, MergeUtil.getStampType(stamp));\n                    ValueNode result = MergeUtil", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "      if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException e) {\n                // Ignore\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#setCameraCap", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonMapGump(from));\n\t\t\t}\n\t\t}\n\t\tpublic override void GetProperties(ObjectPropertyList list)\n\t\t{\n\t\t\tbase.GetProperties(list);\n\t\t\tlist.", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "====================\n\nThe code above defines two classes: `Record` and `RecordMetadata`. The `Record` class is a subclass of `db.Model` and represents a database record. The `RecordMetadata` class is also a subclass of `db.Model` and represents metadata for a record.", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "  def __getitem__(self, key):\n        \"\"\"\n        :param key: A string in the format 'username@domain'\n        :return: The user data\n        \"\"\"\n        user, domain = key.split('@')\n        if domain not in self.module:\n           ", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n    def __init__(self, encoding=None, **kwargs):\n        \"\"\"\n        Initialize a new PO file.\n        **Keyword arguments**:\n          - *encoding*: the encoding of the file.\n          - *kwargs*: other arguments passed to the parent class.\n        \"\"\"\n        super", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "#############################################################################################################################################\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif (action.startsWith(PLUGIN_PREFIX) || action.startsWith(PLUGIN_PREFIX + \"/\")) {\n\t\t\t\t// Plugins are allowed to have forms, but they must be handled by the plugin itself.\n\t\t\t\treturn action;\n", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "      gsp = yield self.setupGerritStatusPush(\n            self.buildbot, self.gerrit, self.gerritUser, self.project,\n            self.change, self.changeId, self.branch, self.commit,\n            self.commitMessage,", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "  self.category = atom.Category()\nclass CategoryTest(unittest.TestCase):\n  def setUp(self):\n    self.category = atom.Category()\n  def test_term(self):\n    self.category.term = 'test'\n    self.assertEqual(self", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = new HashMap<>();\n            for (Map.Entry<String, AnnotationMirror> e1 : r1.entrySet()) {\n                String key = e1.getKey", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "# Register classes\nbpy.utils.register_class(MyPanel)\nbpy.utils.register_class(MyProperty)\nbpy.utils.register_class(MyOperator)\n# Register types\nbpy.types.Scene.my_property = bpy.props.Float", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "          if (_engine.Mapper != null && _engine.Mapper.MapperType == MapperType.Mapper16)\n            {\n                //MAPPER 16\n                if (_engine.Mapper is Mapper16)\n                {\n                    //MAPPER 16", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "          JMenuItem oOpenMenuItem = new JMenuItem(\"Open Document\");\n            oOpenMenuItem.addActionListener(oActionListener);\n            oOpenMenuItem.setMnemonic('O');\n            m_jPopupMenu.add(oOpenMenuItem);\n        }\n        private JMenuItem", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Blue Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Green Bears]\n\t\tAdd(\"Party Quest\",", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = MeasuredHeight;\n\t\t\tint newHeight = 0;\n\t\t\tfor (int i = 0; i < ChildCount; i++) {\n\t\t\t\tView child = GetChildAt (i);\n\t\t\t\tint childHeight", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "=====================\n\n# Announcement model\nclass Announcement(models.Model):\n    title = models.CharField(_('title'), max_length=255)\n    slug = models.SlugField(_('slug'), unique=True)\n    content = models.", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "#lexers = {'php': PhpLexer()}\n# Enable highlighting for PHP code not between <?php ... ?> by default\nlexers = {'php': PhpLexer(stripall=True)}\n# Enable highlighting for PHP code not between <?php ... ?> by default\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "# This is where I need help\n# I need to find the start time of the first flight in the group and the end time of the last flight in the group\n# I then need to insert the start time, end time and duration into the final table\n# I need to do this for all groups\n", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "# TODO: implement this function\ndef db_get_projects_with_no_snapshot():\n    \"\"\"\n    This function should return a list of project_ids that have no snapshot in the database.\n    \"\"\"\n    conn = rethinkdb_connection()\n    projects = conn.table('", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tcase \"complicity\":\n\t\t\t\tMsg(\"I'm not involved in any criminal activities,<br/>nor do I have any knowledge of them.<br/>I'm just a simple shepherd.<br/>I swear it on my sheep!\");\n\t\t\t\tbreak", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "responses = {\n    'MYANIMELIST_ANIME_DETAIL': AnimeDetailResponse,\n    'MYANIMELIST_ANIME_LIST': AnimeListResponse,\n    'MYANIMELIST_ANIME_SEARCH': AnimeSearchResponse,\n    '", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n    def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nclass HostData:\n    def __init__(self, uuid, name, status, result):\n        self.uuid = uuid\n        self.", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "              Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n        }\n    }\n}\nThis code is a part of an Android app that resolves short URLs to their long URLs. The code", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "# TODO: Add step for checking that primary has no packages\n# @behave.step(\"Then primary has no packages\")\ndef step_impl(context):\n    primary = context.primary\n    if primary:\n        if len(primary.packages) > 0:\n            raise Assertion", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\nif __name__ == '__main__':\n    install_lib = install_lib()\n    sys.exit(install.run())\n\n# vim: set fileencoding=utf-8 :\n\n# This is the entry point for the install command.  It creates an instance\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < LazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tif (LazyPropertyNames[j] == null)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "#\n# @brief Add a job to the queue\n# @param job_data A dictionary containing the job data\n# @return True if the job was added to the queue, False otherwise\ndef add_job(job_data):\n    # Add the job to the database\n    add_job", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "          return View(\"Form\", new DelegateEventViewModel());\n        }\n    }\n}\n\n// Add the following using statements at the top of the file\nusing App.Models;\nusing App.Models.ViewModels;\nusing System.Linq;\n\n// Add the following code", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        return string.Format(\"{0} - {1} {2} {3}\", item.Name, obj.GetType().Name, obj.Radius, obj.Position);\n                    }\n                    if (obj is Menu)\n                    {\n                        return string.Format(\"", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    if premium_url:\n        self.log(\"Using premium URL: %s\" % premium_url)\n        self.download(premium_url, self.getFileName(), self.getMD5)\n        return\n\n    self.log(\"Using free URL: %s", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path != null && path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\tCPos GetSearchFromLoc(Actor self)\n\t\t{\n\t\t\tif (order.LastActivity", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "      return True\n\n    def sync_dhcp(self):\n        return True\n\n    def sync_dhcp_files(self):\n        \"\"\"\n        This function is used to sync dhcp files.\n        \"\"\"\n        dhcp_dir = self.api.config.", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "      return Event.newBuilder().setSource(source).setSeqno(getNextSeqno()).setTime(System.currentTimeMillis());\n    }\n}\nThe code above is an abstract class that implements the EventProducer interface. It provides a default implementation for the setSource and newEvent methods", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "          for (PpmContext current = context.Suffix; current != null; current = current.Suffix)\n            {\n                if (current.Number == symbol)\n                {\n                    gotoLoopEntry = true;\n                    break;\n                }\n            }\n", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "              return new DicomAttributeSL(tag);\n                //return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// Sequence of items.\n        /// </summary>\n        public static readonly DicomVr Sq", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[3]);\n\t\t\t//if(SqliteTest.IsTestInSession(sessionID, tFull[0]))\n\t\t\t//\tcontinue;\n\t\t\t//if(SqliteTest.IsTest", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n    def test_delete_bytes_in_middle(self):\n        o = self.file(b'abcdefghijklmnopqrstuvwxyz')\n        self.assertEquals(len(o), 26)\n        self.assertEquals(o.tell", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n<td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X</td>\n    <", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "# plot the data\n# plot the mean and 95% CI for the VC test\n# plot the mean for the individual tests\n# plot the 95% CI for the individual tests\n# plot the VC test vs the individual tests\n# plot the VC test vs the", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "if __name__ == '__main__':\n    util.runTest(UtilTests)\n# This line is added by the test runner to run the tests.\nif __name__ == '__main__':\n    unittest.main()", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t}else{\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t}\n\t\t\t\tg.drawRound", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "def simulateKMoreThanOne(self):\n    failures = \"\"\n    LOGGER.info(\"Testing KNN with k > 1\")\n    # Create a list of patterns and their corresponding labels\n    patterns = numpy.array([\n        [1.0, 1.0],", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "      mirror.writeElement(value);\n    }\n    @Override\n    public void writeElement(Address address, Value value) {\n        final Address elementAddress = address.add(headerSize());\n        final Kind elementKind = elementKind();\n        final int scale = elementKind.scale;", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "          if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = File.Combine(ParentDirectory.FullName, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n            }", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\ndef read_input(prompt, default=None):\n    \"\"\"\n    Reads input from the user, with optional default value.\n    \"\"\"\n    if default is None:\n        readline.set_history_file(None)\n        readline.set_history_length(", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "    }\n    }\n  }\n}\nThe code above is incomplete.  The missing line of code is:\ni2 = i19;\nThis line of code is used to update the value of i2, which is used later in the code.  The value of i2 is", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"  \" + s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "              });\n            #endregion\n            #endregion\n        }\n    }\n}\n// Copyright 2014-2015 EvilGeniuses eSports\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getUser()).thenReturn(new EmfUser(\"test.user\", \"test.user@test.com\", \"test.user\", \"test.user\", null, null, null, null, null, null, null, null, null, null, null, null", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "  @mock.patch('os.makedirs')\n    def test_generate_inventory_file(self, mock_makedirs):\n        context = testlib.TestContext()\n        context.generate_inventory_file('/tmp/test.ini')\n        mock_m", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (String.IsNullOrEmpty(configDirectory)) {\n\t\t\t\tconfigDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \"/\" + PropertiesName;\n\t\t\t}\n\t\t\tif (String.IsNullOrEmpty(dataDirectory))", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//\n\t\t// This is the constructor for a new constraint.\n\t\t//\n\t\tprotected Constraint (Constraint constraint) {\n\t\t\t//\n\t\t\t// Initialize the constraint.\n\t\t\t//\n\t\t\tif (constraint != null) {\n\t\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n        Dialog.setTabOrder(self.zoom_spinbox, self.font_size_spinbox)\n        Dialog.setTabOrder(self.font_size", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "              return false;\n            }\n            String stationId = wxs[ 0 ].getString( 0 );\n            String stationName = wxs[ 0 ].getString( 1 );\n            String stationType = wxs[ 0 ].getString( 2 );\n           ", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring queryString = \"from Continent c where c.name = 'Europe'\";\n\t\t\t\tint count = s.CreateQuery(queryString).List<Continent>().Count;\n\t\t\t\tAssert.AreEqual(1, count);\n\t\t\t", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "              uiCRCITTSum = (uiCRCITTSum ^ uiByteValue) & 0xFFFF;\n                for (int iBit = 0; iBit < 8; iBit++)\n                {\n                    if ((uiCRCITTSum &", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn hasSpeedModule() ? 10 : 5;\n\t}\n\t/**\n\t * Returns the block below the entity that can push it around.\n\t */\n\tprivate BlockPos getBlockPosBelow() {\n\t\treturn new BlockPos(this.blockPosition().", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "          return new IHyperlinkDetector[] {};\n        }\n        IHyperlinkDetector[] detectors = \n                new IHyperlinkDetector[] {\n                        new CeylonHyperlinkDetector(editor),\n                        new CeylonJavaBackendHy", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "# Create the Object3DAspect widget\nself.object3DAspect = Object3DAspect(self)\n# Create the Object3DScale widget\nself.object3DScale = Object3DScale(self)\n# Create the Object3DPrivateInterface widget\nself.object", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // X\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D(m_Page.GetX(info.ButtonID), m_Page.GetY(info.ButtonID));\n\t\t\t\t\t\tshould", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁     for (Object choice : valueChoices)\n                     {\n                        String label = selectConverter.convert(choice);\n                        if (label.equals(value))\n                        {\n                           chosenObj = choice;\n                           break;\n                        }\n                    ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tfor (int k=0; k<maxChanges; k++)\n\t\t\t\tsb.append(String.format(\"%d\\t%f\\n\", k, fractionWithChange[i][j][k]));\n\t\treturn sb.toString();\n\t}\n}", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the order that contains the unpriced line\n                                int orderIndex = esDocumentOrderSale.configs.IndexOf(", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\tpublic string ReplyAction {\n\t\t\tget { return reply_action; }\n\t\t}\n\t\tpublic string Action {\n\t\t\tget { return action; }\n\t\t}\n", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "      final int testUserId = new Random().nextInt(SecurityManagerImpl.MAX_USER_ID);\n        final int testGroupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int testMode = 0600;\n        final boolean read", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X / viewport.Width, v.Y / viewport.Height);\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn new Vector3 (", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats_t(XDRType):\n\nWhat should be the implementation of the above class?\n\nThe given code defines a base class `XDRType` which is not provided in the code snippet. Assuming that `XDRType` is a class that provides common functionality for all", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    Console.WriteLine(\"Disconnecting client: \" + i);\n\t\t\t\t    RemoveAt(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Console.WriteLine(\"Sending message to \" + m_cl", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "          if (type == Portal.RequestType.Step) {\n                List<StepBucket> stepBuckets = new ArrayList<>();\n                for (Bucket bucket : list) {\n                    stepBuckets.add(new StepBucket(bucket.getStartTime(), bucket.getEnd", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "# Generate the single argument version of the helper function.\n  # This is used when the callback is a member function of a class.\n  # e.g. void MyClass::MyCallback(int arg)\n  # The single argument version is called MyClass_MyCallback.\n  #", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\"\"\"\nresponse = HttpResponse(content=json.dumps(items, default=range_item_dict), content_type='application/json')\nreturn response", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "              new VarNode(\"score\"), null/* c */,\n                Scope.DEFAULT));\n                whereClause.addChild(new StatementPatternNode(\n                        new VarNode(\"lit\"), new ConstantNode(searchIV),\n                        new ConstantNode(searchIV),\n                        S", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n    def dispatch(self, request, *args, **kwargs):\n        self.object = None\n        try:\n            self.object = self.get_object(queryset=User.objects.all())\n        except User.DoesNotExist:\n            messages.error(request", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "    get { return this.AssemblyIdentity.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.AssemblyIdentity.Version; }\n    }\n   ", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "          // tfqmr_iter(A, b, x, &rnorm, &itmax, &itn, &tol, &max_it, &precond, &m, &n, &nz, &tau, &z, &p, &q, &w, &", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] { sortedNumbers[left] };\n\t\t} else {\n\t\t\treturn new Apfloat[] { sortedNumbers[left], sortedNumbers[right] };\n\t\t}\n\t}\n}\n\nThis code is a Java class named Statistics", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "          if reference_set[v] in focal_set:\n                A[i, reference_set[v]] += 1\n                L[reference_set[v]] += 1\n                if reference_set[v] == focal_ind:\n                    A", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "  self.assertTrue(json.loads(mapping_json) == csv_mapping.to_dict())\n\nif __name__ == '__main__':\n    connector = \"twitter\"\n    ocean_index = \"ocean_\" + connector\n    enrich_index =", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots && slot.Value.AllowBots != \"none\")\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(new Add", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \"  \" + _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "# TODO: Implement DataFrame class\nclass DataFrame:\n    def __init__(self, stream_id, flags, data):\n        self.stream_id = stream_id\n        self.flags = flags\n        self.data = data\n\n    def serialize(self):\n       ", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "#endif\n            var nodes = cluster.Nodes.ToList();\n            var boundaryPoints = cluster.BoundaryCurve.Points;\n            if (nodes.Count != boundaryPoints.Count)\n                throw new Exception(\"Nodes and boundary points do not match\");\n            for (int i = ", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos (m_maxSlopeRadians);\n}\nvoid btBulletCharacterController::setUseControllerForCrouching(bool useControllerForCrouching)\n{\n\tm_useControllerForCrouching = useControllerForCrou", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "      for (ExpressionTree initializer : initializers) {\n            if (canLeak(initializer)) {\n                // TODO: Implement a warning for this case.\n                // The code below is a placeholder.\n                report(Context.ENTERING_BLOCK,\n                        new", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tN", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t\t_returnType = _context.GetType(typeAttribute.Value);\n\t\t\t}\n\t\t}\n\t\tprivate void CreateMethodComment()\n\t\t{\n\t\t\t// create method comment\n\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.Size = new Size (100, 50);\n\t\t\t\tmyTrackBar.Orientation = Orientation.Horizontal;\n\t\t\t\tmyTrackBar", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\n\t\t\twhen(classType.getAnnotationType()).thenReturn(annotationType);\n\t\t\tdoReturn(classType).when(lookup).findType(anyString(), any(ClassLoader.class));\n\t", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.postDominatedBy(other))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Checks if this abstraction is post-dominated by the given one.\n\t * @param other\n\t * @", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "          int min2 = narrowLExtent[r.rightChild];\n            int min = Math.min(min1, min2);\n            int max1 = wideRExtent[r.leftChild];\n            int max2 = wideLExtent[r.rightChild];\n           ", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "              'rsync',\n                '--archive',\n                '--compress',\n                '--delete',\n                '--exclude={\"pg_hba.conf\", \"pg_stat.conf\", \"pg_clog/*\", \"pg_xlog/*\", \"", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.Get", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "writer.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.attribute( null, \"a\", String.valueOf( 1.0 ) );\n\t\twriter.endTag( null, \"color\" );\n\t}\n}", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null ) {\n\t\t\t return false;\n\t\t}\n\t\tif ( !( aThat instanceof Contact ) ) {\n\t\t\t return false;\n\t\t}\n\t\tfinal Contact that = (Contact) aThat;\n\t\treturn this.", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "  if n == n_steps:\n      print('Total number of rejected timesteps: %d' % total_rej)\n      sys.exit()\n\nThe code above is a part of a multi-body simulation code. It calculates the positions and velocities of the bodies at each", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "      if len(cdata) > 0:\n            return\n\n        # Check if the slice is equivalent to a full index\n        if len(node.inputs) > 1:\n            if (all(isinstance(x, (list, tuple)) and\n                    len(x", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "=====================\n\ndef save_groups(self):\n    \"\"\"\n    Save the selected groups for the user.\n    \"\"\"\n    user = self.user\n    groups = self.cleaned_data['groups']\n    user.groups.clear()\n    for group_id in groups", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "```python\nreturn query\n```\nThis code is part of the SQLAlchemy ORM (Object-Relational Mapping) library. It defines a class named `orm` with an inner class named `events` which contains a class named `InstrumentedEvent`. The `Instrumented", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "# Register the ConditionalModule with the XBlock registry\n# This is necessary for the XBlock framework to recognize the\n# ConditionalModule as a valid XBlock type.\n# You can find the XBlock registry in the xblock/xblock.py file.\n# The registry is a dictionary that", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "=====================\n\ndef apply_changes(self, data_model_changes):\n    \"\"\"Apply changes to the data.\n\n    Parameters\n    ----------\n    data_model_changes : list of :class:`larray.commands.ArrayValueChange`\n        List of changes to be applied", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && (Method != null || Sig != null))\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueError(Message.MapXmlError, \"ldtoken\", \"ldtoken can only be used with a 'type' attribute\");\n\t\t\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(128, 20);\n\t\t\tthis.objYLabel.TabIndex = 21;\n\t\t\tthis.objYLabel.Text = \"Var Y:\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "      c = self.getNoPrefix(\"tag:v1.0\")\n        self.assertEqual(c.branch, \"v1.0\")\n        self.assertEqual(set(c.files), set([\"buildbot/master.cfg\"]))\n        self.assertEqual(c.comments", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "      if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n\n        for (Map.Entry<String, String> field : csvData.entrySet())", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveGenerating()) {\n\t\t\treturn false;\n\t\t}\n\t\t// Your code here\n\t\treturn true;\n\t}\n\t@Override\n\tpublic boolean isPassiveGenerating() {\n\t\treturn false;\n\t}\n\t", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "          intrinsicCohesion += this.getRepresentativity(component);\n        }\n        this.setIntrinsicCohesion(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n\n    private void setIntrinsicCohesion(", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "if __name__ == \"__main__\":\n    logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', level=logging.INFO)\n    logging.info(\"Starting upgrade process\")\n    upgrade = Upgrade()\n    upgrade", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.stop();\n\t\t\tcomputerMgmt.dispose();\n\t\t\tcomputerMgmt = null;\n\t\t\tcomputerMgmtThread.Abort();\n\t\t\tcomputerMgmtThread = null;\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "  for (java.util.Date exceptionDate : exceptionDates) {\n      exDateList.add(new Date(exceptionDate));\n    }\n    return new ExDate(exDateList);\n  }\n}\n```\nThe code above is incomplete, you need to add", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.EventName = SourceEventName;\n\t\tsourceEventBinding.Target = DataSource;\n\t\tsourceEventBinding.OnEvent += OnSourceEvent;\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.Add", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "          ObjectMapper mapper = new ObjectMapper();\n            SpanConfig spanConfig = mapper.readValue(json, SpanConfig.class);\n            // TODO: Implement the logic to add the span port\n            resultBean.setStatus(true);\n            resultBean.setMessage(\"Span port added", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tthis.Add(new ImageHelper(1001, \"/ims/images/icons/16x16/alert", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "      return rnd.nextInt(size);\n    }\n}", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "  old_link = Link.objects.get(label=old_label, project=project)\n\nThis code is part of a Django project, and it appears to be defining a method for making a new link annotation in a project, based on an existing link annotation with the same label in", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "          buffer.Append(\"          .shrinktofit= \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergedcell= \")\n                .Append(StringUtil.ToHexString(", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katakana\n\t\t\t\tbytes [posn++] = (byte)(ch - 0x30);\n\t\t\t} else {\n\t\t\t\t// unknown character\n\t\t\t\tthrow new ArgumentException (\"Invalid character: \" + ch", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n# Define a function to load a word from memory\n@register_function(\"loadw\")\ndef loadw(src, dst):\n    dst.value = env.read_word(src.address)\n\n# Define a function to store a word into memory\n@register_function(\"store", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties props = new Properties();\n\t\t\tstream = location.openStream();\n\t\t\tprops.load(stream);\n\t\t\tJRPropertiesMap map = new JRPropertiesMap();\n\t\t\tmap.setProperties(props);\n\t\t\treturn map;", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "          return this == CREATIVE;\n        }\n\n        /**\n         * Returns the game type by ID\n         */\n        public static WorldSettings.GameType getByID(int id)\n        {\n            for (WorldSettings.GameType gameType : values())\n            {", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.PurgeDefault();\n\t\t\tAssert.IsFalse (csd.IsDefaultSecurityDescriptor ());\n\t\t\tAssert.IsFalse (csd.IsSystemSecurityDescriptor ());\n\t\t\tAssert.IsFalse (csd.IsSecurityDescriptorSdl", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "# results = []\n# for result in results:\n#     print(result)\n#     results.append(lookup(result))\n# return results\n\ndef lookup(result):\n    \"\"\"\n    Lookup the result in Acoustid and return the result.\n    \"\"\"\n    #", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "      // Add your custom RPCs here.\n        // The RPCs will be added to the list in the order they are added.\n        // The RPCs will be added to the list in the order they are added.\n        // The RPCs will be added to the list in", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "      return rootView;\n    }\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n        if (getArguments() != null) {\n            message = getArguments().getString", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "      # Transform wave function\n        psit_k = np.zeros((len(psit_G), len(self.ibz)), dtype=np.complex128)\n        for i in range(len(self.ibz)):\n            psit_k[:, i]", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "      CreateUtkastRequest request = new CreateUtkastRequest();\n        request.setPatient(new Patient());\n        request.setPatient().setPersonnummer(PATIENT_PERSONNUMMER);\n        request.setPatient().setFornamn(\"", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILLabel) {\n\t\t\t\t\t\tILLabel label = (ILLabel)child;\n\t\t\t\t\t\tILBasicBlock childAsBB = label.Parent as", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll)\n\t\treturn;\n\n\t    //if we're not a ragdoll then we need to make sure we're not moving\n\t    if (!IsRagdoll)\n\t    {\n\t\t//we're not a", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class FractureLayer(GeoLayer):\n\nThis is a subclass of GeoLayer. It is used to represent a fracture layer in the geological model. The only difference between this class and the GeoLayer class is that it is specifically designed for fracture layers.\n\nThe F", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "      out[outOff++] = (byte) (num >>> 24);\n        out[outOff++] = (byte) (num >>> 16);\n        out[outOff++] = (byte) (num >>> 8);\n        out[outOff++] = (byte) num", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "          super( source );\n            this.objectVariables = objectVariables;\n        }\n\n        public FilteredPatternFinder( Iterable<PatternMatch> source,\n            Map<String, PatternNode> objectVariables,\n            Map<String, PatternNode> labelToNode )\n        {\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "def transform_values(values):\n    \"\"\"\n    Transform a list of values into a list of dictionaries.\n    \"\"\"\n    return [\n        {\n            'value': value,\n            'type': value.tag.localname,\n            'unit': value.get('", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "          frame.setSelected(true);\n            frame.toFront();\n          }\n        }\n      });\n    } catch (Exception ex) {\n      ex.printStackTrace();\n    }\n  }\n}\n\n//The code above is incomplete, please complete it.\n//The", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "# This is the code that needs to be completed\n# It should call the function getLC() and print the result\n# The result should be a tuple containing the filename, redshift and data\n# of the LC for the given ID\n# The ID can be obtained from the command line argument\n#", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "  move(out, Util.px2mm(offset.x), Util.px2mm(offset.y), Util.px2mm(offset.z));\n    for (int z = 0; z < p.getRasterDepth(); z++)\n    {\n      for (int", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    ContentValues values = new ContentValues();\n                    values.put(DbHelper.TableExpenses._ID, newId);\n                    values.put(DbHelper.TableExpenses.ID_GROUP, newId);\n                    db.update(DbHelper.TableExpenses.", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "              m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n        #endregion\n        public IntPtr Ptr\n        {\n            get", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tqueue.RemoveAt(0);\n\t\t\t\tplayer.GiveMoney(queue[0].Cost);\n\t\t\t\tqueue[0", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    infoText += \" file\" if numberOfFiles==1 else \" files\"\n    infoText += \"<br>\"\n\n    if numberOfHiddenFiles>0:\n        infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \"\n        infoText += \"file\"", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "      code = re_m4.sub(r'@\\1@@', code)\n        # replace all variables by their value\n        for var in self.env.keys():\n            code = code.replace('@%s@' % var, self.env[var])\n        #", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "if __name__ == '__main__':\n    rospy.init_node('PlanningServer')\n    try:\n        PlanningServer = PlanningServer()\n    except rospy.ROSInterruptException:\n        pass\n\n#===============================================================================\n# This", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] - 2 * h[ y, x ], 2 );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactor", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "              if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(new TextTimestampAdapter(timestampFormatFactory.get(pattern), utf8()));\n                break;\n            case", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tif (qs.Execute().ReturnValue < 0)\n\t\t\t\treturn false;\n\t\t\tentity.cti_id = Convert.ToInt32(qs.ReturnValue);\n\t\t\treturn true;\n\t\t}\n\t}\n}", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic int PropertyCount\n\t\t{\n\t\t\tget { return 2; }\n\t\t}\n\t\tpublic Type ComponentType\n\t\t{\n\t\t\tget { return typeof(MyComponent); }", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "# Set the proposed configuration\nself.proposed = {}\nself.proposed[\"ntp\"] = {}\nself.proposed[\"ntp\"][\"auth-key\"] = {}\nself.proposed[\"ntp\"][\"auth-key\"][str(self.key_id)] = {}\nself", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "          component = self.store.bulk_operations(test_course.id)\n            component.update_ancestors(edited_user=editing_user)\n            component.commit()\n\n        # Verify that the component's edit_info was updated\n        component = self", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "      digest.update((byte) (TEXT_CODE & 0xff));\n        update(ch, start, length);\n    }\n\n    public void startElement(String uri, String localName, String qName, Attributes atts)\n            throws SAXException {\n        digest.", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "#def mkrange(data):\n#    start, end = unpack(data, 'HH')\n#    return aetypes.Range(start, end)\n#\n#def mkcomparison(data):\n#    opcode, left, right = unpack(data, 'LL", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "          Type type = api.ActionDescriptor.GetParameters().FirstOrDefault()?.ParameterType;\n            if (type == null)\n            {\n                type = api.ResponseType != null ? api.ResponseType : typeof(void);\n            }\n            if (type == typeof(Http", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "      elif isinstance(entry, gtk.Entry):\n            self.on_editing_focus_out(entry)\n            return\n\n        # If the cell is not editable, do nothing\n        if not self.model.get_iter(path).get_flags() & gtk", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "          beanProperties.addPropertyValue(\"locations\", newLocationList);\n        }\n        return beanProperties;\n    }\n}\n*/\nMutablePropertyValues beanProperties = new MutablePropertyValues();\nbeanProperties.addPropertyValue(\"locations\", new PropertyValue(new Location[] {", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "          lines = f.readlines()\n        finally:\n            f.close()\n    if f:\n        for line in lines:\n            if len(line) > 0 and line[0] == \"#\":\n                module.fail_json(msg=\"Password file contains blank lines", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "      [In, MarshalAs(UnmanagedType.Interface)] IMFMediaEvent pEvent\n        );\n    }\n    #region IMFMediaEventAlt\n    [ComVisible(true)]\n    [Guid(\"12345678-1234-123", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "      authorizations.add( directedAclKeys );\n        return null;\n    }\n}\n\n// The code above is incomplete, please complete it.\n// The missing line of code is:\n// authorizations.add( directedAclKeys );\n// This line of code should be", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "      for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag name of the element.\"\"\"\n        expected_tag = self.expected_tag(element)\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "=====================\n\n# SAX parser\n#\n# This is a simple SAX parser.  It is not intended to be a complete\n# implementation, but rather a demonstration of how SAX can be used\n# to parse an XML document.\n#\n# The parser is implemented as a", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) target, diagnostics, context);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t * Validates validation EMSSc", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvType.KeyLocator) != TlvType.KeyLocator) {\n\t\t\t\tthrow new InvalidOperationException(\"Expected a KeyLocator, but got \" + decoder.peekType());\n\t\t\t}\n", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "      for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //Updates the camera\n        camera.update(delta);\n        \n        //Updates the H", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "      action.setColor( color );\n        GameEngine.model().getGame().addRegistration( action );\n        hide();\n      }\n    } );\n    hide();\n  }\n}", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "# Raise an error if the response status code is not 200\nif r.status != 200:\n    err = json.loads(r.data.decode(\"utf-8\"))\n    raise RuntimeError(\"Failed to download file: %s\" % err[\"message\"])", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = response.FailureReason;\n\t\t\t}\n\t\t\tcatch (Exception ex)", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "def _find_carbon_metabolites(reaction):\n    \"\"\"Return a list of carbon containing metabolites in a reaction.\"\"\"\n    return [met for met in reaction.metabolites if np.any(np.isclose(met.id, \"C\"))]\ndef _", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "class Unit(CachedModel, CachedTreeItem, models.Model):\n    \"\"\"A unit is a single translation in a source language.\n    \"\"\"\n    #: The source language of the unit.\n    source_language = models.ForeignKey(\n        Language,\n        related_name", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n        'created', models.DateTimeField(auto_now_add=True)),\n        ('updated', models.DateTimeField(auto_now=True)),\n        ('created_by', models.ForeignKey(related_name='created_by', to=settings.AUTH_USER_MODEL", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "# Add a new controller to the switch\nself.controller = pox.ofp.controller.Controller(dp, 'controller-0')\n# Add the controller to the switch\ndp.add_flow(self.controller, 0, 0, 0, EthType(ethtype=", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "  if (m_RecentItems.size() >= 10) {\n      m_RecentItems.remove(m_RecentItems.size() - 1);\n    }\n    m_RecentItems.add(item);\n    if (m_IgnoreChanges) {", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "          if (src.FightMode == FightMode.Aggressor || src.FightMode == FightMode.PassiveAggressor)\n                return true;\n            return false;\n        }\n    }\nI'm not sure what the next line of code should be", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "      if (halfTradePeriodDate == null && takeOfferDate != null) {\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod() / 2);\n        }\n        return half", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\n\tstatic void CompFollow(Node p, BitSet f) {\n\t\tif (p == null) return;\n\t\tif (", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\tBeginAsyncRead(buff, 6, mReadCallback);\n\t\t\treturn mReadBuffer;\n\t\t}\n\t\tprivate void mReadCallback(IAsyncResult ar)\n\t\t{\n\t\t\tint bytesRead =", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(order);\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tMskJointVo vo1 = (MskJointVo) o", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( fileName );\n\t\t\t}\n\t\t\tcatch ( Exception ex )\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"Error: {0}\", ex.Message );\n\t\t\t}\n\t\t}\n\t}\n}\n\nI", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Eq(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List<Item>();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "          for (int j = 0; j < N_INDEXES; j++)\n            {\n                _freeList[j].Next = null;\n            }\n        }\n    }\n}\n// UPDATE 1:\n// The code above is incomplete and contains errors", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "# navigate to the Rates page and create a new Compute Rate\nrates_page = navigate_to(Rates)\nnew_compute_rate = rates_page.create_compute_rate(description='Test Compute Rate')\n# fill in the fields for the new Compute Rate\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\t// Write to shadow buffer\n\t\t\t\tshadowBuffer.WriteData( offset, length, src, discardWholeBuffer );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\tdef open(self):\n\t\tself.create()\n\t\tself.openScanner()\n\t\tself.show()\n\t\tself.start()\n\t\tself.connect(self, \"scanFinished\", self.onScanFinished)\n\t\tself.connect(", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "          else if (filterStr.isEmpty()) {\n                throw new IllegalArgumentException(\"empty filter string\");\n            }\n            else {\n                String[] filters = filterStr.split(\";\");\n                for (String filter : filters) {\n                    String[] parts = filter.split", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "              // Copy the decoded row to the output stream\n                fout.Write(curr, 0, curr.Length);\n                // Copy the decoded row to the previous row buffer\n                Array.Copy(curr, prior, prior.Length);\n            }\n            return", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "      s = lowlevel.SignalMessage(interface='org.freedesktop.DBus',\n                                   member='NameOwnerChanged')\n        self.assertEqual(s.interface, 'org.freedesktop.DBus')\n        self.assertEqual(s.member, 'Name", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    except:\n        print \"Error in p_operator\"\n        continue\n\nI'm not sure what the code is trying to do, but it looks like it's trying to compute some sort of product of elements in a module, and it's doing this for all generators in the", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "          AssertParseError(\n                \"1:1: Message \\\"TestMessage\\\" has no default constructor.\",\n                \"TestMessage()\");\n            AssertParseError(\n                \"1:1: Message \\\"TestMessage\\\" has no default constructor.\",\n                \"TestMessage()\\n", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal int size = m.size();\n\t\t\tfor ( int i = 0; i", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Mobiles.PlayerMobile).Auction.ToString() );\n\t\t\t}\n\t\t\tcatch { }\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\nclass HrAttendance(models.Model):\n    _inherit = 'hr.attendance'\n\n    def attendance_action_change(self):\n        \"\"\"\n        This method is called when the employee checks in or checks out.\n        \"\"\"\n        self.ensure_one()\n", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = null;\n\t\tString specimenId = orderInvestigationLiteVo.getSpecimenId();\n\t\tif (specimenId != null)\n\t\t{\n\t\t\tparentRow = findOrCreateSpecimenGridRow(specimenId", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "              pt = (POINT)Marshal.PtrToStructure(c.Location, typeof(POINT));\n                return new Point(pt.X, pt.Y);\n            }\n        }\n        /// <summary>\n        /// Sets the position of the item.\n        /// </summary>", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "      new_terminal = maker.new_terminal(self, cwd, profile)\n        self.add_tab(new_terminal)\n        self.show_all()\n        self.last_active_terminal = new_terminal\n        self.emit('tab-", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    toReturn.Add(new StructFieldInfo(name, managedType, marshalType, isArray: arraySize > 0));\n                }\n            }\n            return toReturn;\n        }\n    }\n    public class StructFieldInfo\n    {\n        public StructField", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn attributes.HasFlag (TypeAttributes.Sealed) && base_type != null && base_type.IsValueType;\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsByRef {\n\t\t\tget { return attributes.HasFlag (TypeAttributes", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "              throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}\n//This is the code that needs to be completed.\n//The code is for a simple rule engine.\n//The engine uses a dictionary to store", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n    self.context = OpenSSL.SSL.Context(\n        OpenSSL.SSL.PROTOCOL_SSLv23_METHOD)\n    self.context.set_options(OpenSSL.SSL.OP_NO_SSLv2)\n    self.context.set_options(Open", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.checkbutton1 = new CheckButton (\"_Check All\", true);\n\t\t\tthis.checkbutton1.UseUnderline = true;\n\t\t\tthis.checkbutton1.CanFocus = false;\n\t\t\tthis.checkbutton1.Name = \"check", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "# ______________________________________________________________________________\n#\n# This is the code that should be completed.\n#\n# ______________________________________________________________________________\n\n# The following function is called when a game is finished.\n# It creates a new game widget and adds it to the notebook.\n", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "  \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-next\": QKeySequence(Qt.CTRL + Qt.Key_PageDown),\n    \"Move-Tab-to-previous", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [name=\" + this.persistenceUnitName + \", classLoader=\" + this.classLoader + \"]\";\n\t}\n}\n// End of code.\nThe code above is a Java class named MutablePersistenceUnitInfo that implements the javax.persistence.", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "  IEditorInput editorInput = getEditorInput();\n    if (editorInput instanceof IFileEditorInput)\n    {\n      IFile file = ((IFileEditorInput)editorInput).getFile();\n      return file.isReadOnly();\n    }\n    return false;\n  }\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(612, 12);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(10", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "      return sb == null ? string : sb.toString();\n    }\n}\n\nThe code above is incomplete, and I need to complete it. The method encode() is incomplete, and I need to complete it. The method encode() is supposed to encode a given string and return the encoded string", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512 (legacy)\", hmac, data, digest);\n\t\t}\n\t\t//\n\t\t// The following test case is for the HMACSHA512 algorithm\n\t\t//\n\t\t[Test]\n\t\tpublic void H", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch (m_d) {\n\t        case option_1:\n\t            current_sum += 4;\n\t            break;\n\t        case option_2:\n\t            current_sum += 4;\n\t            break;\n\t        case option_3:\n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "      return null;\n      String javaPath = java.GetStringValue(\"JavaHome\");\n      if (javaPath == null)\n        return null;\n      return javaPath;\n    }\n    private static String GetJavaHome()\n    {\n      String javaHome = Environment.GetEnvironmentVariable", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "  comment = l[len(self.ansible):]\n    if comment == name:\n        return [l, self.lines[self.lines.index(l) + 1]]\n\n    # attempt to find job by matching the job string\n    if job is not None:\n", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# Register all modifiers\nbpy.utils.register_class(SUBSURF_MODIFIER)\nbpy.utils.register_class(BEVEL_MODIFIER)\nbpy.utils.register_class(BOOLEAN_MODIFIER)\nbpy.", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "          double[] likelihoods = new double[totalBuckets];\n            for (int i = 0; i < totalBuckets; ++i)\n            {\n                double rankBucket = rankCounts[i];\n                double rankBucketFraction = rankBucket / totalRank", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "      for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getNeighbor());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\nif __name__ == \"__main__\":\n    p = Packet()\n    p.sniff(prn=lambda x: print(x.summary()))\n    time.sleep(1)\n    p.filter(\"tcp port 80\")\n    p.sniff(count", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "          this.rptComboBox.SelectedIndex = 0;\n            //\n            // rptComboBox\n            //\n            this.rptComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;\n            this.rptComboBox.Form", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "          'Meta': {'db_table': 'scan'},\n            'id': ('models.AutoField', [], {'primary_key': 'True'}),\n            'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),\n           ", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "              // If the type is not defined in the schema, and we are not processing anonymous complex types,\n                // then we will not process it.\n                if (!isProcessAnonymousTypes()) {\n                    return false;\n                }\n            }\n        }\n        return", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "      self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_validate_notificate(self, cr, uid, ids, context=None):\n", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "          set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets the currently selected item\n        /// </summary>\n        object IBOColSelector.SelectedItem\n        {\n            get { return this.SelectedRows[0].DataBoundItem; }\n", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "          return String.Format(\"{0} ({1}): {2} ({3} Channels) {4}\",\n                this.Name,\n                this.TargetName,\n                this.Channels,\n                this.TypeDescription,\n                this.IsActive ?", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = valueObject.getCareContext().getDomainObject();\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\t//TODO: handle custom fields\n\t\treturn domainObject;\n\t}\n}\n//################################################", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "          [\"cargo\", \"run\", \"--manifest-path\", \"..\", \"--features\", \"android\"] +\n            ([\"--\", \"rust-bindgen\"] if android else []),\n            cwd=self.project_dir,\n            env=env,\n            stdout=self", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getOptimisticScore(p, estP), this.getOptimisticScore(n, estN));\n\t\t}\n\t}\n\t/**\n\t * Computes the optimistic", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "              Stashed.SetStashDiffs(gitItemStatuses: gitItemStatuses, stashName: gitStash.Name);\n            }\n            Loading.Invoke(() => Loading.Visible = false);\n            Stashed.Invoke(() => Stashed.Refresh());\n       ", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "# print(lattice.cbuffer.get_object(bm0_index).out_address)\n# print(lattice.cbuffer.get_object(bm1_index).out_address)\n# print(lattice.cbuffer.get_object(bm2_index).", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "      if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.match(that) > 0;\n    }\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}\n```", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += PanelDatenQuellen.TAB;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EClass", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "# Load the index\narchive_index = load_archive_index(args.index_file)\nif archive_index is None:\n    log.msg('No index file found at \\'{}\\''.format(args.index_file))\n    sys.exit(1)\n#", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "      self.mosi_bits = miso\n        self.mosi_bits_ss = ss\n        self.mosi_bits_es = es\n        # Handle the 'DATA' packet.\n        if ptype == 'DATA':\n            self.samplenum += 1\n", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "        cursor = limit - v_3;\n          if (cursor <= limit) {\n            break lab0;\n          }\n          cursor--;\n        } while (false);\n        if (cursor < limit) {\n          cursor = limit;\n        }\n        // gopost:\n", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "              o = cls.newInstance();\n                o = handlers.decode(dins, o);\n                if (cd != null) {\n                    cd.last_received = System.currentTimeMillis();\n                    cd.last_size = msg_size;\n", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "  def _get_key_usage(self):\n        \"\"\"\n        Get the key usage extension, if present.\n        \"\"\"\n        extension = self.cert.get_extension(X509_EXTENSION_TYPE_KEY_USAGE)\n        if extension:\n            return", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (i != s.end());\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\t(*i).second->operator() ();\n\t\t\t}\n\t\t}\n\"\"\", file=f)\n   ", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "# interval = [0xD800, 0xDBFF]  # Surrogate pair\ninterval = [0xD800, 0xDC00]  # First half of a surrogate pair\n\n# The first half of a surrogate pair is translated into", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\t// tabulate the attributes\n\t\t\t// for each attribute, create a new node\n\t\t\t// and add it to the list of attributes\n\t\t\t// of the symbol\n\t\t\t// the new node should contain the attribute name\n\t\t\t// and the position of", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n#\n#     OpenERP Sale Order Line EDI Export\n#\n#     This module exports the sale order lines to E", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_URI_SSL);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSL", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "              permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n\n    @Override\n    protected void assertNodePermission(String nodeRef, String permission, boolean", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "# Here you can add your test cases for the Enumerator class.\n# For example:\n# def test_match_subsystem_and_sysname(self, context):\n#     devices = context.list_devices().match_subsystem('input')\n#     assert len(devices", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "# Create a device object\ndevice = Device(deviceToken)\n# Create a user object\nuser = device.newUser(loginId, password)\n# Login to the game\nuser.login()\n# Check if the user is logged in\nif user.isLoggedIn():\n    print", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "# This is the main part of the code.\n# We get the dataset from the command line arguments.\n# We then determine the calibrator and the target.\n# We then determine the frequency range.\n# We then determine the time range.\n# We then determine the number of antennas.", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "          if (m_Keys.Count > 0)\n                ItemID = 0x101F;\n            else\n                ItemID = 0x101E;\n        }\n        private class InternalTarget : Target\n        {\n            private InternalTarget(Key", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "      for (Iterator<String> it = devices.iterator(); it.hasNext();) {\n            String device = it.next();\n            String ipAddress = ipAddressMap.get(device);\n            int model = liveModelMap.get(device);\n            Tuner tuner = new", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "  if (lastSeenVersion < Version.USER_NOTIFICATIONS) {\n      jobs.put(Version.USER_NOTIFICATIONS, new UserNotificationsMigration());\n    }\n    if (lastSeenVersion < Version.DAYDREAM_MIGRATION) {\n", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "    List<Pattern> regex = new ArrayList<>();\n      for (String patternString : split[0].split(\"\\\\s+\")) {\n        regex.add(Pattern.compile(patternString));\n      }\n      String type = split[1];\n      List<String> overwrites =", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "      for p in path:\n            if os.path.isfile(os.path.join(p, n)):\n                return SCons.Node(os.path.join(p, n))\n            # try to find it in the sub_path\n            for subp in sub", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "#\n# Mapnik Python bindings\n#\n# This file contains the Python bindings for Mapnik.\n#\n# The Mapnik Python bindings are a thin wrapper around the C++ API.\n#\n# The Python bindings are generated using SWIG (http://www.swig.", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "# Get the current state\ncurrent = client.tm.ldns.monitors.get(name=name)\n# Determine the state that needs to be set\nstate = module.params['state']\n# Determine the differences between the current and desired state\nchanges = {}\nif current is", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "=====================\n\nclass MethodAddView(navigate_to, BaseView):\n    @cache(arbitrary=True)\n    def go(self):\n        self.browser.click_link('Automate', 'a[href=\"/automate\"]')\n        self.browser.", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "          throw new Exception(\"Action class not found: \" + className);\n        }\n        return result;\n    }\n}\n\n// This is the interface for the Action class\npublic interface IAction {\n    public void execute();\n}\n\n// This is the interface for the ActionFactory class", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "=====================\n\nclass TestCommentThreadViews(TestCase):\n    \"\"\"Tests for comment thread views.\"\"\"\n\n    def setUp(self):\n        super(TestCommentThreadViews, self).setUp()\n        self.client = Client()\n        self.course_id = reverse(\"course", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "#         embedManifestDll(target[0], manifestSrc)\n#         return 1\n#     else:\n#         return 0\n#\n#def embedManifestDll(dll, manifest):\n#    \"\"\"Embeds the manifest file into the DLL.\"\"\"\n#    #", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "          IStructuredSelection selection = (IStructuredSelection) getStructuredSelection();\n            final Object[] elements = selection.toArray();\n            final IResource[] resources = new IResource[elements.length];\n            for (int i = 0; i < elements.length;", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t// Allocate output fields\n\t\t//\n\t\t// We need to allocate output fields, but we don't know how many we need yet.\n\t\t// We'll just allocate one for now, and add more later.\n\t\t//\n\t\t// We need to allocate", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "```python\n# this is a test\ndef test_extract_date_from_string():\n    assert extract_date_from_string('2014-01-01') == datetime(2014, 1, 1)\n    assert extract_date_", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "          else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            int walking = 1;\n            int count = 1;\n            int spawn = 1;\n            int maxSpawn = 1", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "def test_suspend_resume(test, params):\n    \"\"\"\n    Test suspend and resume functionality of the guest.\n\n    :param test: QEMU test object.\n    :param params: Dictionary with the test parameters.\n    \"\"\"\n    # Get the guest OS type and version\n", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "      service.submit(pub);\n        service.shutdown();\n        service.awaitTermination(1, TimeUnit.MINUTES);\n        int received = rc.get();\n        System.out.println(\"Received \" + received + \" messages\");\n    }\n}\nThe code", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "          if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequest(r, destination);\n            }\n            this.owner.getDecorator().setOnSendReply", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F) return (uint)value;\n\t\t\tif (value <= 0xFFFF) {\n\t\t\t\treturn (uint)((ushort)0xCD | ((ushort)(value >> 8) << 6));\n\t", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "      self.fm.run_command('arj', 'x', descr, au_flags=au_flags,\n                           args=['-C', '.', '--no-same-perm'] + copied_files)\n        self.fm.run_command('xargs', '-", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_String_ConstructorFlag ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (\"MonoTests.ActivatorTestInternal.COMTest\", new object[] { 1 });\n\t\t\tCOMTest objCOM", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "  def testOneOldAndOtherNew(self):\n        da = Locale.objects.get(code='da')\n        de = Locale.objects.get(code='de')\n        repo_da = self._setup(da, 1, 1)\n        repo_de", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "          self.Log(\"Userstate update for user %s\" % userstate.session)\n            self.send_userstate(userstate)\n            cmd.response = True\n            cmd.parameters = {}\n        elif cmd.cmd == \"set_name\":\n            self.Log(\"Setting", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "      PlayerGroup group = player.getPlayerGroup();\n        if (group != null) {\n            group.setLeader(player);\n        }\n    }\n    public static PlayerGroup getGroup(Player player) {\n        return player.getPlayerGroup();\n    }\n    public", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\ndef test_vtable():\n    \"\"\"\n    Test the vtable functionality.\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    logger.setLevel(logging.DEBUG)\n    formatter = logging.Formatter(\"%(asctime)s %(levelname)s", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "  def test__update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n        column, tree_model, tree_iter = self._setup_column_with_data(1, False, 15)", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t}\n\twhile (parent instanceof Grid);\n\t((Grid) parent).addColumn(column);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "              Image = (version >= 100) ? ReadImage(element, \"Image\") : null;\n            } catch (Exception ex) {\n                throw new Exception(\"Error loading creature \" + Name + \":\\n\" + ex.Message);\n            }\n        }\n\n", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\tfrom.AddToBackpack( m_key[i] );\n\t\t\t\t\tfrom.SendMessage( \"You have been given a key to summon {0}.\", m", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif (beans == null)\n\t\t\treturn coll;\n\t\tfor (ims.care.vo.ChangeOfServiceVo bean : beans)\n\t\t\tcoll.add(bean);\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "Version(1, new int[]{1, 1, 1, 1}, new ECBlocks[]{\n                new ECBlocks(1, 3),\n                new ECBlocks(1, 3),\n                new ECBlocks(1, 3),\n                new ECBlocks", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pbOutput = kdf.DeriveKey(pbSalt, pbMsg, 16, 1, 1);\n\t\t\tif (!Arrays.Equals(pbOutput, pbExpecedOutput))\n\t\t\t\tthrow new Exception(\"Test failed\");\n", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\tfloat discount = 0F;\n\t\tfor (ItemStack armor : player.inventory.armorIn", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Add your custom middleware classes here.\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.Cs", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" {1}) as the current LED_Queue (has {2})\",\n\t\t\t\t\t\tNextFrame.PixelCount, NextFrame.Name, LightCount));\n\t\t\t// Add the new frame to the queue\n\t\t\tLights = NextFrame", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "      if ((this.actionTrace == null)) {\n            if ((other.actionTrace != null))\n                return false;\n        } else if ((!this.actionTrace.equals(other.actionTrace)))\n            return false;\n        if ((this.userErrorMessage == null))", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "          dc.number = PhoneNumberUtils.parse(p.readString(), null);\n            dc.callType = p.readInt();\n            dc.isEmergencyCall = p.readInt() != 0;\n            dc.isMultipart = p.readInt() != ", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadataType.", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "          for (int x = 0; x < xSizeP; x++)\n            {\n                int index = y * xSizeP + x;\n                newVertices[index] = new Vector3(left + x * tileSize, height + y * tileSize, 0", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_NAMESPACE, API_NAME, API_METHOD_ADD, testInt1);\n\t\t\t\n\t\t\tif(API_METHOD_ADD.equals(API_METHOD_ADD))\n\t\t\t{\n\t\t\t\tresult", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void addSelection", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "          out.writeInt(-1);\n        }\n        else {\n            out.writeInt(found.oid);\n        }\n        out.flush();\n        out.close();\n    }\n}", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        16 + (~(stactop[0] & 0x0f) >> 4),\n                        Machine.gfx[5],\n                        16,\n                        Machine.drv.screen_width,\n                        Machine.drv.screen_height,\n                ", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                    .DistanceSquared(position) <=\n                                    spell.Width*spell.Width)\n                                {\n                                    result.Add(target);\n                                }\n                            }\n                            break;\n                        case Collision.CollideWithTur", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "      if (graph.isAncestorOf(x, y)) return true;\n        if (graph.isAncestorOf(y, x)) return true;\n        if (x.equals(y)) return false;\n        List<Node> nodes = new ArrayList<>();\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if (pop[i] is Drawable)\n                        plcs.Push(pop[i] as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"Drawable", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "      if (this.attachmentFile == null && other.attachmentFile == null) {\n            return true;\n        }\n        if (this.attachmentFile != null && other.attachmentFile != null) {\n            if (this.attachmentFile.getFileId() == other.attachmentFile.", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (mobiles[i] != from && mobiles[i].Alive && mobiles[i].CanBeDamaged)\n                            AOS.Damage(mobiles[i], from, 10, 0, 0, 0, 0, 0", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg.Key, msg.Value);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t\t{\n\t\t\t\t\tHistory.Values.ToList().RemoveAt(0);\n\t\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "  return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public List<ComponentInstLight> getComponentInstLights(String userId, String componentName) {\n    return mock.getComponentInstLights(userId, componentName", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            files[++index] = files[index];\n                        }\n                    }\n                    final DialogFragment dialogFragment = new ZipDialogFragment();\n                    dialogFragment.show(ActionBarActivity.this.getFragmentManager(),\n                            \"ZipDialogFragment\");\n                ", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "      this.channel.close();\n    }\n    public void close(IChatBaseComponent ichatbasecomponent) {\n        this.n();\n        this.a();\n        this.m = null;\n        this.channel = null;\n        this.o();\n        this.", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "              z_arr[p_index, kk, :] = z_dict[z_key][per][:]\n\n                # --> This line is wrong, it should be:\n                z_arr[p_index, kk, :] = z_dict[", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "    return context.getString(resourceOne, name);\n    }\n    String names = String.join(\", \", recipients.stream().map(Recipient::toShortString).toArray(String[]::new));\n    return context.getString(resourceMany, names);\n  }\n}", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "      env = dict(os.environ)\n        env.update({'PATH': ':'.join(env['PATH'] + extra_path)})\n        if gon native:\n            env['ANDROID_NDK_HOME'] = self.config['tools']['android_ndk", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "def parse_manifest(manifest_file):\n    logger.info(\"Parsing manifest file: %s\", manifest_file)\n    with open(manifest_file, \"r\") as f:\n        manifest_json = json.load(f)\n        self = Manifest()", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "      if (compiledScript != null) {\n            compiledScript.dispose();\n            compiledScript = null;\n        }\n    }\n    private Binding createBinding() {\n        final Binding binding = new Binding();\n        binding.setVariable(\"out\", new PrintStream(", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "          throw new NotImplementedException();\n        }\n        /// <summary>\n        /// Gets a value indicating whether a timeout can be set for the adapter\n        /// </summary>\n        /// <returns>True if a timeout can be set, false otherwise</returns>\n        protected virtual bool Server", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\nclass TransformDataset(object):\n  \"\"\"\n  Transforms a dataset by applying a list of transforms to each data point.\n  \"\"\"\n  def __init__(self, dataset, transforms):\n    self.dataset = dataset\n    self.transforms = transforms\n\n ", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo) obj;\n\t\tif (this.id == null && other.id != null)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tif (this.", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "      assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n\n    @Test\n    public void shouldFindStacksByTags() throws Exception {\n        stacks[0].getTags().addAll(asList(\"tag1\", \"tag2\"));\n", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "      Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterCode(\"DEPTH\");\n        depthParameter.setParameterFamily(pf);\n        depthParameter.setValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSIONS\n        if", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// [$identifier] or [$identifier:type]\n\t\t\tif (pattern.IsIdentifier)\n\t\t\t{\n\t\t\t\tif (candidate.IsIdentifier && candidate.Name == pattern.Name)\n\t\t\t\t\treturn true;\n\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "              if (colisionList.Any())\n                {\n                    extendedFarmLocation = colisionList.First().Position;\n                    extendedFarmLocation.Extend(objAiBase.Position, q.Range);\n                    extendedWillHit = MinionManager.Get", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(contextMenus);\n\t\t// Controls\n\t\tsuper.addControl(new cmbContractType(this, new cmbContractType_FormLoader(), new cmbContractType_FormLoader_Factory(), new cmbContractType_FormLoader_", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "@task\ndef prerequisites():\n    \"\"\"\n    Install Python 3.6 and pip.\n    \"\"\"\n    # Install Python 3.6\n    python_version = \"3.6.12\"\n    python_installer = \"https://www.python.org", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "          'name': 'test_readonly_m2o',\n            'm2o_field': self.env.ref('test_testing_utilities.test_m2o_record').id,\n        })\n        f = Form(r)\n        with f.fields_", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "  assert simplify(Sum(x**2, (x, 0, 1))).change_index((1, -1)) == Sum(x**2, (x, 1, 2))\n\n    # Test change_index with a sum of products\n    assert simplify", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tUnityEngine.WWW www = new UnityEngine.WWW(string);\n\t\t\treturn l.pushValue(www.LoadByteArrayFromServer(0));\n\t\t} catch(Exception e) {\n\t\t\treturn error(l,\"c# exception:\"+e);\n", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "              this.InitializeAdd(changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeRemove(changedItems, startingIndex);\n            }\n        }\n        private void InitializeAdd(IList newItems, int startingIndex)\n        {\n            this", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "          String xml = writer.toString();\n            assertEquals(xml, getExpectedXML(staxResultClass, staxResultClass.getSimpleName() + \"_expected.xml\"));\n            int sizeAfter = getNamespaceSize(desc, staxResultClass);\n            assertEquals(sizeAfter, sizeBefore", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.CampusType = Token2Csv();\n                    break;\n                case Param.CampusType2:\n                    c.Campus", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  Width: {0}\", ide.width);\nConsole.WriteLine (\"  Height: {0}\", ide.height);\nConsole.WriteLine (\"  ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"  BitCount: {0}\", ide.bitCount", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "              // adds the JSR block to the RET block\n                if (l.successor != null) {\n                    l.successor.successor = JSR;\n                }\n            }\n            if (l.status == Label.ACCESSIBLE) {\n               ", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "          ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            UnityEngine.Vector3 @origin = (UnityEngine.Vector3)ILIntepreter", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.setText(position.toString());\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {\n\t\t\tString positionString = comboLabelPosition.getText();\n\t\t\treturn Position.fromString(positionString);\n\t\t}\n\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "      currImageValue = self.find_element_by_name(\"image\")\n        self.assertEqual(currImageValue.get_attribute(\"value\"), str(self.image_count-1))\n\n# This test checks that the image text box value is now 1 less than the last frame", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "=====================\n\n# This is the end of the code provided. The next line of code is not part of it.\n\n# Here is a possible implementation of the missing part:\n\n# Create a new instance of the SSHTransport class and set the KEX algorithm to 'diffie-hell", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "          FileSystemNode folderNode = FileSystemNode.createFolder(overallNodeName);\n            FileSystemNode databaseNode = FileSystemNode.createDatabaseNode(connectionData);\n            FileSystemNodeManager manager = FileSystemNodeManager.getInstance();\n            manager.addNode(folderNode);\n", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "              (self.employee_id, from_date, to_date, code))\n                res = self.cursor.fetchone()\n                if res:\n                    return res[0], res[1]\n                else:\n                    return 0, 0", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "  mvir = 1.e14 #Mpc/h\n    #The following lines are used only used for ST MF and ST bias\n    mvir_h = mvir * (1. + z)\n    mvir_m = mvir_h * (1. +", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "      d.height = font.getSize() + getSettings().getDiagramSettings()\n                .getDiagramTextMarginBottom();\n        d.width = getPreferredSize().width;\n        return d;\n    }\n    \n    @Override\n    public void setText(", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "# self.p0=p0\n# self.p1=p1\n# self.phi=phi\n# self.theta=theta\n# self.flag=flag\n# self.print_path=print_path\n# self.cal_points()\n# self.cal_dist", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void OrdersBtn_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "=====================\n\nclass _Hist3D(Graph):\n    def __init__(self, name, title, xbins, ybins, zbins):\n        Graph.__init__(self, name, title)\n        self.SetName(name)\n        self.SetTitle", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "          Roster roster = protocol.getRoster();\n            roster.addMessageListener(contact, new MessageListener() {\n                @Override\n                public void process(Message message, IQ iq) {\n                    if (message != null && message.getBody() !=", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "      im1L = im1.convert(\"L\", rgb2I)\n        h1 = im1L.histogram()\n        # compute the transform\n        t = [h1[i] / h0[i] for i in range(len(h0))]\n       ", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tif (tag.getSelectingApplication().equals(Util.getAid())) {\n\t\t\t\tfinal int len = tag.getBlockSize(sfi_LOG) / 24;\n\t\t\t\tfinal int max = tag.getBlockSize(sfi_", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "=====================\n\n# Create a new parser\nparser = Parser()\n# Set the input file\nparser.open(\"input.ace\")\n# Parse the archive\nparser.parse()\n# Close the parser\nparser.close()\n\n# Iterate over the blocks\nfor block in parser", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter.dispose();\n\t\t// socketAdapter = null;\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "\n        path = environ['PATH_INFO']\n        for app, handler in self.apps:\n            if path.startswith(app):\n                return handler(environ, start_response)\n        return [b'404 Not Found']\n\n        # This is the end", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.train()\n\t\tmodel.savemodel( sys.argv[ 3 ] )\n\telse : print \"Usage : python %s <datafile> <outputmodel", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "          if (Utility.RandomDouble() < (double)chance / 100.0)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n\nI'm trying to", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "\n        if entry_name in entries:\n            raise ValueError(\"Duplicate enumeration value: %s\" % entry_name)\n        entries[entry_name] = entry_value\n\n        if displayname:\n            enum_member.name = displayname\n        enum_member = Enum", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    MessageBox.Show(\"Unable to find any modules to configure.\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Unable to find the FOG_Service.dll file.\");\n                this.Close();\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "              object obj = this.View.GetInnerPropertyValue(\"submitText\", false);\n                return (obj == null) ? true : Convert.ToBoolean(obj);\n            }\n            set\n            {\n                this.View.SetInnerPropertyValue(\"submitText\", value);", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "              if(this.triangles != null)\n                {\n                    for(int tri = 0; tri < this.triangles.length; tri++)\n                    {\n                        if(this.triangles[tri].textureHash == textureHash)\n                        {\n", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "@login_required\n@csrf_exempt\n@api_view(['GET'])\ndef my_view(request):\n    \"\"\"\n    This is a sample view that returns a JSON response.\n    \"\"\"\n    data = {'message': 'Hello, world!'}\n    return Response(", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Driver driver = idlePool.Dequeue();\n                    if (driver.IsExpired(now))\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else\n                    {\n                        idlePool.Enqueue(driver", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "  return [var]\n\n    # List format.\n    elif isinstance(var, list):\n        return var\n\n    # Tuple format.\n    elif isinstance(var, tuple):\n        return list(var)\n\n    # Other format.\n    else:\n        raise Type", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "# Register the quest in the system.\n# This is done by adding new lines in the following file:\n# data/config/config-quest.xml\n# Add <chain name=\"[QUEST_NAME]\" quests=\"[QUEST_ID]\"/> in the [Chain] tag\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60 * 60 - (double)num1 * 60) % 60);\n\t\t\t\t\tempty = string.Format(\"{", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "          // Initialize OpenGL state\n            GL.ClearColor(Color4.CornflowerBlue);\n            GL.Enable(EnableCap.DepthTest);\n            GL.Enable(EnableCap.CullFace);\n            GL.CullFace(CullFaceMode.Back);\n           ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\n    def add_metabolite(self, metabolite):\n        \"\"\"Add a metabolite to the model.\n\n        Args:\n            metabolite (Metabolite): The metabolite to add.\n        \"\"\"\n        self._add_object(metabolite)", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (ims.clinical.vo.TumourGroupListVo vo : beans)\n\t\t{\n\t\t\tcoll.add(ims.clinical.vo.TumourGroupListVo.buildFromBean(vo));\n\t\t}\n\t\treturn coll", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent = lines[selectedLine];\n\t\t\t\twhile(current.next!=null){\n\t\t\t\t\tcurrent = current.next;\n\t\t\t\t\tif(current.x+current.width>right){\n\t\t\t\t\t\tright = current", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "      new LayoutAnimationController(set, 0.2f);\n        mListView.setLayoutAnimation(controller);\n    }\n\t\n\t/**\n\t * Fill the list with data.\n\t */\n\tprivate void fillData() {\n\t\t// TODO Auto-generated method stub", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "              if (PartnerInterestRow.RowState != DataRowState.Deleted)\n                {\n                    if (PartnerInterestRow.FieldKey > HighestNumber)\n                    {\n                        HighestNumber = PartnerInterestRow.FieldKey;\n                    }", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.isTm(pssm.getAa(i)))\n\t\t\t{\n\t\t\t\tscoresSol[i] = 1;", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
