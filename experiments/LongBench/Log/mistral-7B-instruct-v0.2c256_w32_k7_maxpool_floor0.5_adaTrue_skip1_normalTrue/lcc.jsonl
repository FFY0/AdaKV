{"pred": "\t\t\t\tParticipant p = m_Participants[i] as Participant;\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tMobile m = p.Play", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tself._init(graph)\n\t\t\tA = self.contracted_graph(Y, Z)\n\t\t\tsolutions.append(A)\n\t\t\tP.put((self.graph_score(A, Y, Z), A))\n\t\treturn solutions", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "if __name__ == '__main__':\n    TestSndfile.test()\n    TestSeek.test()\n    print \"All tests passed.\"\n# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4\n# Local Variables:\n# tab", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def get_video_status(self):\n        \"\"\"\n        Get the status of the video.\n        \"\"\"\n        # TODO: Implement this method\n        pass\n\nThis method is supposed to get the status of the video. \n\nHere's what I suggest:\n\n1", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t\twriter.addAttribute(\"label\", styleValue.getLabel());\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\ndef get_question(question_type, question_id):\n    # This function should return a QuestionData object\n    # that can be used to ask a question and check answers\n    # The question_type can be \"trivia\" or \"anagram\"\n    # The question_", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    mob.Target = new SR_TargetLocation(this);\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(this);\n                    break;\n", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "          for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n        }\n        s.println(\"***\");\n    }\n}\n\n/*\n * ServerHelloDone is sent by the server to indicate that it has finished\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "          try {\n                sp = new JESpace (name, path);\n                spaceRegistrar.put (name, sp);\n            } catch (SpaceError e) {\n                error (e);\n                return null;\n            }\n        }\n        return sp", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//TODO: Add Imp Alchemy\n\t\t\t\n\t\t\t//TODO: Add Alchemist's Potion", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "# Create a dispatcher instance with the given address and port\ndispatcher = SimpleHTTPRequestHandler(\"\", 8000)\ndispatcher.dispatcher = self\n# Create an HTTP server, bind to the socket and start listening for requests\nserver = HTTPServer((\"\", 800", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "  def lock_status(self, status_id):\n        self.statuses[status_id]['locked'] = True\n        self.update()\n\n        # Lock the status in the UI\n        self.statuses_widget.lock_status(status_id)\n\n        #", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "def action_copy(self, source, dest, session):\n    self.action_copy(source, dest, session)\n\nThis is a method definition for the `action_copy` function, which takes three arguments: `self`, `source`, and `dest`. It also has a `session", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsInstanceOf<ZoneIdentityPermission> (c);\n\t\t\tAssert.AreEqual (SecurityZone.Untrusted, c.Zone);\n\t\t\tAssert.IsFalse", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "# This is a simple example of how to use the SSLContext to wrap a socket.\n# It uses the default trust store and key store.\n#\n# You can use the SSLContext to wrap a socket in a secure connection.\n#\n# First, create a SSLContext with the default trust and", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "      DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "      self.__tmp_file = os.path.join(self.__tmp_dir, 'datastream-%s.dat' % uuid.uuid4())\n        self.__datastream_fd = os.open(self.__tmp_file, os.O_RDWR | os.O", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1 && store.GetValue(store.NColumns-2).ToString().Equals(\"\")) {\n\t\t\t\t\tjumpID = (int)store.GetValue(0);\n\t\t\t\t\tnewWeight = Convert.ToDouble(store.Get", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "      String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] != null) {\n                String argName = args[i].getName();\n                if (argName", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TEMP(new ConfigFile(\"temp.yml\"))\n\t\t{\n\t\t\t@Override\n\t\t\tpublic Map<String, Object> getLoadedData()\n\t\t\t{\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\t// Add the nodes to the manager\n\t\tmgr.addToRoot(playbackNode);\n\t\tmgr.addToRoot(shortcutsNode);\n\t\tmgr.addToRoot(new FontAndColorsPreferencePage());\n\t\tmgr.addToRoot(new Appe", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "              if (m_Owner.CheckSequence())\n                {\n                    m_Owner.Target = new InternalTarget(m_Owner);\n                    m_Owner.WontDropItems = false;\n                    m_Owner.FixedParticles(0x3728,", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "# The following code is used to ensure that all objects are fully loaded\n# when the Session is closed.  This is necessary for the Session to\n# expunge all objects, which is necessary for the Session to be able\n# to be garbage collected.\ndef _finalize_loaded(self, states", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field: fields) {\n\t\t\tString name = field.getName().toString();\n\t\t\tif (name2Field.containsKey(name)) {\n\t\t\t\tint i = 1;\n\t\t\t\tString newName = name;\n\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "====================\n\nclass UIModule(tornado.web.UIModule):\n    \"\"\"\n    A base class for UI modules.\n\n    UI modules are a way to factor out common UI code and reuse it across\n    multiple handlers.\n\n    To use a UI module, you", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n//\n// Generated by the Novell.Data.Designer.CommonDataLayer tool.\n// Do not modify this file. Set the DataSource property instead.\n//\nnamespace System.Web.UI.", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "if __name__ == '__main__':\n    args = parser.parse_args()\n    downloader = WigleDownloader( args.user, args.password, args.coordfile, args.outpath )\n    downloader.run()", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "              if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Skills", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "      builds += [{'os': 'Windows', 'arch': '32bit', 'version': version,\n                   'url': make_download_url(ctx, 'win32', version)}]\n        builds += [{'os': 'Windows', 'arch': '64bit',", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBean = TStateBL.getByProjectIDAndIssueTypeID(projectID, issueTypeID, objectID);\n\t\t\tif (stateBean==null) {\n\t\t\t\t", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "          foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if (argumentSyntax.Expression is IdentifierNameSyntax identifierNameSyntax && memberList.Any(x => x.Name.Equals(identifierNameSyntax.Identifier.Value))) {\n                    toReplace[argumentSyntax] = member", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "      split_test = self._update_partition_id(0)\n        # Verify that the children are set to the first group's children.\n        self.assertEqual(len(split_test.children), 2)\n        self.assertEqual(split_test.children[0].location", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "          //if (vertical) {\n            //    PdfDictionary desc = new PdfDictionary();\n            //    desc.Put(PdfName.TYPE, new PdfName(PdfName.FONT_DESCRIPTOR));\n            //    desc.Put(PdfName.F", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the parent\n\t\t\t\t\t\t\tCell", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "      task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      try {\n        return BitmapFactory.decodeStream(context.getAssets().open(model.getSprite()));\n      }", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "              if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "# TODO: Add NodeEditTagsForm and NodeManagePoliciesForm to the navigator\n# TODO: Add NodeEditTagsForm and NodeManagePoliciesForm to the list of views\n# TODO: Add NodeEditTagsForm and NodeManagePoliciesForm to the fixtures\n# TODO:", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequences, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyRecognitionListeners(BigInteger timestamp,\n\t\t\tLabanSequence", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "              if (Enabled)\n                    ImageUrl = EnabledImageUrl;\n                else\n                    ImageUrl = DisabledImageUrl;\n            }\n            base.Render(writer);\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "sharpness = sharpnessFromNBT(compound);\n\t}\n\t\n\t@Override\n\tpublic NBTTagCompound writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "      return getId() + \" (\" + getProbability() + \"%)\";\n    }\n}\n/**\n * The effect of a disaster.\n */\npublic class EffectType extends FreeColObjectType {\n    /**\n     * The type of effect.\n     */\n    public enum", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "# admin can access any group\nt = store.auth.get_token_for_user('admin')\nassert t['admin'] == True\ni = store.indicators.create(indicator=indicator, group=u'private')\nassert i is not None\n# test that", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "# Test that the delta document is correctly created\ndelta = person.get_delta()\nself.assertIsInstance(delta, Delta)\nself.assertEqual(len(delta.fields), 3)\nself.assertEqual(delta.fields['name'].old, 'owner')\nself.assertEqual(", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "=====================\n\ndef plot_data(self, x, y):\n    \"\"\"\n    Plot the given data.\n    \"\"\"\n    if self._fig is None:\n        self._fig = plt.figure(figsize=(10, 6))\n        self._ax = self", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "              if (!ignored.Contains(path) && !toScan.Contains(path))\n                {\n                    toScan.Add(path);\n                    _ = Task.Run(() => ScanMediaFiles(rootFolder, path));\n                }\n            }\n            foreach", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed == null ? null : write(key, computed));\n\t}\n\t@Override\n\tpublic E getOrDefault(Object key, E defaultValue) {\n\t\treturn read(key, internalMap.getOrDefault(key, defaultValue));\n\t", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "      cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) > 0:\n            obj = resbrains[0]\n            obj.setView('threaded')\n       ", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tpublic int Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z = value; }\n\t\t}\n\t\tpublic int X\n\t\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    // TODO: Obtain channel from cache or create it\n                    // TODO: Cache channel\n                    // TODO: Send channel to client\n                    // TODO: Send channel_uri to client\n                    // TODO: Send parcel voice channel to client\n                    // TODO: Send par", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriod CurPayPeriod=new PayPeriod();\n\t\t\tCurPayPeriod.DateStart=textDateStart.DateTime;\n\t\t\tCurPayPeriod.DateStop=textDateStop.DateTime;\n\t\t\tCur", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "      pattern = re.compile(r'^(?P<lat>[+-]?\\d{1,3}\\.\\d{1,2})(?P<lon>[+-]?\\d{1,3}\\.\\d{1,2})')\n        lat_lon", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "# This function is used by the group_member_create function to check if the user\n# is allowed to add a member to the given group or organization.\ndef _check_group_or_org_member_create_auth(context, data_dict):\n    group_or_org_", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint childIndex = node.getChildIndex(example.getLabel(predictionAttribute));\n\t\t\t\t// setting outcome\n\t\t\t\toutcomes[parentIndex] = childIndex;\n\t\t\t\t// setting depth\n\t\t\t\tdepths[parentIndex", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "          return this.TranslationMemory.SearchSegments(settings, segments);\n        }\n        /// <summary>\n        /// Performs a search for a single segment.\n        /// </summary>\n        /// <param name=\"settings\">The search settings.</param>\n        /// <param name=\"", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "          codePoint = string.charAt(offset++) << 10\n                      | string.charAt(offset++) & 0x3FF;\n            if (offset >= strlen) {\n               return -1;\n            }\n         }\n         if (_range != null && _range", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\tObservationDAO observationDAO = new ObservationDAO();\n\t\tObservation observation = observationDAO.getByAccessionNumber(accessionNumber);\n\t\tif (observation != null) {\n\t\t\tString studyFormNameFromDB = observation.getStudy", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderToClient(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.ModVersion < ModVersion.Minimum)", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif (beans == null)\n\t\t\treturn coll;\n\t\tfor (int i = 0; i < beans.length; i++)\n\t\t\tcoll.add(beans[i].build());\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify(header=\"Error\", message", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "          int [] ret = new int[A.Dimensions.NumberOfDimensions];\n            A.IndexToSubscript(seqindex, ref ret[0]);\n            return ret;\n        }\n    }\n}", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "plotName = pD.get( 'plotName', None )\n  if plotName is None:\n    return S_ERROR( \"Missing plot name!\" )\n  pD[ 'plotName' ] = plotName\n  #Get plotname\n  if not 'plotType' in", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (world.IsPlayerControlled(self.Owner) && self.Owner.IsAlive && self.Owner.IsPowered &&\n\t\t\t\tself.Owner.IsIdle && self.Owner.IsInRange(GetRandomRallyPoint(), world.Map.", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "      // Save the compiled plan\n        String plan_name = \"Plan_\" + db.getDatabaseName() + \"_\" + proc.getName();\n        db.getProcedures().addProcedure(plan_name, plan, null, null, null, null, null, null, null", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(221, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (int) parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = (int) stop_bits;\n\t", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "  page = self.client.get(self.user.get_absolute_url())\n    self.assertTemplateUsed(page, 'user_profile.html')\n    self.assertContains(page, self.user.username)\n    self.assertContains(page, self.user.", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "  _keep_tempdir = parser.parse_args().keep_tempdir\n    unittest.main()\nif __name__ == '__main__':\n    main()\n# vim: set fileencoding=utf-8 :\n# Local Variables:\n# mode: python\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tself.list.setList(self.newAPList)\n\t\t\t\tself.newAPList = []\n\t\t\t\tself.oldAPList = self.newAPList\n\t\t\t\tself.newAPList = []\n\t\t\t\tself.", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "              int barWidth = (int)Math.Ceiling(xScale * (float)BAR_WIDTH);\n                int barHeight = (int)Math.Ceiling(yScale * (float)BAR_HEIGHT);\n                int textWidth = (int)", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "  return results;\n  }\n}\n\n// This is the end of the code.\n\nThe code above is a Java class named `PropertiesUtils` which provides some utility methods for working with `java.util.Properties` objects. The class includes a method `hasKey(Properties props, String", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "#        y_points = np.arange(-89.5, +89.5, 1.0)\n#        z_points = np.arange(test_cube.coord(\"depth\").values[0], test_cube.coord(\"depth\").values[-1", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "          if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrent", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "          set { _numValues = value; }\n        }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "          this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(292, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n    def nullFunction( self, name, dll=None, resultType=None, argTypes=None, argNames=None, extension=None, deprecated=False ):\n        \"\"\"\n        Create a null function with the given name, DLL, result type, argument types, argument names", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "          baos.write(emptyStreams.toByteArray());\n            writeUint64(header, files.size());\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    alphaLevel -= 5;\n                    if (alphaLevel <= 0)\n                    {\n                        inRamp = true;\n                        try {\n                            Thread.sleep(rampDelay);\n                        } catch (InterruptedException e) {\n                            e", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "          _ = Subject.Test(new DownloadClientSettings\n            {\n                MaxDownloads = 1,\n                MaxSeedingTime = 30,\n                MaxRatio = 2.0,\n                MaxIdleTime = 20,\n                DownloadClient", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "          if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n            }\n            if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken,", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "# Sersic component fitting\n# ------------------------\n#\n# The following lines define the bulge component.\n#\n# The first line sets the name of the bulge component.\n# The second line sets the type of the bulge component to be a Sersic profile.\n# The", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    i += ((b & 0x08) >> 3);\n                    i += ((b & 0x04) >> 2);\n                    i += ((b & 0x02) >> 1);\n                    i += ((b & 0x", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "  @property\n    def _course_key(self):\n        \"\"\"\n        Return the CourseKey for the course.\n        \"\"\"\n        if self._course_key is None:\n            self._course_key = CourseKey.from_string(\n                u'edX+{", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tString chanceString = splitNumber[1].replace(\"%\", \"\");\n\t\t\tchance = Float.parseFloat(chanceString);\n\t\t}\n\t\treturn (int) (Math.random() * ", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "# main\ndef main():\n    # Set up the arguments\n    argument_spec = dict(\n        name=dict(required=True),\n        state=dict(choices=[\"present\", \"absent\"]),\n    )\n    module = AnsibleModule(argument_spec=", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "          this.TabControl1.TabPages.Add(this.tabPrivacy);\n            this.TabControl1.TabPages.Add(this.tabProject);\n            this.TabControl1.TabPages.Add(this.tabPreferences);\n            this.TabControl1.TabPages", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "```\n        for plug in self.plugins:\n            try:\n                plug.run()\n                plugruncount += 1\n            except Exception as e:\n                self.ui_log.error(_(\"Plugin %s failed: %s\") % (plug.name,", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class IAbstractSession(IEventElement):\n    \"\"\"\n    Abstract session is a session that can be modified by the user.\n    \"\"\"\n    def __init__(self, sessionId, sessionName, sessionType, sessionStart, sessionEnd, sessionLocation, sessionRoom, sessionColor, sessionDescription", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(new File(file.getAbsolutePath()), messageBrowser, messageWriter, channelId, true);\n            } else {\n                result", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getNumber(\"value\").intValue();\n\t\t       \t\t} else if (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t} else if (", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "      if (currentSession != null && currentSession.isOpened()) {\n            Bundle fields = new Bundle();\n            fields.putString(FIELDS, REQUEST_FIELDS);\n            Request request = new Request(currentSession, \"/me\", fields, null, new", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.chance;\n\t\t}\n\t\tfor (Emotion emotion : emotions) {\n\t\t\temotion.chance /= sum;\n\t\t}\n\t}\n\tprivate void raiseEm", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "#                    'property1': 2, 'property2': 3}\n                    'property1': 2, 'property2': 3}\n            }],\n            self.build_to_xml().split('\\n')[-1].decode('utf-8')\n        )", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "  Long = (x + (e2*sin(phi1Rad)*2 + 4*sin(phi1Rad)*2*cos(phi1Rad)*2 + \n               6*sin(phi1Rad)*4*cos(phi1Rad)*2*cos(phi1Rad", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n    form = ReportUserForm(request.POST)\n    if form.is_valid():\n        report = form.save(commit=False)\n        report.user = request.user\n        report.save()\n        messages.success(request, \"User reported successfully.\")\n        return", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddStepOne(ProjectAddStepOne):\n    \"\"\"A step for the first part of adding a new product series.\"\"\"\n    schema = IProductSeries['name']\n    label = _(\"Series name\")\n    next_url = '++product/series/add/step2'\n", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "              temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "=====================\n    config_post_processors = [\n        ('isa',\n         lambda isa: (\n             [\n                 (tag, TagRegex(include=True, regex=tag))\n                 for tag in isa\n                 if tag in constants.supported_tags\n             ],", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "              return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override Type[] GetCustomAttributeTypes ()\n            {\n                return new Type[0];\n           ", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "# Add your custom PID classes here\n# For example:\n# class OBD_PID_MyCustomPID(OBD_Packet):\n#     fields_desc = [\n#         StrLen1(\"data\", 8),\n#         Int16(\"status\")\n#    ", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.connection = dbus_gobject.GDBusConnection.session()\n\t\tself.connection.add_filter(self.handle_method_call)\n\t\tself.connection.add_filter(self.handle_signal)\n\t\tself.connection.add_", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "          }\n        }\n    }\n}\n\n//This code is for the Mystic's Prism.  It is used to create a Mystic's Prism.\n//The Mystic's Prism is used to create a Mystic's Box.\n//The Mystic", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    self._app._request_ctx = None\n    self._app._session_ctx = None\n    self._app._g = None\n    self._app._jinja_env = None\n    self._app._url_dispatcher = None\n    self._app._view_", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "  response = _pubsub_consumer(session, cluster_id, query_wrapper=query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name == topic_name)\n    return response\n\n# ###################################################################################################################", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "          if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "dx = (angles[:, np.newaxis] * alen)\nelse:\n# Find projection of axis on detector\naxis_proj = np.cross(ray_trafo.geometry.detector_normal,\n                    ray_trafo.geometry.rotation_axis)\n# Find", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\nclass TPB(NZBGetPlugin):\n    name = 'Torrentz.eu'\n    url = 'http://torrentz.eu'\n    enable = True\n    proxy = Proxy()\n    def search(self, searchString, tvshow=False, season=", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (type == FontSize.NotSet) {\n\t\t\t\tif (unit.IsEmpty)\n\t\t\t\t\treturn String.Empty;\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\t}\n\t\t\tif (unit.IsEmpty", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidOperationException(\n\t\t\t\t\t\t\t\"Invalid block size for decryption\");\n\t\t\t\t}\n\t\t\t}\n\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerObj = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerObj.Properties[0].Key, Is.EqualTo(\"The outermost object has a property named 'The outermost object has a property named'\"));\n\t\t\tAssert", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "              for (int w = 0; w < width; w++) {\n                    int v = h * width + w;\n                    for (int h2 = h+1; h2 < height; h2++) {\n                        int v2 = h2 * width + w", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "=====================\n\nisoelastics = isoelastics(ds, lut=\"test-isoelastics-2D-1.txt\",\n                          channel_width=ds.config[\"imaging\"][\"pixel size\"],\n                          flow_rate=ds.config[\"setup\"][\"", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "      final File db1 = new File(\"data/db1\");\n        final File db2 = new File(\"data/db2\");\n\n        final LocalTripleStore store1 = new LocalTripleStore(db1);\n        final LocalTripleStore store2 = new LocalTripleStore", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "if __name__ == '__main__':\n    unittest.main()\n\nThis code is a test script for a Spot Price Alert system. It imports the unittest module and defines a test case class AlertTest. Inside this class, there are several test methods defined to test the functionality of", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallation(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.Dispose();\n\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\twindow.InitializeWindow();\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "  @property\n    def total_cov_mat(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the total *xy* covariance matrix.\n        \"\"\"\n        return np.kron(self.x_cov_mat, self.y_cov", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "      return new CmsLink(m_structureId, m_type, m_structureId, m_type, m_structureId, m_type, m_structureId, m_type, m_structureId, m_type, m_structureId, m_type, m_structure", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁  noCanonicalIDAccount = getEucalyptusAccount();\n                  noCanonicalIDAccount.getAccountId();\n                  owningAccount = noCanonicalIDAccount;\n                  owningAccount.getAccountId();\n                  noCanonicalIDAccount = null", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "          add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public IFolder SelectedFolder\n        {\n            get { return _selectedTreeNode == null ? null : _selectedTreeNode.Folder; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "      ImportVmTemplateParameters parameters = new ImportVmTemplateParameters();\n        parameters.setName(name);\n        parameters.setImportAsNewEntity(isImportAsNewEntity);\n        ImportVmTemplateCommand command = new ImportVmTemplateCommand();\n        List<ConstraintViolationException", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw5.Attach (w6, 1, 2, 0, 1, (Gtk.AttachOptions)0);\n\t\t\tw5.Attach (w7, 2, 3, 0, 1, (Gtk.Att", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "# self.system['TOTALSTATUS'] = self.totalstatus\n# self.system['TOTALSTATUS'] = self.totalstatus\n# self.system['TOTALSTATUS'] = self.totalstatus\n# self.system['TOTALSTATUS'] = self.totalstatus\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic FieldBuilder DefineField(string name, TypeFieldType fieldType, FieldAttributes attributes)\n\t\t{\n\t\t\treturn new FieldBuilder(this, name, fieldType, attributes);\n\t\t}\n", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "    return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n    public override global::Google.Proto", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getIndex(getQuadIndex(i, x))));\n            }\n        }\n    }\n\n    /**\n     * @param quadIndex\n     * @param index\n", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "      if (showDateData.equals(\"false\")) {\n            result.add(CmsDocumentListColumn.DATE_CREATED);\n            result.add(CmsDocumentListColumn.DATE_MODIFIED);\n        }\n        return result;\n    }\n    /**\n     *", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}\n//  The following code is for the InputField component, which is used to create a text input field in the UI.\n//  It is not necessary to", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "      Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    private int GetBestHeight()\n    {\n      return (TOP_MARGIN + imgArrow.Height + GetTextHeight());\n   ", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n               ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "          // Perform validation of the conference data\n            // (using the ValidateConferenceData method)\n            // and display any error messages in the UI.\n            //\n            // Note: The ValidateConferenceData method will automatically\n            //       validate all the fields in the conference data,\n           ", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "              stream.Read (buffer, 0, (int) stream.Length);\n                // Adding file content as byte[]\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __str__(self):\n        \"\"\"String representation of the object\"\"\"\n        return \"PayloadRequirements(packages=%s)\" % (self.packages)\n\n    def __repr__(self):\n        \"\"\"Representation for debugging purposes\"\"\"\n        return self.__str__()\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && (CopyRange || _customRange != null); }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset { _customRange = value; }\n\t\t}", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t}\n\t\tpublic string ConfigurationDirectory {\n\t\t\tget {\n\t\t\t\treturn confDir;\n\t\t\t}\n\t\t}\n\t\tpublic string CacheDirectory {\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "          if (bugAnnotation instanceof SuppressedBugAnnotation) {\n                SuppressedBugAnnotation suppressedAnnotation = (SuppressedBugAnnotation) bugAnnotation;\n                if (suppressedAnnotation.getBugPattern() == null) {\n                    throw new IllegalStateException(\"Suppressed", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "}\nThis code is a base class for food items in Ultima Online. It includes an abstract method called Eat() which is meant to be overridden by derived classes to define the specific effects of eating that food. The base class also includes a constructor for initializing the item's serialization and a", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Q.IsReady())\n                    {\n                        var qMinions =\n                ", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, anchor, 0.0, 0.0, 0.0, 0.0, GridBagConstraints.BOTH, 1.0);\n\t}\n\t/**\n\t * @param x\n\t * @", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "# def parse_xml(self, xml):\n#     tree = xml.etree.ElementTree(xml)\n#     return tree.findall('.//{http://www.dwd.de/meteo/xml/}Wert')\n#     # return tree.findall", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "  self.assertEquals(field_model_def, field_def)\n\n    # Test guessing field name based on model name\n    field_model_def = Field_parser.field_definition_model_based(\n        'title', 'test_model', 'testsuite')\n   ", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new object[]{\"E1\", \"E10\"});\n                // test widening to short\n                SendEventLong(env, \"S0\", 10);\n                var result2 = env.Compile(\"select * from Infostreams#length(1", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        clibrebound(c, ctypes.c_double(other))\n        return", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n\nclass website_view(osv.osv_memory):\n    _name = 'website.view'\n    _", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "          value = createHTMLView(c, text);\n        }\n        if (value != null && oldValue != value) {\n            c.putClientProperty(documentBaseKey, value);\n            c.putClientProperty(BasicHTML.propertyKey, value);\n        }\n        if", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "s = create(filename, content)\nassert s.content_is_testharness\nassert s.manifest_url is None\nassert s.manifest is None\nassert s.manifest_version is None\nassert s.name is None\nassert s.url is None\nassert s", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmNamedSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.AddNamedQuery(namedQueryReference, mapDocToQuery(mapDoc));\n\t\t}\n\n\t\tprivate static HbmQuery mapDocToQuery(", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer );\n\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "      invocationQueue.pop();\n    }\n\n    private boolean contains(CallsiteHolder graph) {\n        for (CallsiteHolder g : graphQueue) {\n            if (g == graph) {\n                return true;\n            }\n        }\n        return false;\n   ", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "# self.pytest_cmd = self.args['pytest'] + \" --appliance {} --sprout-appliances {}\".format(self.appliance, sprout_appliances)\n\nThis code is trying to create a command for running pytest with the specified appl", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "              if (phi) {\n                    ValueStamp stamp = ValueStamp.forNode(value);\n                    ValuePhiNode phiNode = getCachedPhi(stamp);\n                    mergePhis(phiNode, states.get(0).getPhi(stamp));", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "      if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException e) {\n                // Ignore\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#setCameraCap", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonMapGump(from));\n\t\t\t}\n\t\t}\n\t\tpublic override void GetProperties(ObjectPropertyList list)\n\t\t{\n\t\t\tbase.GetProperties(list);\n\t\t\tlist.", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "====================\n\nThe code above defines two classes: `Record` and `RecordMetadata`. The `Record` class is a subclass of `db.Model` and represents a database record. It has some additional properties and methods, such as `creation_date` and `modification_date`, which", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "  def __getitem__(self, key):\n        \"\"\"Return the value for the given key.\"\"\"\n        if key.startswith('%s:' % self.namespace):\n            return self.module.get(key[len(self.namespace):])\n        raise KeyError('Unknown key", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n    def __init__(self, msgid, msgstr, encoding=None):\n        \"\"\"\n        Initialize a new PO entry.\n        **Keyword arguments**:\n          - *msgid*: the message id.\n          - *msgstr*: the message string.\n          - *encoding*: the", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "###############################################################################################################\n#\n# This is the main method that runs the agent\n#\n###############################################################################################################\ndef main():\n  \"\"\"\n  This is the main method that runs the agent\n  \"\"\"\n  gLogger.setLevel( '", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif (action.startsWith(\"/plugins/\")) {\n\t\t\t\tString pluginName = action.substring(7);\n\t\t\t\tif (pluginName.equals(\"formProcessor\")) {\n\t\t\t\t\t// This is a form processor plugin, so we can't", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "      gsp = yield self.setupGerrit(self.master, self.slave)\n        buildResults = yield self.run_fake_single_build(gsp, buildResult, False)\n        result = yield gsp.sendReview(buildResults[0])\n        self.", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "  self.category = atom.Category()\nclass CategoryTest(unittest.TestCase):\n  def setUp(self):\n    self.category = atom.Category()\n  def testTerm(self):\n    self.category.term = 'test'\n    self.assertEqual(self.", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = new HashMap<>();\n            for (Map.Entry<String, AnnotationMirror> e1 : r1.entrySet()) {\n                String key = e1.getKey", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "# Register classes\nbpy.utils.register_class(MyPanel)\nbpy.utils.register_class(MyPanel2)\nbpy.utils.register_class(MyPanel3)\nbpy.utils.register_class(MyPanel4)\nbpy.utils.", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "          if (_engine.Mapper is Mapper16)\n            {\n                mapper16 = (Mapper16)_engine.Mapper;\n                mapper16.LoadState(this);\n            }\n            //MAPPER 17\n            if (_engine.Mapper is", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "          JMenuItem oOpenMenuItem = new JMenuItem(\"Open Document\");\n            oOpenMenuItem.addActionListener(oActionListener);\n            m_jPopupMenu.add(oOpenMenuItem);\n        }\n        private JMenuItem getOpenDocumentMenuItem(){\n            JMenuItem oOpenMenuItem = new", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Blue Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Green Bears]\n\t\tAdd(\"Party Quest\",", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = MeasuredHeight;\n\t\t\tint newHeight = 0;\n\t\t\tfor (int i = 0; i < ChildCount; i++) {\n\t\t\t\tView child = GetChildAt (i);\n\t\t\t\tint childHeight", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "=====================\n\n# Announcement model manager\nclass AnnouncementManager(models.Manager):\n    pass\n\n# Announcement model\nclass Announcement(models.Model):\n    title = models.CharField(_('title'), max_length=255)\n   ", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "#lexers = {'php': PhpLexer()}\n# Enable highlighting for PHP code not between <?php ... ?> by default\nlexers = {'php': PhpLexer(stripall=True)}\n# Enable highlighting for PHP code not between <?php ... ?> by default\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "# This is where I need help.  I need to sum the durations for each group and store the start and end times for each group.\n# I've tried various things but can't get it to work.\n# I've tried using a dictionary and a list but can't get", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "# TODO: implement this function\ndef db_get_projects_with_no_snapshot():\n    \"\"\"\n    This function should return a list of project_ids that have no snapshot in the database.\n    \"\"\"\n    conn = rethinkdb_connection()\n    projects = conn.table('", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tcase \"complicity\":\n\t\t\t\tMsg(\"I'm not involved in any kind of complicity,<br/>I'm just a simple shepherd, you know?\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tMsg(\"", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "responses = {\n    'login': LoginResponse,\n    'logout': LogoutResponse,\n    'anime': AnimeResponse,\n    'anime_list': AnimeListResponse,\n    'anime_list_episodes': AnimeListEpisodesResponse", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n    def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nclass HostData:\n    def __init__(self, uuid, name, status, result):\n        self.uuid = uuid\n        self.", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "              Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n        }\n    }\n}\nThis code is a part of an Android app that resolves short URLs to their long URLs. The code", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "# TODO: Add step for checking that primary metadata doesn't contain any packages\n#       (i.e. it's empty)\n#       (see https://github.com/behave-specs/behave-xml-metadata/issues/11)\n#       (see https", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\nif __name__ == '__main__':\n    install_lib.install()", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < LazyPropertyCount; j++)\n\t\t\t{\n\t\t\t\tif (IsLazyPropertyUnfetched(j))\n\t\t\t\t{\n\t\t\t\t\tobject propValue = disassembledValues[", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "#\n# @brief Add a job to the queue\n# @param job_data A dictionary containing the job data\n# @return True if the job was added to the queue, False otherwise\ndef add_job(job_data):\n    # Add the job to the database\n    db = D", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "          return View(\"Form\", new DelegateEventViewModel());\n        }\n    }\n}\n\n// Add the following using statements at the top of the file\nusing System.Linq;\nusing App.Models;\nusing App.ViewModels;\nusing Microsoft.AspNet.Identity;\n", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        return string.Format(\"{0} - {1} {2} {3}\", item.Name, obj.GetType().Name, obj.Radius, obj.Position);\n                    }\n                    if (obj is MenuKeybind)\n                    {\n                        return string.", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    if premium_url:\n        self.log(\"Using premium link: %s\" % premium_url)\n        self.download(premium_url, self.pyfile, self.premiumHandler)\n        return\n\n    self.log(\"No premium link available\")", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path != null && path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\tCPos GetSearchFromLocation(Actor self)\n\t\t{\n\t\t\t// Determine the location to", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "      return True\n\n    def sync_dhcp_files(self):\n        \"\"\"\n        Copies the dhcp files to the dhcpd directory.\n        \"\"\"\n        dhcp_dir = self.settings.dhcpd_dir\n        dhcp_files =", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "      return Event.newBuilder().setSource(source).setSeqno(seqno.getAndIncrement())\n                .setSeverity(EventSeverity.INFO).setSeqno(seqno.getAndIncrement());\n    }\n}\n\n// The following code sn", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "          for (PpmContext current = context.Suffix; current != null; current = current.Suffix)\n            {\n                if (current.Suffix == upBranch)\n                {\n                    gotoLoopEntry = true;\n                    break;\n                }\n              ", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "              return new DicomAttributeSL(tag);\n                //return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// Sequence Attribute VR\n        /// </summary>\n        public static readonly DicomVr Sq", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[3]);\n\t\t\t//we need to check if this test is used in any session\n\t\t\tbool isUsed = false;\n\t\t\tforeach(Session session in session_l)\n\t\t\t{", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n    def test_delete_bytes_in_middle(self):\n        o = self.file(b'abcdefghijklmnopqrstuvwxyz')\n        delete_bytes = 3\n        self.assertEquals(len(self.read(o)), 2", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n<td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X</td>\n    <", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "# plot_app_vc('results.json', 'app_vc.png')\nif __name__ == '__main__':\n    results = load_json('results.json')\n    cr = load_cr(results)\n    plot_app_vc(cr, 'app_", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "if __name__ == '__main__':\n    unittest.main()", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRoundRect(x + 1, y + 1, controlSize - 2, controlSize - 2, 2, 2);\n\t\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "def simulateKMoreThanOne(self):\n    \"\"\" A test with k=3 \"\"\"\n    failures = \"\"\n    LOGGER.info(\"Testing KNN Classifier with k=3\")\n    patterns = numpy.array([[1.0, 1.0], [1.", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "      mirror.writeElement(value);\n    }\n    @Override\n    public void writeElement(Value value) {\n        final int offset = readOffset();\n        final Address address = MaxLayout.getAddress(this, offset);\n        MaxLayout.writeValue(value, address);\n", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "          if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = File.Exists(Path.Combine(ParentDirectory.FullName, relativePath)) ?\n                Path.Combine(ParentDirectory.FullName, relativePath)", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\ndef url_parse(url):\n    \"\"\"\n    Parses a URL into its components.\n    \"\"\"\n    if py3k:\n        import urllib.parse as urlparse\n        return urlparse(url)\n    else:\n        import urllib\n        return ur", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "    }\n    }\n  }\n}\nThe code above is incomplete.  The missing line of code is:\ni2 += i16;\nThis line of code should be added after the for loop that starts at the comment \"Next line of code:\".  This line of code updates", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"  \" + s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "              });\n            #endregion\n            #region Lux\n            SpellSlot luxQ = SpellManager.GetSpellSlot(\"luxq\");\n            SpellSlot luxW = SpellManager.GetSpellSlot(\"luxw\");\n            SpellSlot luxE = SpellManager.", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getUser()).thenReturn(new EmfUser(\"test.user\", \"test.user@test.com\", \"test.user\", \"test.user\", null, null, null, null, null, null, null, null, null, null, null, null", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "  @mock.patch('os.makedirs')\n    def test_generate_inventory_file_with_mocked_makedirs(self, mock_makedirs):\n        mock_makedirs.side_effect = OSError(\"test error\")\n        context", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (string.IsNullOrEmpty(configDirectory)) {\n\t\t\t\tconfigDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Path.DirectorySeparatorChar + \"ICSharpCode\" + Path.DirectorySeparatorChar;\n\t\t\t}\n\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t// This is a workaround for a bug in the DataSet designer.\n\t\t// The designer does not set the DataSet property on the constraint\n\t\t// when it is created.  This can cause problems when the constraint\n\t\t// is added to a DataTable.  The Data", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n        Dialog.setTabOrder(self.zoom_spinbox, self.font_size_spinbox)\n        Dialog.setTabOrder(self.font_size", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "              return false;\n            }\n            String stationId = wxs.getString( 0 );\n            String stationName = wxs.getString( 1 );\n            String stationType = wxs.getString( 2 );\n            String stationStatus = wxs.getString( 3 );", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring queryString = \"from Continent c where c.name = 'Europe'\";\n\t\t\t\tint queryCount = stats.QueryCount(queryString);\n\t\t\t\tAssert.AreEqual(0, queryCount);\n\t\t\t\ts.CreateQuery(", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "              uiCRCITTSum = (uiCRCITTSum >> 8) ^ crc_it_table[(uiCRCITTSum & 0xFF) ^ uiByteValue];\n            }\n            return (ushort)uiCRCITTSum;\n        }", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn hasModule(ModuleType.SENTRY_AGGRESSIVE) ? 10 : 5;\n\t}\n\t/**\n\t * Returns the BlockPos below the entity that is solid and within a certain range.\n\t *\n\t * @return The BlockPos below the entity", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "          return new IHyperlinkDetector[] {};\n        }\n        IHyperlinkDetector[] detectors = \n                new IHyperlinkDetector[] {\n                        new CeylonHyperlinkDetector(editor),\n                        new CeylonJavaBackendHy", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "# Create the Object3DAspect widget\nself.object3DAspect = Object3DAspect(self)\n# Create the Object3DScale widget\nself.object3DScale = Object3DScale(self)\n# Create the Object3DPrivateInterface widget\nself.object", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // X\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D(info.X, m_Y);\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁     for (Object valueChoice : valueChoices)\n                     {\n                        String label = selectConverter.convert(valueChoice);\n                        if (label.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tfor (int k=0; k<maxChanges; k++)\n\t\t\t\tsb.append(\"\"+k+\"\\t\"+fractionWithChange[i][j][k]+\"\\n\");\n\t\treturn sb.toString();\n\t}\n}", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the order and line that caused the problem\n                                int orderIndex = unpricedLine.Key;\n                                int line", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\tpublic string ReplyAction {\n\t\t\tget { return reply_action; }\n\t\t}\n\t\tpublic string Name {\n\t\t\tget { return name; }\n\t\t}\n", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "      final SimpleACL acl = new SimpleACL(ownerId, ownerGroupId, mode);\n        final int testUserId = ownerId + 1;\n        expect(acl.getUserPermission(testUserId)).andReturn(Permission.NONE);\n        replay(acl);\n       ", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X / viewport.Width, v.Y / viewport.Height);\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn new Vector3 (", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats_t(XDRBase):\n    packets = XDRInt()\n    bytes = XDRInt()\n\nWhat should be the next line of code?\n\nThe next line of code should define a new class named 'endpoint_stats_t' that inherits from the '", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    Console.WriteLine(\"Client disconnected: \" + i);\n\t\t\t\t    RemoveAt(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Get a client socket from the list\n\t\tSocket GetClientSocket", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "          if(type == Portal.RequestType.Step) {\n                log(\"Google: Steps received\");\n                List<StepBucket> stepList = new ArrayList<>();\n                for(Bucket bucket : list) {\n                    stepList.add(new StepBucket(bucket.get", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "# Generate the single argument callback\n  GenerateSingleArgumentCallback(bind_count, exec_count, 'Single')\n\n# Generate the callback for multiple arguments\ndef GenerateMultiArgumentCallback(bind_count, exec_count, prefix):\n  \"\"\"\n  Generate the callback for multiple arguments.\n", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\"\"\"\nresponse = HttpResponse(content=json.dumps(items, default=range_item_dict), content_type='application/json')\nreturn response", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "              new VarNode(\"score\"), null/* c */,\n                Scope.DEFAULT));\n                where.addChild(new ServiceNode(\n                        new ConstantNode(\n                                TermId.create(\n                                        TermFactory.getRDFS_SEARCH(),\n", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n    def dispatch(self, request, *args, **kwargs):\n        self.object = None\n        try:\n            self.object = self.get_object(queryset=User.objects.all())\n        except User.DoesNotExist:\n            messages.error(request", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "    get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public Version ResolvedAssemblyVersion {\n      get { return this.ResolvedAssembly.Version; }", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "          // tfqmr_iter(A, b, x, &r, &z, &p, &m, &k, &e, &itn, &err, &tol, &maxit, &precond, &monitor);\n            // The following is a rough translation of the", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] { sortedNumbers[left] };\n\t\t} else {\n\t\t\treturn new Apfloat[] { sortedNumbers[left], sortedNumbers[right] };\n\t\t}\n\t}\n}\n\nThis code is a Java implementation of various", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "          if reference_set[v] != -1:\n                A[i, reference_set[v]] += 1\n                sample_count[reference_set[v]] += 1\n                if reference_set[v] == focal_node:\n                    L", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "  self.assertTrue(json.loads(mapping_json) == csv_mapping.to_dict())\n\nif __name__ == '__main__':\n    connector = \"twitter\"\n    ocean_index = \"ocean_\" + connector\n    enrich_index =", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots && slot.Value.LockTeam == null)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(new AddBotTo", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" : \" + _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "# TODO: Implement DataFrame class\nclass DataFrame:\n    def __init__(self, stream_id, flags, payload):\n        self.stream_id = stream_id\n        self.flags = flags\n        self.payload = payload\n        self.header_length = 1 +", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "#endif\n            // Check that all nodes in the cluster are inside the cluster boundary\n            foreach (var node in cluster.Nodes) {\n                if (node.Cluster != cluster)\n                    throw new Exception(\"Node \" + node + \" is not in cluster \" + cluster);\n               ", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos (m_maxSlopeRadians);\n}\nvoid btKinematicCharacterController::setUseControllerMotion(bool useControllerMotion)\n{\n\tm_useControllerMotion = useControllerMotion;\n}\nvoid", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "      for (ExpressionTree initializer : initializers) {\n            if (initializer instanceof Leaf) {\n                Leaf leaf = (Leaf) initializer;\n                if (leaf.getKind() == TREE_LITERAL) {\n                    Object value = leaf.", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tN", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t\t_returnType = _context.GetType(typeAttribute.Value);\n\t\t\t}\n\t\t}\n\t\t//--------------------------------------------------------------------------------------------------\n\t\tprivate void CreateMethodComment()\n\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.Size = new Size (100, 50);\n\t\t\t\tmyTrackBar.Orientation = Orientation.Horizontal;\n\t\t\t\tmyTrackBar", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\n\t\t\twhen(classType.getAnnotationTypes()).thenReturn(Collections.singletonList(annotationType));\n\t\t\tdoReturn(classType).when(lookup).findType(classType.getName(), Type", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.postDominatedBy(other))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Checks if this abstraction is post-dominated by the given one.\n\t * @param other\n\t * @", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "          int min2 = wideLExtent[r.rightChild][r.leftChild];\n            int min = Math.min(min1, min2);\n            int max1 = wideRExtent[r.leftChild][r.parent];\n            int max2 = narrowL;", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "              'rsync',\n                '--archive',\n                '--compress',\n                '--delete',\n                '--exclude={\"pg_hba.conf\", \"pg_stat.conf\", \"pg_clog/*\", \"pg_xlog/*\", \"", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.Get", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "writer.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.attribute( null, \"a\", String.valueOf( 1.0 ) );\n\t\twriter.endTag( null, name );\n\t}\n}", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null ) {\n\t\t\t return false;\n\t\t}\n\t\tif ( !( aThat instanceof Contact ) ) {\n\t\t\t return false;\n\t\t}\n\t\tfinal Contact that = (Contact)aThat;\n\t\treturn this.", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "  if n == n_steps:\n      print('Total number of rejected timesteps: %s' % total_rejec\n      sys.exit()\n\nThe code above is a simulation of a multi-particle system using the Lubachevsky-Stillinger model. The simulation", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "      if len(cdata) > 0:\n            # If the slice indices are constant, check if they are equivalent\n            # to the full range of indices.\n            if all(isinstance(x, (list, tuple)) and len(x) == len(node.inputs) and", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "=====================\n\ndef save_community_form(form, community, user):\n    \"\"\"\n    Saves the form data to the Community model instance.\n    \"\"\"\n    community.name = form.cleaned_data['name']\n    community.description = form.cleaned_", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "```python\nreturn query\n```\nThis code is used to wrap the listener function and return the Query object after it has been modified. The `retval` parameter is set to `False` by default, but can be set to `True` to prevent the Query object from being modified. The `wrap", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "# Register the ConditionalModuleDescriptor with the XBlockStore\n# This is necessary to make the ConditionalModuleDescriptor available\n# to the XBlockFactory when it is instantiating XBlocks.\n# The XBlockStore is a singleton, so this registration will be\n# global to the entire platform", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "=====================\n\ndef __call__(self, data, bg_value, filter=None, key=None):\n\"\"\"\nApply the adapter to the data and return the filtered data and the corresponding background value.\n\"\"\"\nif filter is None:\nfilter = self.filter\nif key is None", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && (Method == null && Field == null))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (Method != null && (Class == null || Sig != null))\n\t\t\t{\n\t\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 21;\n\t\t\tthis.objYLabel.Text = \"Var Y:\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "      c = self.getNoPrefix(self.getTestFile(\"mail/test-syncmail-tag.txt\"))\n        self.assertEqual(c.branch, \"tags/1.0\")\n        self.assertEqual(set(c.files), set([\"build/scripts/buildbot", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "      if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n\n        for (Map.Entry<String, String> field : csvData.entrySet())", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveGenerating()) {\n\t\t\treturn false;\n\t\t}\n\t\t// Add code here to handle the wanding event.\n\t\t// For example, you could add mana cost, generate mana, or do other things.\n\t\t// If", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "          intrinsicCohesion += this.getRepresentativity(component);\n        }\n        this.memorizeCohesion(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n\n    private void memorizeCohesion(Community c", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "if __name__ == '__main__':\n    print(__doc__)\n    print(\"Upgrade script version: %s\" % __version__)\n    print(\"Running upgrade script...\")\n    print(\"\")\n    print(\"Upgrade script started at: %s\" % datetime.datetime.", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.disconnect();\n\t\t\tcomputerMgmt = null;\n\t\t\tcomputerMgmt = new ComputerManagement();\n\t\t\tcomputerMgmt.connect();\n\t\t\tcomputerMgmt.setConsole(this", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "  for (java.util.Date exceptionDate : exceptionDates) {\n      exDateList.add(new Date(exceptionDate));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * @param event\n   * @return the occurren", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.Bind( DataSource, SourceEventName );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAndDont", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "          ObjectMapper mapper = new ObjectMapper();\n            SpanConfig spanConfig = mapper.readValue(json, SpanConfig.class);\n            ISwitchManager switchManager = (ISwitchManager) ServiceManager.getService(ISwitchManager.class);\n            switchManager.add", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\t// Add images here\n\t\t\t// For example:\n\t\t\t// new ImageHelper(1, \"/ims/images", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "      return rnd.nextInt(size);\n    }\n}", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "  la = LinkAnnotation()\n    la.project = project\n    la.label = label\n    la.uri = uri\n    la.save()\n\nThis code is part of a Django project for managing scientific data. It defines a method for creating a new LinkAnnotation object and saving it to", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "          buffer.Append(\"          .shrinktofit= \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergedcell= \")\n                .Append(StringUtil.ToHexString(", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains half-width katakana.\n\t\t\t\tbytes [posn++] = (byte) (ch - 0x30;\n\t\t\t} else if (ch >= 0xFFE0 && ch <= 0xFFFC) {\n\t", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n@ispec(\"ld\", \"D[1]\", \"D[1]\", \"D[1]\")\ndef ld_D_D_D(src, dst, src2, dst2):\n    src = env.D[src]\n    dst = env.D[dst]", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties properties = new Properties();\n\t\t\tstream = location.openStream();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap map = new JRPropertiesMap();\n\t\t\tmap.setProperties(properties);\n\t\t\treturn map;", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "          return this == CREATIVE;\n        }\n\n        /**\n         * Returns the game type by ID\n         */\n        public static WorldSettings.GameType getByID(int id)\n        {\n            for (WorldSettings.GameType gameType : values())\n            {", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.PurgeDefault();\n\t\t\tAssert.IsFalse (csd.IsDefaultSecurityDescriptor ());\n\t\t\tAssert.IsFalse (csd.IsSystemSecurityDescriptor ());\n\t\t\tAssert.IsFalse (csd.IsSecurityDescriptorSdl", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "# results = gateway.lookup(fingerprints)\n# print(results)\n# for result in results:\n#     print(result)\n#     self.queue.put(LookupResult(result, releases))\n#     if len(self.queue) >= self.max_queue", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "      // --------------------------------------------------------------------\n        // Add your custom RPCs here.\n        // --------------------------------------------------------------------\n        // The following RPCs are added by default:\n        // --------------------------------------------------------------------\n        // RPCs for the following components:\n        //", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "      return rootView;\n    }\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n        if (getArguments() != null) {\n            messageStarred = getArguments", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "      # Transform the wave function to the k-point in the BZ\n        # using the symmetry operation op_cc.\n        # Note that the symmetry operation op_cc is given in the\n        # reciprocal lattice vectors.\n        # The transformation is done using the following formula:\n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "      CreateUtkastRequest request = new CreateUtkastRequest();\n        request.setPatient(new Patient());\n        request.setPatient().setPersonnummer(PATERNUMMER);\n        request.setPatient().setFornamn(\"Test\");\n", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body) {\n\t\t\t\t\tif(child is ILLabel) {\n\t\t\t\t\t\tILLabel label = child as ILLabel;\n\t\t\t\t\t\tILBasicBlock childAsBB = label.Parent as IL", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    //if we're not a ragdoll then we'll need to set all of our parts to be ragdolls\n\t    if (!IsRagdoll) {\n\t", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class FractureLayer(GeoLayer):\n\nThis is a subclass of GeoLayer for fracture layers.  It should have the same attributes as GeoLayer but with the layer type set to 1 (fracture).  The fix_region_id() method should be overrid", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "      out[outOff++] = (byte) ((num >>> 24) & 0xff);\n        out[outOff++] = (byte) ((num >>> 16) & 0xff);\n        out[outOff++] = (byte) ((num >>> 8) & ", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "          super( source );\n            this.objectVariables = objectVariables;\n        }\n\n        private Map<String, PatternNode> objectVariables;\n\n        @Override\n        protected Predicate<PatternMatch> getPredicate()\n        {\n            return new Predicate<PatternMatch>()\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "def transform_values(values, format = None):\n    \"\"\"\n    Transform a list of values into a list of dictionaries.\n    \"\"\"\n    return [\n        {\n            'value': value,\n            'format': format,\n            }\n        for value in values\n", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "          frame.setSelected(true);\n            frame.toFront();\n          }\n        }\n      });\n      btn.addMouseListener(new MouseAdapter() {\n        public void mousePressed(MouseEvent e) {\n          if (SwingUtilities.isLeftMouseButton(e", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "# This is a placeholder for the code that will be executed when the client\n# requests a random LC file.  You will need to write this code.\n# The function should return a tuple containing the filename, redshift, and data\n# from the random LC file.\ndef getRandomLC", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "  for (int z = 0; z < p.getRasterDepth(); z++)\n    {\n      for (int y = 0; y < p.getRasterHeight(); y++)\n      {\n        for (int x = 0; x < p.getRaster", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    ContentValues values = new ContentValues();\n                    values.put(DbHelper.TableExpenses._ID, newId);\n                    values.put(DbHelper.TableExpenses.ID_GROUP, newId);\n                    db.update(DbHelper.TableExpenses.", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "              m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n        #endregion\n        public IntPtr Ptr\n        {\n            get", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tplayer.TechInfo.GiveMoney(queue[0].Cost);\n\t\t\t\tqueue.RemoveAt(0);\n\t\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    infoText += \" file\" if numberOfFiles==1 else \" files\"\n    infoText += \"<br>\"\n\n    if numberOfHiddenFiles>0:\n        infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \"\n        infoText += \"file\"", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "      code = code.replace('%', '%%')\n        # replace all variables by their value\n        for var in self.env.vars:\n            code = code.replace('@%s@' % var, self.env.get(var, ''))\n        # write the result", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "if __name__ == '__main__':\n    rospy.init_node('planning_server')\n    try:\n        PlanningServer = PlanningServer()\n        rospy.spin()\n    except rospy.ROSInterruptException:\n        pass\n    Planning", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] - FROMFLOAT( 2 ) / FROMFLOAT( 3 ) * ( chemical[ 0 ][ idx + reactorExtent - 1 ] + chemical[ 0 ][ idx +", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "              if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(utf8(pattern), timestampFormatFactory.get(pattern), timestampLocale", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tif (qs.Execute().ReturnValue < 0)\n\t\t\t\treturn false;\n\t\t\tentity.cti_id = Convert.ToInt32(qs.GetParamValue(\"@cti_id\"));\n\t\t\treturn true;\n\t\t}", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic int PropertyCount\n\t\t{\n\t\t\tget { return 2; }\n\t\t}\n\t\tpublic Type ReturnedType\n\t\t{\n\t\t\tget { return typeof(MyComposite", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "# Set the proposed state\nself.proposed = {\n    'ntp_auth_key': {\n        'key_id': self.key_id,\n        'algorithm': 'md5',\n        'key': self.password,\n        'trust': 'yes' if", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "          component.update_edit_info(editing_user=editing_user, subtree_id=component.id)\n            component.update_edit_info(editing_user=editing_user, subtree_id=component.id, recursive=True)\n           ", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "      digest.update((byte) (TEXT_CODE & 0xff));\n        update(ch, start, length);\n    }\n\n    public void startElement(String uri, String localName, String qName, Attributes atts)\n            throws SAXException {\n        digest.", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "#def mkrange(data):\n#    return aetypes.Range(unpack(data))\n#\n#def mkcomparison(data):\n#    return aetypes.Comparison(unpack(data))\n#\n#def mkinsertionloc(data):\n#    return", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "          Type type = api.ActionDescriptor.GetParameters().FirstOrDefault()?.ParameterType;\n            if (type == null)\n            {\n                type = api.ReturnType;\n            }\n            if (type == typeof(HttpActionContext))\n            {\n                type =", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "      elif isinstance(column, gtk.TreeViewColumn):\n            self.on_column_button_press_event(column, event)\n            return True\n\n        return False\n\n    def on_column_button_press_event(self, column, event):\n        \"\"\"\n", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "          beanProperties.addPropertyValue(\"locations\", newLocationList);\n        }\n        // Return the bean's property values, which now includes the global-properties locations\n        return beanProperties;\n    }\n    // The order of this bean definition is important, as it must be processed before", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "          lines = f.readlines()\n        finally:\n            f.close()\n    if f:\n        # Remove blank lines from file\n        lines = [line for line in lines if line.strip()]\n    if module.params['password']:\n        password = module.params['", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "      [In, MarshalAs(typeof(IMFMediaEventGenerator))]\n        IntPtr pEventGenerator,\n        [In, MarshalAs(typeof(IMFMediaEventQueue))]\n        IntPtr pQueue\n        );\n    }\n    #region IMFMediaEventQueueAlt\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "      authorizations.addPrincipalToPrincipal(\n                directedAclKeys.getPrincipalId(),\n                directedAclKeys.getPrincipalType(),\n                directedAclKeys.getSecurablePrincipalId(),\n                directedAclKeys.getSecurablePr", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "      for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag name of the element.\"\"\"\n        expected_tag = self.expected_tag(element)\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "=====================\n\ndef _cloneNode(node, newDoc):\n    if node.nodeType == Node.ELEMENT_NODE:\n        clone = newDoc.createElementNS(node.namespaceURI, node.nodeName)\n        for attr in node.attributes:\n            clone.setAttribute", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) target, diagnostics, context);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\n\t/**\n\t* Validates validation EMSS", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvType.KeyName) && decoder.readType(TlvType.KeyName) == TlvType.KeyName) {\n\t\t\t\tkeyLocator.setKeyName(decoder.readBlob(TlvType", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "      for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //Updates the camera\n        camera.x = myPlayer.getX();\n        camera.y", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "      action.setColor( color );\n        GameEngine.model().getGame().addRegistration( action );\n        hide();\n      }\n    } );\n    hide();\n  }\n}", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "# Get the filename from the Content-Disposition header\nfilename = get_filename_from_headers(r.headers)\n# Create a temporary file to save the downloaded data\nwith open(filename, \"wb\") as f:\n    # Write the downloaded data to the file\n    for", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = response.FailureReason;\n\t\t\t}\n\t\t\tcatch (Exception ex)", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "def production_rate(model: cobra.Model, reaction: cobra.Reaction, time: float) -> float:\n    \"\"\"Calculate the production rate of a reaction at a given time point.\n    Parameters\n    ----------\n    model : cobra.Model\n        The model to be", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "class Unit(CachedTreeItem, models.Model):\n    \"\"\"A unit is a single translation of a source message.\n    \"\"\"\n    #: The source message that this unit is a translation of.\n    source = models.ForeignKey(Source, on_delete=models.CASCA", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n        'created', models.DateTimeField(auto_now_add=True)),\n        ('updated', models.DateTimeField(auto_now=True)),\n    ],\n    options={\n        'db_table': 'state',\n    },\n),\n\n    migrations.CreateModel(", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "# Add a controller to the switch\nself.controller = pox.ofp.controller.Controller(dpid=self.dpid, event_loop=self.event_loop, name='controller-{}'.format(self.dpid))\n# Add the switch to the controller\nself.", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "  if (m_RecentItems.size() >= m_MaxRecentItems) {\n      m_RecentItems.remove(m_RecentItems.size() - 1);\n    }\n    m_RecentItems.add(item);\n    if (m_Ignore", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "          if (src.FightMode == FightMode.Aggressor || src.FightMode == FightMode.PassiveAggressor)\n                return true;\n            return false;\n        }\n    }\nI'm not sure what the next line of code should be", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "      if (halfTradePeriodDate == null && takeOfferDate != null) {\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod() / 2);\n        }\n        return half", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\n\tpublic static void ComputeFollow(Node p) {\n\t\tif (p == null) return;\n\t\tif (p.", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\treturn mReadBuff;\n\t\t}\n\t\tprivate byte[] mReadBuff = new byte[1];\n\t\tprivate void WriteReport(byte[] buff)\n\t\t{\n\t\t\t// TODO: Complete member initialization\n\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(order);\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tMskJointVo joint1 = (MskJointVo) o", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch ( Exception ex )\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"Error: {0}\", ex.Message );\n\t\t\t}\n\t\t}\n\t}\n}\n\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Eq(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List<Item>();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "          for (int j = N1 + N2 + 1; j < N_INDEXES; j++)\n            {\n                _indx2Units[j] = (j - N1 - N2) / 3;\n            }\n        }\n    }\n}\n", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "# navigate to the Rates tab and create a new Compute Rate\nnavigate_to(RatesTab)\nnew_rate = ComputeRate(description='TestComputeRate', currency='USD')\nnew_rate.create()\n# add fields to the new rate\nnew_rate.", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Unlock();\n\t\t\t\t// TODO: Implement this method\n\t\t\t\t//shadowBuffer.WriteData( offset, length, src );\n\t\t\t\t//shadowBuffer.Lock();", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\tdef open(self):\n\t\tself.createSatList()\n\t\tself.createSatFinderList()\n\t\tself.createScanList()\n\t\tself.createTunerList()\n\t\tself.createNimList()\n\t\tself.createN", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "          else if (filterStr.isEmpty()) {\n                throw new IllegalArgumentException(\"empty filter string\");\n            }\n            else {\n                String[] filters = filterStr.split(\";\");\n                for (String filter : filters) {\n                    String[] parts = filter.split", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "              // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the decoded row to the previous row buffer\n                Array.Copy(curr, 0, prior, 0, bytesPerRow);", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "      s = lowlevel.SignalMessage(interface='org.freedesktop.DBus',\n                                   member='NameOwnerChanged')\n        self.assertEqual(s.interface, 'org.freedesktop.DBus')\n        self.assertEqual(s.member, 'Name", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    except:\n        print \"Error in p_operator\"\n        logging.exception(\"Error in p_operator\")\n        continue\n\nI'm trying to understand the code above, and I'm having trouble with the following:\n\n1. What is the purpose of the 'try'", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "          AssertParseError(\n                \"1:1: Message \\\"TestMessage\\\" has no field named \\\"nosuchfield\\\".\",\n                \"TestMessage { nosuchfield: 123 }\");\n        }\n    }\n}\n//#endregion", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal int size = m.size();\n\t\t\tfor ( int i = 0; i", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Account ).Username );\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"Error in AuctionLog.cs : {0}\", ex.Message );\n\t\t\t}\n", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\nclass HrEmployee(models.Model):\n    _inherit = 'hr.employee'\n\n    def attendance_action_change(self):\n        \"\"\"\n        This method is used to change the attendance of the employee.\n        \"\"\"\n        self.ensure_you_are_", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults().getRows().get(0);\n\t\tif (parentRow == null)\n\t\t{\n\t\t\tparentRow = form.grdResults().getRows().add(new grdResultsRow());\n\t\t\t", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "              pt = (POINT)c.Read(0, Marshal.SizeOf(typeof(POINT)));\n                return new Point(pt.X, pt.Y);\n            }\n        }\n        /// <summary>\n        /// Sets the position of the item.\n        /// </summary", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "      new_terminal = maker.new_terminal(self, cwd, profile, debugtab)\n        self.add_tab(new_terminal)\n        self.show_all()\n        self.set_focus(new_terminal)\n        self.last_active", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    toReturn.Add(new StructInfo(name, managedType, marshalType, arraySize));\n                }\n            }\n            return toReturn;\n        }\n    }\n    public class StructInfo\n    {\n        public StructInfo(string name, Type managedType,", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn attributes.HasFlag (TypeAttributes.Sealed) && base_type != null && base_type.IsValueType;\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsByRef {\n\t\t\tget { return attributes.HasFlag (TypeAttributes", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "              throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}\n//This is the code that needs to be completed.\n//The code is for a simple rule engine.\n//The engine uses a dictionary to store", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n    self.context = OpenSSL.SSL.Context(\n        _openssl_version=self._openssl_version,\n        verify_mode=self._verify_mode,\n        certfile=self._certfile,\n        keyfile=self._keyfile,\n        cafile", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.checkbutton1 = new Gtk.CheckButton (null, null);\n\t\t\tthis.checkbutton1.UseUnderline = true;\n\t\t\tthis.checkbutton1.Name = \"checkbutton1\";\n\t\t\tthis.checkbutton1.Can", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "# ______________________________________________________________________________\n\n# This is the main function that creates a new game widget and adds it to the\n# notebook.\ndef newGame (gamemodel):\n    \"\"\" Creates a new game widget and adds it to the notebook \"\"\"\n    gmwidg", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "  \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-next\": QKeySequence(Qt.CTRL + Qt.Key_PageDown),\n    \"Move-Tab-to-previous", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [name=\" + this.persistenceUnitName + \", classLoader=\" + this.classLoader +\n\t\t\t\t\", persistenceProviderClass=\" + this.persistenceProviderClass + \", mappingFile=\" +\n\t\t\t\tthis.mappingFile + \", properties=\"", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "  IEditorInput editorInput = getEditorInput();\n    if (editorInput instanceof IFileEditorInput)\n    {\n      IFile file = ((IFileEditorInput)editorInput).getFile();\n      return file.isReadOnly();\n    }\n    return false;\n  }\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(612, 12);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(10", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "      return sb == null ? string : sb.toString();\n    }\n}\n\nThis code is a part of a JSP tag library. It provides a method to encode a string for use in HTML. The encode method is used to replace special characters with their HTML entities. The code also provides a method", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-Test-TC1\", hmac, data, digest);\n\t\t}\n\t\tprivate void Check (string name, HMAC hmac, byte[] data, byte[] expected)\n\t\t{\n\t\t\tbyte[] result = h", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch (m_d) {\n\t        case option_1:\n\t            current_sum += 4;\n\t            break;\n\t        case option_2:\n\t            current_sum += 4;\n\t            break;\n\t        case option_3:\n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "      return null;\n      String javaPath = java.GetValue(\"JavaHome\").ToString();\n      if (javaPath == null)\n        return null;\n      return javaPath;\n    }\n    private static String GetJavaHome()\n    {\n      String javaHome = Environment.Get", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "  comment = l\n\n    if job is not None and l.split()[0] == job:\n        return [comment, l]\n\n    # attempt to find job by name\n    if job is not None:\n        for l in self.lines:\n            if re.match(", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# Register all modifiers\nanswers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "          double[] likelihoods = new double[totalBuckets];\n            for (int i = 0; i < totalBuckets; ++i)\n            {\n                double rankCount = rankCounts[i];\n                double rankBucket = rankCounts.length > i", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "      for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getNeighbor());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\nif __name__ == \"__main__\":\n    p = Packet()\n    p.sniff(prn=lambda x: print(x.summary()), filter=\"tcp port 80\")\n    # Add your code here\n\n# This is the code to inspect packets\ndef parser", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "          this.rptComboBox.SelectedIndex = 0;\n            //\n            // rptComboBox\n            //\n            this.rptComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;\n            this.rptComboBox.Form", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "          'Meta': {'object_name': 'Scan'},\n            'id': ('models.AutoField', [], {'primary_key': 'True'}),\n            'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),\n           ", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "              // If the type is not defined in the schema, and we are not processing anonymous complex types,\n                // then we will generate an anonymous complex type for it.\n                if (!isProcessAnonymousTypes()) {\n                    throw new SDOHelperException(\"Type \" + sdo", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "      self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_validate_notificate(self, cr, uid, ids, context=None):\n", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "          set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets the currently selected row\n        /// </summary>\n        /// <returns>The currently selected row</returns>\n        IBORow IBOColSelector.CurrentRow\n        {\n            get", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "          return String.Format(\"{0} ({1}): {2} ({3}): {4}\",\n                this.Name,\n                this.TargetId,\n                this.TypeDescription,\n                this.Channels,\n                this.IsMute ? \"", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = valueObject.getCareContext().getDomainObject();\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\tdomainObject.setID(valueObject.getID());\n\t\tdomainObject.setVersion(valueObject.", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "          [\"cargo\", \"run\", \"--\", \"--features\", \"android\", \"--manifest-path\", self.manifest_path],\n            cwd=self.build_dir,\n            env=env,\n            stdout=sys.stdout,\n            stderr=sys.stderr,", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0, estP, estN }, true), this.getScore(new double[] { n, 0, estN, estP }, false));", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "              Stashed.SetStashDiffs(gitStash.Name, gitStash.Message, gitStash.Commit, gitStash.Commit.Tree, gitStash.Commit.Tree.Items);\n            }\n            Loading.Invoke(() => Loading.Visible = false", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "# Perform the simulation\nstatus = job.run()\nassert status.status == st.CudaStatus.ST_CUDA_SUCCESS.value\n# Get the beam elements from the output buffer\nbm_data = lattice.cbuffer.get_object(bm0_index).data\n#", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "      if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return this.match(that) > 0;\n        }\n        return false;\n    }\n    /**\n     * @return a hash code value for this object.\n    ", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(\"AddInt\", asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += PanelDatenArtikel.C_TAB;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EClass", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "# Load the index\narchive_index = load_archive_index(args.index_file)\nif archive_index is None:\n    log.msg('No index file found at: {}'.format(args.index_file))\n    sys.exit(1)\n# Perform the", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "      self.samplenum += 1\n        self.bit_data = miso\n        self.bit_ss = ss\n        self.bit_es = es\n        self.mosi = mosi\n        self.miso = miso\n        self.mosi_bits =", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "        cursor = limit - v_3;\n          if (cursor < limit) {\n            break lab0;\n          }\n          if (cursor > limit) {\n            limit = cursor;\n          }\n          if (cursor > limit_back) {\n            limit_back = cursor;", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "              o = cls.newInstance();\n                if (o instanceof LCMDataReader) {\n                    LCMDataReader ldr = (LCMDataReader) o;\n                    ldr.decode(dins);\n                    if (cd != null) {\n                       ", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "  def _get_key_usage(self):\n        \"\"\"\n        Get the key usage extension, if present.\n        \"\"\"\n        extension = self.cert.get_extension(X509_EXTENSION_KEY_USAGE)\n        if extension:\n            return [\n", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (i != s.end());\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\t(*i).second();\n\t\t\t}\n\t\t}\n\"\"\", file=f)\n    print(\"}\",", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "# The following line of code is missing. It should be:\n# transition = (Begin, X[0], 1)\n# This is the transition from the start state to the first intermediate state.\n# The first intermediate state is the state that is reached when the first\n# surrogate of", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\t// tabulated semantics\n\t\t\tif (la.kind == 1) {\n\t\t\t\tGet();\n\t\t\t\tif (la.kind == 1) {\n\t\t\t\t\tGet();\n\t\t\t\t\tif (la.kind", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n#\n#     This is a custom module for OpenERP 6.1\n#\n#     @author: Your Name <", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_ALIAS+\"/rest/ssl/*\");\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.ssl._tcp", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "              permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n\n    @Test\n    public void testGetPermissions()\n        throws Exception\n    {\n", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "# Here you can add your test cases for the Enumerator class.\n# For example:\n#\n# def test_match_subsystem_input(self, context):\n#     devices = context.list_devices().match_subsystem('input')\n#     assert len(devices)", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "# Create a device object\ndevice = Device(deviceToken)\n# Login to the game\nuser = device.newUser(loginId, password)\n# Check inspection status\nprint(user.check_inspection_status())\n# Check if user is logged in\nprint(user.is_", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "# This is the main part of the code.  It reads the dataset, and then processes it.\n# It does this by reading the calibration file, and then reading the data file.\n# It then processes the data file, and writes the results to a file.\n# The processing involves fitting a", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "          if (m_Keys.Count > 0)\n                ItemID = 0x101F;\n            else\n                ItemID = 0x101E;\n        }\n        private class InternalTarget : Target\n        {\n            private KeyRing m", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "      for (String device : devices) {\n            try {\n                Tuner tuner = new Tuner(device, liveModelMap.get(device), ipAddressMap.get(device), false);\n                tuner.setLive(true);\n                tuner.setDisabled", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "  if (lastSeenVersion < Version.DAY_NOTIFICATIONS) {\n      jobs.put(Version.DAY_NOTIFICATIONS, new DayNotificationsMigrationJob());\n    }\n    if (lastSeenVersion < Version.USER_NOTIFICATIONS) {\n     ", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "    List<Pattern> regex = new ArrayList<>();\n      for (String s: split[0].split(\"\\\\s+\")) {\n        regex.add(Pattern.compile(s, ignoreCase(ignoreCase(ignoreCase(ignoreCase(ignoreCase(ignoreCase(ignoreCase(ignoreCase(", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "      for p in path:\n            if os.path.exists(os.path.join(p, n)):\n                return SCons.Node(os.path.join(p, n))\n            # try to find it in the sub-path\n            for subp in sub_", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "#\n# Mapnik Python bindings\n#\n# This file is part of Mapnik, an Open Source vector tile and raster map rendering engine.\n#\n# Mapnik is distributed under the BSD-style license found in the file 'LICENSE'.\n# You may obtain a copy of the license at", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "# Get the current state\ncurrent = client.tm.ldns.monitors.get(name=monitor_name)\n# Compare the current state to the desired state\nif current != desired:\n    # Create the monitor\n    if not desired.changed():\n        module.exit_json", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "=====================\nclass MethodAddView(navigate_to, MethodAddBaseView):\n    @step(u'I navigate to the Methods tab')\n    def navigate_to_methods_tab(self):\n        self.browser.click_link(text='Methods')\n        self", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "          throw new Exception(\"Action class not found: \" + className);\n        }\n        return result;\n    }\n}\n\n// This is the interface for the Action class\npublic interface IAction {\n    public void execute();\n}\n\n// This is the interface for the Action Factory\n", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "=====================\n\nclass TestCommentThreadViews(TestCase):\n    \"\"\"Tests for comment thread views.\"\"\"\n\n    def setUp(self):\n        super(TestCommentThreadViews, self).setUp()\n        self.client = Client()\n        self.course_key = reverse(\"course", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "#        if not msvc_exists(env, 'link'):\n#            raise SCons.Errors.BuildError(\"MSVC link.exe is required to embed a manifest in a DLL\")\n#        if not msvc_exists(env, 'manifesttool.exe", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "          IStructuredSelection selection = (IStructuredSelection) getStructuredSelection();\n            if (selection == null || selection.isEmpty()) {\n                return;\n            }\n            final Object[] selectedResources = selection.toArray();\n            final IProgressMonitor monitor = new Progress", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t// Allocate output fields\n\t\t//\n\t\t// We need to allocate output fields, but we don't know how many we need yet.\n\t\t// We'll just allocate one for now, and add more as we go along.\n\t\t//\n\t\t// We", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "```python\nassert last_rounded_fwd == d(2014,1,31, 22,15,59)\n```\nThis line of code checks that the `last_rounded_fwd` datetime object is equal to the datetime object representing", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "          int count = 0;\n            for (int i = 0; i < types.Length; ++i)\n            {\n                if (types[i] == null)\n                    continue;\n                if (types[i].Length > 0 && types[i][", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "def test_suspend_mem(test, params):\n    \"\"\"\n    Test suspend to memory feature.\n\n    :param test: QEMU test object.\n    :param params: Dictionary with the test parameters.\n    \"\"\"\n    if not params.get(\"suspend_mem\"):\n       ", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "      service.submit(pub);\n        service.shutdown();\n        service.awaitTermination(10, TimeUnit.SECONDS);\n        int received = rc.get();\n        System.out.println(\"Received \" + received + \" messages\");\n        assertThat(received,", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "          if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequest(r, destination);\n            }\n            this.owner.getDecorator().onSendRequest(", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F) return (uint)value;\n\t\t\tif (value <= 0xFFFF) {\n\t\t\t\treturn (uint)((ushort)(value >> 8) | 0xC0);\n\t\t\t\t// | ", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "      self.ui.status(descr)\n        self.ui.progress_start(len(copied_files))\n        for file in copied_files:\n            self.ui.progress()\n            try:\n                os.system('arj xf \"%s\" \"%s", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_String_ConstructorFlag ()\n\t\t{\n\t\t\tCOMTest objCOMTest = (COMTest)Activator.CreateInstance (\"MonoTests.ActivatorTest+COMTest\", typeof(COMTest).Assembly, true);\n\t", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "  def testOneOldAndOtherNew(self):\n        da = Locale.objects.get(code='da')\n        de = Locale.objects.get(code='de')\n        repo_da = self._setup(da, 'accepted', 'accepted')\n        repo", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "          self.Log(\"Userstate update for user %s\" % userstate.session)\n            self.send_message(mumble_pb2.Userstate(userstate=userstate))\n            cmd.response = True\n            return\n        elif cmd.cmd == \"set_name\":", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "      PlayerGroup group = player.getPlayerGroup();\n        if (group != null) {\n            group.setLeader(player);\n            group.broadcastToMembers(new PlayerGroupEvent(group, PlayerGroupEventType.LEADER_CHANGED, player));\n        }\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\ndef test_table():\n    \"\"\"\n    Test table generation.\n    \"\"\"\n    table = vt(\n        header=[\"ID\", \"Name\", \"Age\"],\n        data=[\n            [\"1\", \"John Doe\", \"35\"],\n            [\"2\", \"J", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "  def test__update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.append(", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t}\n\twhile (parent instanceof Grid);\n\t((Grid) parent).addColumn(column);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "              Image = ReadElement(element, \"Image\");\n            } catch (Exception ex) {\n                throw new Exception(\"Error loading creature \" + Name + \":\\n\" + ex.Message);\n            }\n        }\n        private void ParseStatus(InventoryEntry entry, string status", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\t\tm_key[i] = new PeerlessKey( m_Peerless, i + 1 );\n\t\t\t\t\tfrom.", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif (beans == null)\n\t\t\treturn coll;\n\t\tfor (ims.care.vo.ChangeOfServiceVo bean : beans)\n\t\t{\n\t\t\tcoll.add(bean);\n\t\t}\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "Version(1, new int[]{1, 1, 1, 1}, new ECBlocks[]{\n                new ECBlocks(1, 1),\n                new ECBlocks(1, 1),\n                new ECBlocks(1, 1),\n                new ECBlocks", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pbOutput = new byte[32];\n\t\t\tkdf.DeriveKey(pbsSalt, pbMsg, pbOutput, pdwIterations, pdwMemory, pdwParallelism);\n\t\t\tif (!Arrays.Equals(pbOutput, pb", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\tfloat discount = 0F;\n\t\tfor(ItemStack armor : player.inventory.armorIn", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Add your custom middleware classes here.\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.Cs", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" {1}) as the current LED_Queue (has {2})\",\n\t\t\t\t\t\tNextFrame.PixelCount, NextFrame.Name, LightCount));\n\t\t\tlock (Lights) {\n\t\t\t\t// Copy the current state of", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "      if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((!this.action", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "          dc.number = PhoneNumberUtils.parse(p.readString(), null);\n            dc.callType = p.readInt();\n            dc.isEmergencyCall = p.readInt() != 0;\n            dc.isMultipart = p.readInt() != ", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "          for (int x = 0; x < xSizeP; x++)\n            {\n                int index = y * xSizeP + x;\n                newVertices[index] = new Vector3(x + leftX, y + topZ, 0);\n               ", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_URL, API_SESSION_ID, API_METHOD_ADD, testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tresult = ((Integer) rawResult).int", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void addSelection", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "          out.writeInt(-1);\n        }\n        else {\n            out.writeInt(found.oid);\n        }\n        out.flush();\n        out.close();\n    }\n}", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        16 + (~stactop[1] & 0x0f),\n                        16,\n                        bitmap, Machine.gfx[5],\n                        16 + (~stactop[1] >> 4 & 0x0f),\n                       ", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                    .DistanceSquared(position) <= spell.Width*spell.Width)\n                                {\n                                    result.Add(target);\n                                }\n                            }\n                            break;\n                        case Collision.CollideType.Wall:\n                ", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "      if (graph.isAncestorOf(x, y)) {\n            return true;\n        }\n        List<Node> nodes = new ArrayList<>();\n        nodes.add(x);\n        Set<Node> visited = new HashSet<>();\n        Set<Node> ancestors =", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if (pop[i] is Drawable)\n                        plcs.Push(pop[i] as Drawable);\n                }\n            }\n            return null;\n        }\n        public void Dispose()\n        {\n            if (this is IDisposable)", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "      if (this.attachmentFile == null && other.attachmentFile == null) {\n            return true;\n        }\n        if (this.attachmentFile != null && other.attachmentFile != null) {\n            if (this.attachmentFile.getFileId() == null && other.attachment", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (m_Item.OnTick(mobiles[i]))\n                            break;\n                    }\n                }\n                private bool OnTick(Mobile m)\n                {\n                    if (m_Item.Deleted)\n                        return false;\n                   ", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t\t{\n\t\t\t\t\tHistory.RemoveAt(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "  return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public List<ComponentInstLight> getComponentInstLights(String userId, String componentName) {\n    return mock.getComponentInstLights(userId, componentName", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            files[++index] = files[i];\n                        }\n                    }\n                    final DialogFragment dialogFragment = new ZipDialogFragment();\n                    dialogFragment.setFiles(files);\n                    dialogFragment.show(ActionModeActionBarController.this.getFragment", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "      this.channel.close();\n    }\n    public void close(int i, String s) {\n        this.channel.close();\n    }\n    public void close(int i, String s, Future future) {\n        this.channel.close();\n    }\n    public", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "              z_arr[p_index, kk, :] = z_dict[z_key][per][:]\n\n                # --> This is where the error is\n                # --> The z_dict[z_key][per] is a dictionary,\n                #", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "    return context.getString(resourceOne, name);\n    }\n    String names = String.join(\", \", recipients.stream().map(Recipient::toShortString).toArray(String[]::new));\n    return context.getString(resourceMany, names);\n  }\n}", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "      env[\"PATH\"] += os.pathsep.join(extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] += os.pathsep.join(extra_lib)\n        if gon native:\n            env[\"GO_NATIVE", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "def load_manifest(manifest_file):\n    \"\"\"Loads a manifest file and returns a Manifest object.\"\"\"\n    logger = get_logger(__name__)\n    with open(manifest_file, \"r\") as f:\n        manifest_data = json.load(f)", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "      if (compiledScript != null) {\n            try {\n                AccessController.doPrivileged(new PrivilegedAction<Void>() {\n                    public Void run() {\n                        compiledScript.getClass().getDeclaredField(\"script\").setAccessible(true);", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "          throw new NotImplementedException();\n        }\n        /// <summary>\n        /// Overrides the base class to provide a dynamic data adapter\n        /// </summary>\n        /// <returns>A dynamic data adapter</returns>\n        public override IDataAdapter GetDataAdapter()\n        {", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\nclass TransformDataset(object):\n  \"\"\"\n  Transforms a dataset by applying a list of transformers to each data point.\n  \"\"\"\n  def __init__(self, dataset, transformers):\n    self.dataset = dataset\n    self.transformers = transformers\n\n ", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (!(obj instanceof OrderInvestigationStatus))\n\t\t{\n\t\t\tthrow new ClassCastException(\"Object is not of type OrderInvestigationStatus\");\n\t\t}\n\t\tOrderInvestigationStatus other = (OrderInvestigationStatus) obj;\n\t\tint", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "      assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n\n    @Test\n    public void shouldFindStackByName() {\n        final String name = \"stack-name\";\n        stacks[0].setName(name);\n        stackDao.", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "      Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterCode(\"DEPTH\");\n        depthParameter.setParameterFamily(pf);\n        depthParameter.setValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSIONS\n        Parameter", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// [$] or [$ identifier]\n\t\t\tif (pattern.Calls(S.Dollar))\n\t\t\t{\n\t\t\t\tif (candidate.Calls(S.Dollar))\n\t\t\t\t{\n\t\t\t\t\tif", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "              if (colisionList.Any())\n                {\n                    extendedFarmLocation = colisionList.First().Position;\n                    extendedFarmLocation.Extend(objAiBase.Position, q.Range);\n                    extendedWillHit = MinionManager.Get", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(contextMenus);\n\t\t// Controls\n\t\tsuper.addControl(new ctnrContracts(this, new ctnrContracts.FormData(this, appForm, control, startTabIndex, form_images_local, contextMen", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "@task\ndef prerequisites():\n    \"\"\"\n    Install Python packages and Node.js dependencies.\n    \"\"\"\n    # Install Python packages\n    pip_install_packages()\n\n    # Install Node.js dependencies\n    node_install_dependencies()\n\n    # Install Python", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "          'name': 'test_readonly_m2o',\n            'm2o_field': self.env.ref('test_testing_utilities.test_m2o').id,\n        })\n        f = Form(r)\n        with f.fields_view_", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "  assert simplify(Sum(x**2, (x, 0, 1))).change_index((1, -1)) == Sum(x**2, (x, 1, 2))\n\n    # Test telescoping sums\n    assert simplify(Sum(", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tUnityEngine.WWW www = new UnityEngine.WWW(LuaDLL.luaL_checkstring(l, 1));\n\t\t\tpushValue(l,true);\n\t\t\tpushValue(l,www);\n\t\t\tsetTableValue(l, \"", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "              this.InitializeAdd(changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeRemove(changedItems, startingIndex);\n            }\n        }\n        private void InitializeAdd(IList newItems, int newStartingIndex)\n        {\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "          String xml = writer.toString();\n            InputSource inputSource = new InputSource(new StringReader(xml));\n            int sizeAfter = getSize(inputSource);\n            assertEquals(\"The size of the XML document should be the same as the size of the object\", sizeBefore, sizeAfter);", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.CampusType = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  Width: {0}\", ide.width);\nConsole.WriteLine (\"  Height: {0}\", ide.height);\nConsole.WriteLine (\"  BitCount: {0}\", ide.bitCount);\nConsole.WriteLine (\"  ImageSize: {0}\", ide.imageSize", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "              // adds the JSR block to the RET block's successors\n                if (l.status & Label.VISITED == 0) {\n                    l.status |= Label.VISITED;\n                    l.addToSuccessors(JSR);\n               ", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "          ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObject(ptr_of_this_method);\n            ptr_of_this_method = ILIntepreter.Push", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.setText(position.toString());\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {\n\t\t\tString labelPosition = comboLabelPosition.getText();\n\t\t\treturn Position.fromString(labelPosition);\n\t\t}\n\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "      currImageValue = self.find_element_by_name( \"image\" ).get_attribute( \"value\" )\n        print \"oldImageValue = \", oldImageValue\n        print \"currImageValue = \", currImageValue\n        self.assertEqual( currImageValue, str( int", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "=====================\n\n# This is the end of the code provided. The next line of code is not part of it.\n\n# Here is the code to complete:\n\n# Create a new instance of the Kexgpg class and set the server key file.\n# This is only needed for", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "          FileSystemNode folderNode = FileSystemNode.createFolder(overallNodeName);\n            if (folderNode != null) {\n                FileSystemNode parentNode = FileSystemNode.getParentNode(treeModel, connectionData);\n                if (parentNode != null) {\n                ", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "              (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                if res:\n                    return res[0]\n                else:\n                    return 0.0\n\n                return", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "  dV = (1. + zi) * (np.pi * (np.power(chi2, 2) - np.power(chi1, 2))) * (np.power(np.power(np.power(const_m, 2), 0.5", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "      d.height = font.getSize() + getSettings().getDiagramSettings()\n                .getDiagramTextMarginBottom();\n        d.width = getPreferredSize().width;\n        return d;\n    }\n    @Override\n    public void setText(String text", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "#self.cal_p2=self.cal_point(p0,p1,phi,theta,flag)\n#self.cal_p1=p0\n#self.cal_p2=self.cal_point(p0,p1,phi,theta,flag)", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void OrdersBtn_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "=====================\n\nclass _Hist3D(Graph):\n    def __init__(self, *args, **kwargs):\n        Object.__init__(self, *args, **kwargs)\n        self.SetName(self.GetName())\n        self.SetTitle(self.GetTitle", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "          Roster roster = protocol.getConnection().getRoster();\n            roster.addHistory(contact, query.getHistory());\n        }\n    }\n}\n\nThe code above is a part of a XMPP library. It is responsible for handling the process of loading the chat", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "      im1L = im1.convert(\"L\", rgb2I)\n        h1 = im1L.histogram()\n\n        # compute transform\n        t = [0.0] * len(h0)\n        for i in range(len(h0)):\n           ", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tif (tag.canSelectFileByID(0x00, 0x01, 0x00)) {\n\t\t\t\ttag.selectFileByID(0x00, 0x01, 0x00);\n\t\t\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "=====================\n\n# Create a new parser\nparser = Parser()\n# Set the block size\nparser.setBlockSize(32)\n# Set the magic number\nparser.setMagicNumber(0x5A4D5043)\n# Set the signature\nparser", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// log.dispose();\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "\n        path = environ['PATH_INFO']\n        for app, handler in self.apps:\n            if path.startswith(app):\n                return handler(environ, start_response)\n        return [b'404 Not Found']\n\n        # This is the end", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.train( int( sys.argv[ 2 ] ) , int( sys.argv[ 3 ] ) )\n\t\tmodel.savemodel( sys.argv[", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "          if (Utility.RandomDouble() < (double)chance / 100.0)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n\nI'm trying to", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "\n        if entry_name in entries:\n            raise ValueError(\"Duplicate enumeration value: %s\" % entry_name)\n        entries[entry_name] = entry_value\n\n        if displayname:\n            enum_name = self.get_enum_name(type(self", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    MessageBox.Show(\"Unable to find any modules to configure.\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Unable to locate the FOG_Service.dll file.\");\n                this.Close();\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "              object obj = this.ViewState[\"SubmitText\"] ?? true;\n                return (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// True", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "              if(this.triangles != null)\n                {\n                    for(int tri = 0; tri < this.triangles.length; tri++)\n                    {\n                        if(this.triangles[tri].textureHash == textureHash)\n                        {\n", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "@login_required\n@csrf_exempt\n@api_view(['GET'])\ndef get_course_progress(request):\n    \"\"\"\n    Returns the progress of a student in a course.\n    \"\"\"\n    try:\n        course_key = request.GET['course_key", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Driver driver = idlePool.Dequeue();\n                    if (driver.IsExpired(now))\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else\n                    {\n                        idlePool.Enqueue(driver", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "  return [var,]\n\n    # List format.\n    if isinstance(var, list):\n        return var\n\n    # Tuple format.\n    if isinstance(var, tuple):\n        return list(var)\n\n    # Other format.\n    return [name,]", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "# Register the quest in the system.\n# This is done by adding new lines in the following file:\n# data/config/packages/com/l2jserver/gameserver/serverpackages/config/server.properties\n# Add the following line to the file:\n# com", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60 * 60 - (double)num1 * 60) % 60);\n\t\t\t\t\tempty = string.Format(\"{", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "          // Initialize OpenGL state\n            GL.ClearColor(Color4.CornflowerBlue);\n            GL.Enable(EnableCap.DepthTest);\n            GL.Enable(EnableCap.CullFace);\n            GL.CullFace(CullFaceMode.Back);\n           ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\n    def add_metabolite(self, metabolite):\n        \"\"\"Add a metabolite to the model.\n\n        Args:\n            metabolite (Metabolite): The metabolite to add.\n        \"\"\"\n        self._metabolites.append(metabol", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (ims.clinical.vo.TumourGroupListVo vo : beans)\n\t\t{\n\t\t\tcoll.add(ims.clinical.vo.TumourGroupListVo.buildFromBean(vo));\n\t\t}\n\t\treturn coll", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent = lines[selectedLine];\n\t\t\t\twhile(current.next!=null){\n\t\t\t\t\tcurrent = current.next;\n\t\t\t\t\tif(current.x+current.width>right){\n\t\t\t\t\t\tright = current", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "      new LayoutAnimationController(set, 0.2f);\n        mListView.setLayoutAnimation(controller);\n    }\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tset", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "              if (PartnerInterestRow.RowState != DataRowState.Deleted)\n                {\n                    if (PartnerInterestRow.FieldKey > HighestNumber)\n                    {\n                        HighestNumber = PartnerInterestRow.FieldKey;\n                    }", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\tfor (int i = 0; i < length; ++i)\n\t\t\t{\n\t\t\t\tif (Mappings.isTmh(structure[i]))\n\t\t\t\t{\n\t\t\t\t\tscoresSol[i] = this.", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
