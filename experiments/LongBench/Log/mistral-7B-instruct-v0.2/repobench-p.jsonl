{"pred": "  private final transient KademliaRoutingTable routingTable;\n    private final transient MessageFactory messageFactory;\n    private final transient JsonSerializer<KademliaDHT> dhtSerializer;\n    private final transient JsonRoutingTableSerializer routingTableSerializer;\n    private final trans", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "      mEffects.add(new NoEffect());\n        mEffects.add(new KernelBlurEffect());\n        mEffects.add(new KernelEdgeDetectEffect());\n        mEffects.add(new KernelEmbossEffect());\n        mEffects.add(new KernelGa", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class MyCipher1(Cipher):  # noqa: D101\n    key_schedule = KeySchedule1\n    encryption = MyFunction\n\n\n# 2nd cipher: linear key schedule and encryption with modular addition (with ctes)\n\nclass MyFunction2(", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "  private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n\n    public EffectManager(Activity activity, ViewGroup parameterListView) {\n        mActivity = activity;\n        mParameterListView = parameterListView;\n\n        mEffects = new ArrayList<>();\n        mEffects.add", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "              new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(new EventCommandHandler<>(SetStatusMessageCommand.class, MessageEvent::fromCommand, this::queueEvent));\n        commandProcessor", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "  private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务监听器管理器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * 任务配置管理器\n     */\n    private TaskMetaInfo", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tSet<Problem> problems = integrityCheck.check(args.path(), passphrase.chars(), args.checkFileIntegrity());\n\t\t\tif (problems.isEmpty()) {\n\t\t\t\tprint(\"Integrity check passed.\");\n\t\t\t\treturn;\n", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "          Log.d(this.getClass().getSimpleName(), \"Device registered with id: \" + deviceId);\n            return true;\n        } catch (RestServiceException e) {\n            Log.e(this.getClass().getSimpleName(), \"Error registering device: \" + e.", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "  U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(new U2fSignRequest(SERVER_CHALLENGE_SIGN_BASE64, ImmutableList.of(new Registered", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "          self.acctA = RadiusAccounting(self.global_config, self.cli, self.cld, self.send_start = True)\n        self.state = CCStateARComplete\n        self.uaA.sendUasResponse(200, 'OK')", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "\nclass URI(Signature):\n    __typeid__ = 11\n\n    def __init__(self, uri):\n        self.uri = uri\n\n    @property\n    def uri_bytes(self):\n        return self.uri.encode('utf-8')\n\n   ", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "=====================\n\ndef convert_ast_constraint(ast_node):\n  \"\"\"\n    Convert an AST node to a constraint.\n  \"\"\"\n  if ast_node is None:\n    return Undef()\n\n  if isinstance(ast_node, ast.Num):\n   ", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "              intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void playVideoIntern(TDActivity activity, Bundle args) {\n        if (activity != null) {\n            Log.", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "      String login = AppSettings.getUserLogin();\n        String language = AppSettings.getLanguage();\n        String timeframe = AppSettings.getTimeframe();\n        String sortBy = AppSettings.getSortBy();\n        String findPeopleMessage = AppSettings.getFindPeopleAllowedMessage();", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "```python\nnetwork = Network('net1')\n```\nThis line creates a new network named 'net1'.\n\nThe following lines define layers for the network:\n```python\n# Linear.\nnet.set_input_layer(InputLayer(10, 1))", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "```python\nclass User(BaseModel):\n    id = Column(String, hash_key=True)\n    age = Column(Integer)\n    name = Column(String)\n    email = Column(String)\n    joined = Column(DateTime, dynamo_name=\"j\")\n", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "```python\n@method(infix('!', bp=72))\ndef select_simple_map_operator(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for context.item in context.inner_focus_", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n    @Inject MovieInfoPresenter presenter;\n    @Inject MovieDetailsPresenter movieDetailsPresenter;\n    @Inject MovieTrailersRepository movieTrailersRepository;\n    @Inject SimilarMoviesRepository similarMoviesRepository;\n    @Inject CastRepository castRepository;\n    @", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "              writeResponse(CREATE_MBEAN, correlationId, instance.getObjectName());\n\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "=====================\n\n        wild.set_message(wild_report)\n        await wild.insert()\n\n\n    @cmd_wild.command(name='list', pass_context=True)\n    @channel_checks.wild_report_enabled()\n    async", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "```python\ndata = SNLIData(c['data'], vocab=vocab, shuffle=True)\n```\nThis line of code initializes an SNLIData object, which is a custom Data class that loads the SNLI dataset and sets up the retrieval and pre", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.amplitude_ppm == 50000.", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "              Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n\n           ", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "=======================\n\ndef test_extend_beyond_max_extensions(self):\n    assert not self.redis.exists(self.redlock.key)\n    with self.assertRaises(TooManyExtensions):\n        for _ in range(Redlock._NUM_EXTEN", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "class Sound(FmodObject):\n    \"\"\"Container for sample data that can be played on a\n    :py:class:`~pyfmodex.channel.Channel`.\n    \"\"\"\n\n    def add_sync_point(self, offset, offset_type, name):\n        \"\"\"Add", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "\n    @calg.register(CompressionAlgorithm)\n    def calg_int(self, val):\n        self._calg = CompressionAlgorithm(val)\n\n    def __init__(self):\n        super(CompressedData, self).__init__()\n        self._", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "findCellSize(img2, imgshape, detectCellSizeParameter = detectCellSizeParameter, verbose = verbose, out = out, **parameter);\n\n        # cell intensity\n        findCellIntensityParameter = getParameter(detectSpotsParameter, \"findCellIntensityParameter\", findCell", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "          Assets.perfectTapSound.play();\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play();\n        } else if (accuracy == Accuracy.NICE) {\n            Assets", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "          while (transactionIterator.hasNext()) {\r\n                Transaction transaction = transactionIterator.next();\r\n                printer.print(transaction);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n\r\n        }\r\n\r\n    }\r", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "              // TODO: Add support for other types of queries.\n            }\n        }\n        return pgm;\n    }\n\n    /**\n     * Execute the compiled SQL query and return the result set.\n     *\n     * @param pgm\n     * @return\n    ", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    UsageEncryption.OSY,\n                    OperationMode.PKCS1V15,\n                    EncryptionAlgorithmCoded.TWOKEY3DES,\n                    AlgorithmParameterName.IVC,\n                    AlgorithmParameterIVValue=random.randbytes(", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            if (env.combExpCheckNum[i] > 0) {\n                                regex.combExpCheckNum[i] = env.combExpCheckNum[i];\n                            }\n                        }\n                    }\n                }\n            }\n        } //", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "=====================\n\nurl(r'^api$', login_required(include_docs_urls(title=\"Transifex API\", public=True)), name=\"api\"),\n\napp_urls = app_job_urls + app_pipeline_urls + app_setting_urls + ajax", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tpublic ResourceData (MainActivity mainActivity)\n\t\t{\n\t\t\tmeter = MeterSpec.T.OTHER_STATS.get (mainActivity);\n\t\t\ttags = new EnumMap<SRSLevel, String> ();\n\t\t\tcolors =", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "  def set_storage_type(self, storage_type):\n        if storage_type in STORAGE_TYPES:\n            self._storage_type = storage_type\n        else:\n            raise PyOrientBadMethodCallException(\n                storage_type + ' is not a", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "  public GivenWhenThenDsl<$SystemUnderTest> when() {\n        return new GivenWhenThenDsl<>(preparation, thenStepFactory);\n    }\n}\n\npackage testasyouthink;\n\nimport testasyouthink.GivenWhenThenDsl.Prepar", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "  CommandResult result;\n    try {\n      result = process.await();\n    } catch (CommandFailureException e) {\n      throw new IosDeviceException(this, e);\n    } catch (InterruptedException e) {\n      throw new IosDeviceException(this, e", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\ttextColor = Themer.getColor(contextRef.get(), R.color.text_color);\n\t}\n\tprivate void setTextSize() {\n\t\ttextSize = Themer.getTextSize(contextRef.get(), R.dimen.text_size);\n\t", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);\n\t\tif (msg.isTextMessage()) {\n\t\t\tString text = ((ReceivedTextMessage) msg).Content;\n\t\t\tString replyText = talk(msg.FromUserName, text);", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "# 获取 apk 文件的 md5 值，用于文件名称和目录名称的构造\napp_info = get_app_info(file_path)\napp_info['file_md5'] = genMD5(file_path)\n#", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "  @command(pass_context=True, name=\"raid-city\", category='Bot Info', aliases=[\"rc\"])\n    @checks.is_guild_owner()\n    async def cmd_raid_city(self, ctx):\n        \"\"\"\n        **!raid-city", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "      self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25))\n        self.assertEqual(date_string_to_date(\"11/12/2012\"),", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "      config_actor = ConfigActor(config_file, os.getcwd())\n        config_actor.start()\n        gevent.sleep(1)\n\n        if honeypot_first:\n            honeypot_session = HoneypotSession(source_ip", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            ShareUtil.shareText(mActivity, picture.getText_content());\n                            break;\n                        case 1:\n                            ShareUtil.sharePicture(mActivity, picUrl, picture.getText_content());\n                            break;\n                        case 2:\n", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\tfor j in range(num_contrasts):\n\t\t\t\t\t\tsaveauto(positive_data[:,j], np.where(masking_array[0]==j)[0], \"pFWER_%s_pos_con%d.mgh", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "              ResponseSyncAdapter.class,\n                SurveyActivity.class,\n                SurveyPromptLoader.class,\n                InstallSurveyDependencies.class,\n                InstallSurveyDependenciesFragment.class,\n                ContentProviderReader.class,\n                ContentProviderS", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "=====================\n\nclass SignatureV4(Signature):\n    \"\"\"\n    5.2.3.  Version 4 Signature Packet Format\n\n    The body of a version 4 Signature packet contains:\n\n     - One-octet version number (4).\n\n    ", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "```python\n@method(nullary('.'))\ndef select_self(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    elif isinstance(context, XPathSchemaContext):\n        for item in context.iter_self():", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "=====================\n\nclass HeapBalancerSink(LoadBalancerSink):\n  \"\"\"A sink that implements a heap load balancer.\"\"\"\n  Penalty = Int.MaxValue\n  Idle = Int.MinValue + 1\n\n  class HeapVarz(VarzBase", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "      message = {'message': 'store',\n                   'key': 'test',\n                   'value': 'test value',\n                   'timestamp': 123456789,\n                   'expires': 1234567890,", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "      StatementExecution se = (StatementExecution) qe;\n        assertEquals(\"SELECT * FROM users WHERE id = ?\", se.getQuery());\n        assertEquals(1, se.getAllParameters().size());\n        assertEquals(1, se.getSetParams().size());\n        assertEquals(0,", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "      Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionCount() {\n        ProxyTestDataSource ds = new ProxyTestDataSource", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "              continue\n\n            # Send the ADR request\n            log.info(\"Sending ADR MAC Command\")\n            self._sendMACCommand(device, self._createLinkADRRequest(device))\n\n        self.adrprocessing = False\n        returnValue(None)\n\n   ", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "======================\n                    function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n# IEEE 802.15.4 frame format\n#\n#--------------------------------------------------------\n#\n# IEEE 802.15.4 frame format\n#\n#--------------------------------------------------------\nclass IEEE802154(Layer):\n   ", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "      ObservableRegistry.getObservable(ChatSettingsActivity.class).register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getObservable(ChatSettingsActivity.class).remove(this);\n    }\n", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "=======================\n\nclass HITANS6(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "      ref_time = self.img_handle.ref_time\n\n        # If the reference time is not given, use the current time\n        if ref_time is None:\n            ref_time = datetime.datetime.utcnow()\n\n        # Convert reference time to Julian date\n", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "      if (mPublicRoomsListList != null) {\n            mPublicRoomsListList.clear();\n        } else {\n            mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n        }\n\n        for (String homeServerName : mHomeServerNames", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "```python\n@group(name=\"bingo\", category=\"Games\")\nasync def bingo(ctx):\n    await ctx.send(\"Welcome to the Bingo Game!\")\n```\nThis line of code defines a new command group named \"bingo\" with the category \"G", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "```python\n        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)\n```\nThis line of code initializes a ChimeraDetector instance, which is responsible for detecting and filtering out chimeric adj", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "      plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    initMiPush();}\n                stopGCM();\n                stopHwPush();\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HwPush\":\n                stopGCM();\n              ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "      registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new StringArrayResponseHandler());\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new VoidResponseHandler());\n        registry.", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "  public PersonalVulnsWindow() {\n        initComponents();\n        initListeners();\n        initTree();\n        initTreeListeners();\n        initTreeCellRenderer();\n        initTreeModel();\n        initTreeSorting();\n        initTreeSearching();\n        initTreeMerging();", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "  public Panel() {\n        initComponents();\n        initListeners();\n        initData();\n    }\n\n    private void initComponents() {\n        jTabbedPane1 = new javax.swing.JTabbedPane();\n        jScrollPane1 = new javax.swing.JScroll", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "      if (packet.getType() == PacketType.OPEN) {\n            client.setNamespace(namespacesHub.create(packet.getData().toString()));\n            client.getNamespace().onConnect(client);\n            ackManager.initAckIndex(client.getSessionId(), packet", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "      videoSource = factory.createVideoSource(videoCapturer,\n            appRtcClient.videoConstraints());\n      } else {\n        videoSource = factory.createVideoSource(videoCapturer, null);\n      }\n      videoSource.addTrack(factory.createVideoTrack(\"video", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "          contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 0);\n\n            return contentValues;\n        }\n\n        protected void onDatabaseCreated() {\n            if (!mDatabaseCreated) {\n                throw new IllegalStateException(\"database not created\");\n           ", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "  private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "=====================\n\nThe next line of code initializes the journal, which is responsible for\npersisting the system state.\n\nThe journal is created with the basedir and system\\_data\\_path arguments.\nThe basedir argument is the directory where the snapshot files will be\nstored and the system", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "======================\n\n        self.setup_docker_config.update(docker_config)\n\n        if self.config.debug_gdb:\n            DebugGdbSupport(self.config).update(docker_config)\n\n        if self.config.debug_val", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "  Observable<List<Board>> boardsObservable = Observable.fromIterable(Arrays.asList(SectionNames))\n        .flatMap(new Function<String, Observable<List<Board>>>() {\n          @Override public Observable<List<Board>> apply(@NonNull String sectionName) {\n", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "      FragmentObservable<SearchContactFragment, DataClass> obs = ObservableRegistry.getObservable(this.getClass());\n        obs.register(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                            ", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tString testClassName = createTestClassName(model.getJUTElements().getTestClassName(), testmethodPrefix, testmethodPostfix);\r\n\tString testBaseName = model.getTestBases().getTestBase();\r\n\tString testBasePackageName = model.getJUTElements().getTest", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "      simulator_data_client = SimulatorDataClient()\n        simulator_data_client.startProtocol()\n\n        simulator_data_listener = MockSimulatorDataListener()\n        simulator_data_client.add_simulator_data_listener(simulator_data_", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "          String response = new String(httpMessage.getRes().getResponse());\n            String request = new String(httpMessage.getReq().getRequest());\n            String requestHeader = new String(httpMessage.getReq().extractHeadersAsString());\n            String responseHeader = new String(httpMessage", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "\ndef test_simple_status_gsi_busy(description):\n    \"\"\"Status is busy because table isn't ACTIVE, one GSI is busy\"\"\"\n    assert simple_table_status(description) == expected_status\n\n\n@pytest.mark.parametrize", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "=====================\n\nclass IffID3(ID3):\n    \"\"\"A generic IFF file with ID3v2 tags\"\"\"\n\n    def __init__(self, filething=None, **kwargs):\n        super().__init__(filething=filething, **kwargs)\n       ", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "    visitCheckForBoolean(new VisitCheckOp3(n));\r\n\r\n      return null;\r\n    }\r\n\r\n    visitCheckForProx(new VisitCheckOp3(n), query);\r\n\r\n    return null;\r\n  }\r\n\r\n  |\r\n  |\r", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new EmbossTransformation().setAzimuth(Math.PI / 4).setElevation(Math.PI / 4),\n                    new EdgeTransformation(),\n                    new EqualizeTransformation(),\n                    new SolarizeTransformation()\n                    )),", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "```python\n            if self._header[1] == 1:\n                exception_class = PyOrientCommandException\n            elif self._header[1] == 2:\n                exception_class = PyOrientConnectionException\n            elif self._header[1] == 3:", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "=====================\n\napi = DERBMDATA(args.apikey)\n\nif args.fromdate and args.fromtime and args.todate and args.totime:\n    params = {\n        'FromDate': args.fromdate,\n        'FromTime':", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum();\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage();\n\t\t\t}\n\t\t\tcopyFrom( proxy, item );\n\t\t\titems.add( item );\n\t\t}\n\t\treturn items", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "  key = dump_key(engine, user)\n\ndef test_dump_key_hash_key():\n    user = User(id=\"foo\")\n    key = dump_key(engine, user)\n    assert key == {\"id\": {\"S\": \"foo\"}}\n\ndef", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "      new TaskName()),\n        StaticString.CONDITIONAL_WHITESPACE,\n        new Spinner(Spinner.SPINNER_SLASHES),\n        StaticString.WHITESPACE,\n        new Percentage(),\n        StaticString.", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "public static Iframe iframe(Attribute... attributes) {\n\t\treturn new Iframe(attributes);\n\t}\n\tpublic static Hr hr(Attribute... attributes) {\n\t\treturn new Hr(attributes);\n\t}\n\tpublic static Head head(Attribute... attributes) {", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "=====================\n\n    events.append(Event(e))\n\n    return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data)\n\n    # S", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "  Matcher<? super BatchParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /////////////////////////////////////////////////////////////////////////////\n    // PreparedExecutionAssertions\n    /////////////////////////////////////////////////////////////////////////////\n", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "          if (mWallpaper != null) {\r\n                WallpaperApplyTask task = WallpaperApplyTask.prepare(this);\r\n                if (mApply == Apply.HOMESCREEN) {\r\n                    task.to(Apply.HOMESCREEN);\r\n                } else if (m", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "\n  private static final Map<Operator, Occur> opToOccur = new HashMap<Operator, Occur>();\r\n\r\n  static {\r\n    opToOccur.put(Operator.AND, Occur.MUST);\r\n    opToOccur.put(Operator.ANDNOT", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\n\t\tif args.genotype is not None:\n\t\t\tfor i in args.genotype:\n\t\t\t\tif not os.path.isdir(i):\n\t\t\t\t\tprint '{} is not a directory'.format(i)\n\t\t\t\t\t", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "=====================\n\n        self.beginning_datetime = filenameToDatetime(os.path.basename(self.vid_path))\n\n        # Get the FPS of the video\n        self.fps = self.vidinfo.ts/self.vidinfo.seqlen\n", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "# 3. create image\nimg = models.ConfocalImageModel(objects, p, ilms.Polynomial2P1D(ILMVALS, category='ilm'))\n\n# 4. create state\nstate = states.ImageState(img, sigma=0.", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tFoodGroupRegistry.sync(player);\n\t}\n\n\tpublic static void setInStone()\n\t{\n\t\tFoodGroupRegistry.setInStone();\n\t}\n\n\tpublic static void clear()\n\t{\n\t\tFoodGroupRegistry.clear", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "=====================\n\ndef view_post(request, pk, username, slug):\n    post = get_object_or_404(Post, pk=pk, user__username=username, slug=slug)\n    comments = Comment.objects.filter(post=", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tISelection selection = new StructuredSelection(selectedCells.iterator().next());\n\t\t\t\t\t\tfireSelectionChanged(new SelectionChangedEvent(GridEditor.this, selection));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "  @keyclass.register(RevocationKeyClass)\n    def keyclass_revocationkeyclass(self, val):\n        self._keyclass = val\n\n    @sdproperty\n    def pubkeyalg(self):\n        return self._pubkeyalg\n\n    @pubkey", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "```python\n        if isinstance(item, ProcessingInstructionNode):\n            yield item\n```\n\n###\n# Sequence types (for matching of node types in XPath 2.0)\n@method(function('node', nargs=1, label='sequence type'))\ndef", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "\ndef handlePuffleAdopt(client, puffle):\r\n    puffles = client['data'].puffles\r\n    puffles.append(puffle)\r\n    client['data'].puffles = puffles\r\n    client['room'].send('p#pn',", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "\n# Create the figure and the interaction object\nfig, ax = pl.subplots(figsize=(10,10))\nint_obj = interaction.Interaction(im, pos, viewrad=1.5, cmap='Greys_r')\n\n# Add the interaction", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "```python\n        with tqdm.tqdm(total=len(jobs)) as pbar:\n            results = run_mp(compile_information_func, jobs, self.log_directory)\n            for result in results.values():\n                self.log_lik", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "======================\n\n# Recompute the rotation wrt horizon\nplatepar.rotation_from_horiz = RMS.Astrometry.ApplyAstrometry.rotationWrtHorizon(platepar)\n\n# Update the reference time and hour angle\nplatepar.", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "      contentValues.put(JobStorage.COLUMN_INTERVAL_MS, validInterval ? 30_000L : 0L);\n        contentValues.put(JobStorage.COLUMN_TAG, \"test\");\n        contentValues.put(JobStorage.COLUMN_", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "      FragmentObservable<ChatSettingsRemove, Chat> observable = ObservableRegistry.getObservable(ChatSettingsRemove.class);\n        observable.register(this);\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "class ProgressFilter(django_filters.FilterSet):\n    indicator = django_filters.ModelChoiceFilter(\n        name='component__indicators', queryset=Indicator.objects.all())\n    target = django_filters.ModelChoiceFilter(\n        name='component__indicators__", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "          presenter.getProduceData().updateDatabase(list, presenter.getProduceData().getCategory());\n            GoogleAnalyticsSender.getInstance(getContext()).send(\"load_data_success\");\n        }\n    }\n\n    @Override\n    public void onCreateOptionsMenu(", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "          @Override\n            protected void onFailure(final Throwable cause) throws Exception {\n                context.handleError(cause);\n\n                reconnecting.fail(cause);\n            }\n        }).then(new OnComplete<Channel>() {\n            @Override\n            protected", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "              new RegistrationParam(success, email, password, message));\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/asyncTasks/server/GetInfoTask.java\nimport android.content.SharedPreferences", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "  private final Router<Road, RoadPoint> router;\n\n    /**\n     * Creates a {@link Matcher} object.\n     *\n     * @param map {@link RoadMap} object for map matching.\n     * @param router {@link Router} object for routing", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "  private FilterUrl filterUrl;\n    private List<FilterType> filterTypes;\n    private List<FilterType> filterTypes_left;\n    private List<FilterType> filterTypes_right;\n    private HashMap<String, Integer> filterTypeMap;\n    private HashMap<String,", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "message = args.gps_sv[0].getMessage()\n  assert isinstance(message, ConstMessage)\n  assert message.bitValue == 0\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgs", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "=====================\n\n        with DisplayListGenerator() as dl:\n            with dl:\n                gl.glColor3fv(fills[0].rgba)\n                gl.glBegin(gl.GL_TRIANGLES)\n                for tri in tris:", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {\n\t\t\t\t\ta = new AppData(data.substring(AppData.COMPONENT.length()).trim());\n\t\t\t\t} else if (data.startsWith(ShortcutData.", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "              if (AppInfoAction.isShow && AppInfoAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppInfoAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "      self.beg_alt, self.beg_az = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], self.lat, self.lon)\n        self.end_alt, self.end", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n}\npackage mantra.codegen;\nimport mantra.", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "public boolean visit(VariableReferenceNode node) {\n    // Your code here\n    return true;\n}\n}\n\n/**\n * Visitors that need to add nodes to the tree implement this interface.\n */\npublic interface NodeAdditionVisitor {\n\n    // Base visitor methods\n    //", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n    public OpenAPIProcessor() {\n        parserFactories.add(new SpringParserFactory());\n    }\n\n    @Override\n    public Set<String> getSupportedAnnotationTypes() {\n        return new HashSet<>(Arrays.asList(\n                OpenApi.class.getCan", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "      bind(GerritSettings.class).toInstance(new GerritSettings());\n\n        install(new GerritUiModule());\n        install(new GerritDiffModule());\n        install(new GerritActionsModule());\n        install(new GerritRestModule());", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    File snapshot = snapshots.get(i);\r\n                    long zxid = getZxidFromName(snapshot.getName());\r\n                    if (zxid >= zxidLong) {\r\n                        snapFile = snapshot;\r\n                        break;\r\n                    }\r\n", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "=====================\n\ndef _parse_search_query(query_string):\n    \"\"\"Parses a search query string into a dictionary of search criteria.\n\n    The query string is expected to be in the format of a comma-separated list of search terms,\n    where each term is", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "  def __init__(self, CallName='', ReprName='',\n                 SegmentType=None,\n                 Length=None,\n                 Data=None,\n                 SegmentData=None):\n        self.CallName = CallName\n        self.ReprName = ReprName", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t}\n\t\t\t\t\treturn Api.get().searchBeers(query)\n\t\t\t\t\t\t\t.flatMapIterable(SearchSuggestion::get)\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "# 2. background\nbackground = np.zeros((100, 100, 3), dtype=np.float32)\nbackground[:,:,0] += 1.0\nbackground[:,:,1] += 1.0\nbackground[:,:,2]", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "=====================\n\ndef apply_and(left: Column, right):\n    if type(right) == Column:\n        result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request != null) {\r\n                        stringBuilder.append(\"\\nRequest: \")\r\n                                .append(request.getName())\r\n                        .append(\"\\nIcon: \")\r\n                ", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "=====================\n\nclass ArithmeticProxy(metaclass=ArithmeticTypeMeta):\n    \"\"\"Proxy for arithmetic operations.\"\"\"\n\n    def __new__(cls, *args: Union[AnyAtomicType, AbstractDateTime, Duration], **kwargs: Any) -> Union[", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "          return SearchMenuPage()\n        if pageletId == 'Mediathek':\n            return Mediathek()\n        if pageletId == 'PlayerStore':\n            return PlayerStore(self.log, self._getApiTokenFile(), self._getPlaylistFile())\n       ", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "          if not checkFileExistence(pattern.datafile):\n                errmsg += \"Pattern '%s' does not exist: %s\\n\"%(pattern.name, pattern.datafile)\n                rvalue = False\n\n            # 2.2 data file format\n            if", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "=====================\n    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "private StarItemAdapter starItemAdapter;\nprivate List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n\n    private Content", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\t\n\t\tString surveyName = \"test\";\n\t\tString inputPath = basePathDDI2FO + \"/test.xml\";\n\t\tFile inputFile = new", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        new UserLoginTask(false, UserLoginTask.class).execute(user.getEmail(), user.getPw());\n                    }\n                });\n\n        // \"Cancel\" button to close the dialog\n        alert.setNegativeButton(R.string.Cancel,\n", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "\n    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n\n    url(r'^new$', staff_member_required(NewPackageView.as_view()), name=\"package-new\"),\n    url(r'^view/(?", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "```python\ndef test_GPSL1L2BitEncoder_addSamples0():\n  '''\n  Test single bit dual band encoder samples adding and conversion\n  '''\n  encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  samples = numpy.nd", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "class TestSave(unittest.TestCase):\n    def setUp(self):\n        self.inputWav = \"tests/data/test_save_input.wav\"\n        self.inputTextgrid = \"tests/data/test_save_input.Textgrid\"\n        self", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "```python\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        segmented_utterances", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "          dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NfS')\n        for", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "  void set(FixTag tag, Object value) throws InvalidValueException;\n}\nsrc/main/java/org/fix4j/engine/msg/Msg.java\npublic interface Msg extends TagBag {\n\tMsgHeader header();\n\tMsgTrailer trailer();\n\tList<", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "=====================\n\nyield self(get_excerpts(traces_f, n_excerpts=self._kwargs['n_excerpts'],\n                        excerpt_size=self._kwargs['excerpt_size']))\n\n# The following code is not executed", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tresult.setQueryNode(anyQueryNode.getQueryNode());\n\t\t\tresult.addExplan", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate FolderCleaner folderCleaner;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\t", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "      registry.put((byte) (INVOKE ^ RESPONSE_MASK), new MarshalledResponseHandler<Object>(OBJECT));\n        registry.put((byte) (SET_OBJECT_INSTANCE ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n       ", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        String language = languageDetector.detectLanguage(content).getLanguageName();\n                        if (language.equals(lang)) {\n                            FileSaver fs = new FileSaver(content, language, \"twitter\", url, this.lang, tweet.getText().hashCode()", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "=====================\n\n        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n\n        return lines\n\n\nif __name__ == '__main__':\n    # TODO: Add test cases\n    pass", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "\n    group.add_argument(\n        \"--delay\",\n        dest=\"latency_time\",\n        help=\"\"\"network delay [millisecond].\n        the minimum delay time is 0ms.\n        valid units are either: {}\n        e.g. tcset eth0 --delay", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "      try:\n            contact = Contact.objects.get(phone_number=self.phone_number)\n        except Contact.DoesNotExist:\n            contact = None\n        except MultipleObjectsReturned:\n            contact = Contact.objects.get(phone_number=self.phone", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "  pipeline.apply(\"Read live projects\", new LiveProjectSource(org));\n\n    // Extract the GCPResourceState from the live projects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates = liveProjects.apply(\n        ParDo.named", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "      self.generator = SimilarPathGenerator()\n\n    def test_get_pattern_for_directory(self):\n        self.assertEqual(self.generator.get_pattern_for_directory(\"/\"), \"/\")\n        self.assertEqual(self.generator.get_pattern_for_directory(\"/", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "      ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ff", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "      conditions.append(AndCondition(*[condition_for(op) for op in operations if op]))\n    if \"or\" in operations:\n        conditions.append(OrCondition(*[condition_for(op) for op in operations if op]))\n    if \"not\" in operations:\n", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "      assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 1\n        assert get_square_idx(0, 2) == 2\n        assert get_square_idx(1, 0)", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "  private final IJavaProject javaProject;\n\n    private final IType testType;\n\n    private final IType baseType;\n\n    private final IMethod baseMethod;\n\n    private final MethodRef baseMethodRef;\n\n    private final List<Method> methods;\n\n   ", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "=====================\n\nself.next_sink.SetVarz(self, 'timeout_sink', self)\nself.next_sink.SetVarz(self, 'timeout_sink_state', self.state)\nself.next_sink.SetVarz(", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate static final String PATH_TO_PDF_FILE = \"path/to/pdf/file.pdf\";\n\n\tprivate static final String PATH_TO_OUTPUT_FOLDER = \"path/to/output/folder/\";\n\n\tprivate static final String PATH_TO", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "      () -> StableList.from(sourcePath).map(path -> path.getFileName().toString()).collect(joining(\"\\n\", \"\", \"\\n\"))\n    );\n    cmdLine.add(\"--file-encoding\", \"UTF-8\");\n    cmdLine.addAll(files.", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "  return RespostaSAT.analisar(retorno)\n\n        # return RespostaComunicarCertificadoICPBRASIL.analisar(retorno)\n\n    def consultar_status_operacional(self):\n        \"\"\"Sobrepõe", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "      registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "=====================\n\n    cmd = self.commands[name]\n    if not cmd:\n      raise NoSuchProjectError(name)\n\n    if not cmd.IsAvailable():\n      if gopts.trace:\n        print('repo: warning: command %s is not available' %", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "  Gson provideGson() {\n        return new Gson();\n    }\n\n    @Provides @Singleton\n    JsonParser provideJsonParser() {\n        return new JsonParser();\n    }\n\n    @Provides @Singleton\n    Ion provideIon(Application", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "      Assert.assertThat(ds, totalQueryCount(5));\n\n        // expected clause\n        Assert.assertThat(ds, totalQueryCount(5).withMessage(\"Expected 5 query executions, but was 5\"));\n\n        // but was clause\n        Assert.assertThat(", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "      return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inherit", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "      VerifierProperty validSchemaVerifier = new ValidSchemaNameVerifierImpl();\n        VerifierProperty localFileExistsVerifier = new LocalFilesExistVerifierImpl();\n        VerifierProperty remoteFileExistsVerifier = new RemoteFilesExistVerifierImpl();\n\n        verifiers.put", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "          // Show an error message and focus the email field.\n            if (emailTmp != null) {\n                emailView.setError(getString(R.string.error_invalid_email));\n            }\n\n            passwordView.setError(getString(R.string.error_", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "  DrupalUser loginUser(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by uid (invokes the drupal Service user.load)\n     *\n     * @param uid the user's ID\n     * @", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "======================\n\ndef testQuirks(self):\n    quirks = self.testquirks()\n    quirklist = []\n    for quirk in quirks:\n        if type(quirk) == dict:\n            quirklist.append(pesterQu", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "          (r'/problemlist', ProblemListHandler),\n            (r'/problemlist\\?oj=(.*)&problem_id=(.*)&problem_title=(.*)&problem_source=(.*)&index=(.*)', ProblemListHandler),", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "              throw new IllegalArgumentException(\"Invalid criterion: \" + criterion);\n        }\n\n        return informationCriterion.getSelectionModels();\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "  return Pair(e1, e2, ty1)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Project the first component of a pair.\n    \n    Arguments:\n    - `expr`: a Pair\n    \"\"\"", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "\n    void inject(ClassicNoBooksUi classicNoBooksUi);\n\n    void inject(ClassicBookList classicBookList);\n\n    void inject(ClassicPlaybackUi classicPlaybackUi);\n\n    void inject(DemoSamplesInstaller demoSamplesInstaller", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "  private List<SliceValue> sliceValues;\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "  response = Response()\n    assert response.content_type is None\n    assert response.status_code == 500\n\n\ndef test_response_content_type_present():\n    response = Response()\n    response.content_type = 'application/json'\n    assert", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t/**\n\t * \n\t */\n\tprivate final DocumentGraphEditor editor;\n\n\t/**\n\t * @param editor\n\t */\n\tCommandExecutor(AtomicalConsole atomicalConsole, DocumentGraphEditor editor) {\n\t\tthis.atomicalConsole = atomicalConsole;\n", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "=====================\n\n    except TextGridParseError as e:\n        self.return_dict[\"parse_error_files\"].append(e)\n\n    except Exception as e:\n        self.return_dict[\"unknown_error_files\"].append(e)\n        traceback.print", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "```python\nAccelerometerResource,\n\"/aircraft/sensors/accelerometer\",\nresource_class_args=(sensors.accelerometer,)\n```\n),\n(\"gyroscope\", GyroscopeResource, \"/aircraft/sensors/gyro", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "      self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueKts())\n\nclass InstrumentTests(TestCase):\n    def test_airspeed_indicator(self):\n        huginn_data_path = configuration.get_", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "\n    '--association / --no-association'\n\nASSOCIATION_FILTER_HELP_LINES = [\n    '--association / --no-association',\n    'Filter the result set to include or exclude association instances.',\n]\n\nINSTANCE_MODIFY", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate CountryServices countryServices;\n\t\n\t/**\n\t * 后台主页\n\t * @return\n\t */\n\t@RequestMapping(value=\"/manage\",method=RequestMethod.GET)\n\tpublic ModelAndView manage(ModelAndView mv) {\n\t\t", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            logError(title, t);\n                            presenter.showErrorMessage(title, t.getMessage());\n                        } else if(exceptionClass.equals(InvalidOperationException.class)){\n                            logWarning(title, t);\n                            presenter.showWarningMessage(title", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "  def test_full_e2e_gujarati_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full flow for sign up + cancel in Gujarati...\")\n        self.run_e2e_flow_for_language(", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "protected LocationUpdateRequester locationUpdateRequester;\n\n  protected PlaceListFragment placeListFragment;\n  protected PlaceDetailFragment placeDetailFragment;\n  protected CheckinFragment checkinFragment;\n\n  protected boolean inBackground = false;\n  protected boolean lowBattery = false;\n ", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "# connect(DYNAMIC_TOOL_DIR)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Layer):\r\n    constructorList = [\n        Bit('RR_protocol_version', Pt=0, BitLen=3, Repr='hum'),\n        Bit('Message_type', Pt=0, BitLen=6, Repr='hum'),\n       ", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\tadjacency_lh = create_adjac_vertex(v_lh, faces_lh)\n\t\tadjacency_rh = create_adjac_vertex(v_rh, faces_rh)\n\t\tadjacency = np.concatenate((adj", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\n    } else {\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\n", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "      CacheList newList = new CacheList();\n        newList.setName(listName);\n        cacheService.storeCacheList(newList);\n        contentPane.getItems().clear();\n        contentPane.getItems().add(new ListView<CacheList>(cacheService.get", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "  'CallName':'Header',\r\n    'ReprName':'',\r\n    'Trans':False,\r\n    'Type':'header',\r\n    ]\r\n\r\n    def __init__(self, CallName='', ReprName='', Trans=False):\r\n        super(Header", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        new TimeEntryOvertimeAggregation()));\n\n        approve.addAction(new ApproveAction());\n        reject.addAction(new RejectAction());\n\n        dateFrom.setDatePattern(\"dd.MM.yyyy\");\n        dateTo.setDatePattern(\"dd.", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "=====================\n\nclass PubKeyV4(PubKey):\n    __ver__ = 4\n\n    @sdproperty\n    def created(self):\n        return self._created\n\n    @created.register(datetime)\n    def created_datetime(self, val):\n       ", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "\ndef create_daq_device(board_num, descriptor):\n\"\"\"Creates a DAQ device with the specified board number and descriptor.\n\nParameters\n----------\nboard_num : int\n    The board number associated with the device.\ndescriptor : str or DeviceDescriptor\n    The device descriptor", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "=====================\n\nclass StrongRefSetProperty(Property):\n    __slots__ = ('references', 'index_name', 'next_free_key', 'last_free_key', 'key_pid', 'key_size', 'objects')\n    def __init__(self,", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "=====================\nuser = create_inactive_user(email, full_name)\n\n# Send email to user\nsubject = _('Welcome to Connect!')\ntemplate = 'connect/emails/welcome.html'\nsend_connect_email(subject, template, user,", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "```python\n        draft = await self.draft_interface.find_draft(guild_id=ctx.guild.id, channel_id=ctx.channel.id)\n        if draft:\n            draft_content = draft.draft_content\n            print(draft_content)", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "          ex = Hitbtc('bccbtc')\n        elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n            ex = Hitbtc('bcceth')\n        elif name == \"%s_BTC_CAD\" % constant.", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "```python\n            if isinstance(item, (TypedAttribute, TypedElement)):\n                yield item\n            else:\n                context.item = self.get_typed_node(item)\n                yield context.item\n\n    elif self.xsd_types is None", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "  helpTestIteratorNormal(10, 5);\n  }\n\n  @Test\n  public void testDataParanoid() {\n    helpTestIteratorParanoid(10, 5);\n  }\n\n  @Test\n  public void testDataCount() {\n", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tList<FacetSpecification> facets = new ArrayList<Facet", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    initMiPush();\n                }\n                //Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HMS\":\n                if(shouldInit()) {\n                    HMSAgent.init(this);\n", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "  private final KadConfiguration config;\n    private int attempts;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "=====================\n\n    if show_header:\n        output.append(tabulate(rows, headers, tablefmt, numalign, stralign))\n    else:\n        output.append(tabulate(rows, None, tablefmt, numalign, stralign))\n\n    return output", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "=====================\n    return words_api(wordnik_api, token)\n\n\nif __name__ == '__main__':\n    app = Flask(__name__)\n    app.config.from_object('config')\n    create_routes(app)\n    app.run", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@Inject\n\tprivate ConnectorIssues connectorIssues;\n\t\n\tpublic ImageView getRefreshButton() {\n\t\treturn refreshButton;\n\t}\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "  def test_create_event_invalid_handle(self):\n        with patch(\"pywincffi.kernel32.CloseHandle\") as close_handle:\n            handle = CreateEvent(bManualReset=False, bInitialState=False)\n            close_handle.assert", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "      this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n    }", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    return parserHolder.getParser().parse(annotation.getAnnotation(parserHolder.getSupportedAnnotation())).stream();\n                })\n                .collect(Collectors.toList());\n\n        FileManager fileManager = fileManagerFactory.build(roundDescriptor.packageName, originating", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "  protected PageParser pageParser;\n\n    protected DuplicateStrategy duplicateStrategy;\n\n    protected CountDownLatch latch = new CountDownLatch(1);\n\n    protected ExecutorService executorService;\n\n    protected AtomicInteger threadCount = new AtomicInteger(0);", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "          actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n        }\n\n        PopupHandler.installPopupHandler(editTableView, actionPopup", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "  private GuiButton addChannel;\n\n    public GuiSettingsChannel(Channel channel) {\n        super(new VerticalLayout());\n        this.channel = channel;\n        initGUI();\n    }\n\n    private void initGUI() {\n        setDisplayString(I18", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "              return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new BtnClearAllNotifications();", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "      createWebAppTable(form);\r\n        createButtons(form);\r\n        createSections(form);\r\n        form.setSize(600, 400);\r\n        setControl(form);\r\n        addDisposeListener(new DisposeListener()\r\n        {\r\n            public", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "      type = Type()\n        type.name = \"string\"\n        type.format = TypeFormat(pretty=\"string\", advanced=\"text/plain\")\n        self.assertEqual(\"string\", type.get_sample())\n\n    def test_type_get_sample__return_default_", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "              new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "self._cluster_type = _cluster_type\n\nThis line sets the value of the instance variable '_cluster_type' to the value passed as an argument '_cluster_type'.\n\nThe '_cluster_type' variable is defined earlier in the class as:\n\nself._cluster_type = CL", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "=====================\n\ndef complete_flickr(request):\n    try:\n        frob = request.GET['frob']\n    except KeyError:\n        raise ValueError(\"Redirect back from Flickr did not include a frob\")\n\n    try:\n        token = call", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t} catch(InterruptedException e) {\n\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "    op = bytecode[k][2]\n      if op in (LOAD_CONST, LOAD_GLOBAL, LOAD_NAME, LOAD_ATTR, LOAD_FAST,\n                STORE_GLOBAL, STORE_NAME, STORE_FAST, DE", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "  List<DailyExpense> dailyExpenses = new ArrayList<>();\n    List<DailyExpense> dailyExpensesByCategory = new ArrayList<>();\n    List<DailyExpense> dailyExpensesByType = new ArrayList<>();\n    List<CreditCard> creditCards = new", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "=====================\n\nclass PlatformAdmin(admin.ModelAdmin):\n    \"\"\"\n    Platform Admin\n    \"\"\"\n    list_display = ('engine_name', 'subject', 'api_url', 'server_status', 'ci_status')\n    list_filter = ('engine_name',", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\tprivate void openCustomList(CustomListWithCount customList) {\n\t\tif (customList != null) {\n\t\t\tstartActivity(CustomListActivity.start(this, customList._id));\n\t\t}\n\t}\n\n\tprivate void openBarcodeSearch() {", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "=====================\n\ndef parse(self, ping_result: PingResult) -> PingStats:\n    \"\"\"\n    Parse ping result.\n\n    Args:\n        ping_result (PingResult):\n            The result of ping command execution.\n\n    Returns", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "          chat = new Chat(chatId);\r\n            Log.d(this.getClass().getSimpleName(), \"Chat not found in DB, creating new one\");\r\n        }\r\n\r\n        // Registering the fragment to receive notifications\r\n        ObservableRegistry.getObservable(this.getClass()).", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tgame = new Cubeshaft();\n\t\t\tgame.init();\n\t\t\tgame.start();\n\t\t\tgame.join();\n\t\t} catch (Exception e) {\n\t", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "account = account_for_facebook_user(fb_user, person=person)\n\nThis code is part of a Django web application that handles authentication and data retrieval from various social media platforms such as Facebook, Vimeo, Flickr, and TypePad. The code snippet you provided", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "      assertThat(qe, is(statement()));\n        assertThat(qe, is(batchStatement()));\n        assertThat(qe, is(isStatement()));\n        assertThat(qe, is(isBatchStatement()));\n        assertThat(qe, is(isStatementOrBatchStatement()));\n       ", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "  } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {\n      int percent = Integer.parseInt(Utils.getXmlNodeValue(doc, TAG_PERCENT));\n      if (percent >= 100) {\n       ", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "=====================\n\ndef merge_assembly_points(assembly_points_by_sources):\n==========================\n\nThis function takes a dictionary where keys are the source names and values are lists of assembly points from that source.\nThe function merges assembly points from different sources into a set of unique ones", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/ther", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "```python\n                        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n\n        return await ctx.send(embed=embed)\n```\nThis code is part", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onDone(Object... objects) {\n\t\t\t\t\t\t\tlong id = (long) objects[0", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "  private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /**\n     * Set of actions that can be performed on the calendar.\n     */\n    protected List<Action> actions = new ArrayList<>();\n\n    /**\n     * Set of actions that can be performed on the calendar.\n", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "      this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n    }\n", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "  VerifierProvider rsaLocator = new DefaultPublicKeyLocator(new IdentityServerDescriptorProvider());\n\n    VerifierProviders locators = new VerifierProviders();\n    locators.setVerifierProvider(SignatureAlgorithm.HS256, hmacLocator);\n    loc", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "  protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "              } catch (FilesNotFoundException e) {\n                    // expected\n                } catch (Exception e) {\n                    fail(e.getMessage());\n                }\n\n                client.deleteObject(containerName, fileName);\n            }\n\n            client.deleteContainer(", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    TrackHistoryEntry newEntry = new TrackHistoryEntry();\n                    newEntry.setTitle(liveInfo.getTitle());\n                    newEntry.setStationUuid(station.getUuid());\n                    newEntry.setStationIconUrl(station.getIconUrl());\n                ", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "ProjectsFragmentListener, StashesFragmentListener, StashSearchFragmentListener,\nPatternsFragmentListener, PatternSearchFragmentListener, QueuesFragmentListener,\nQueuedProjectFragmentListener, FavoritesFragmentListener {\n\n    @ViewById(R.id.drawer_layout)\n    Drawer", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (home.getStyle().getType() == Home.Style.Type.LANDSCAPE || home.getStyle().getType() == Home.Style.Type.SQUARE) {\r\n                            ((CandyBarMainActivity) mContext).setFragment(new HomeFragment());\r\n", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "=======================\n\ndef load_ipynb_url(url, proxies=None):\n    \"\"\"\n    Load Jupyter Notebook from a URL.\n    \"\"\"\n    import nbformat\n\n    if not proxies:\n        proxies = {}\n", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "\n    def items(self):\n        \"\"\" Returns a list of items in the playlist. \"\"\"\n        if self._items is None:\n            self._items = self.fetchItems('/playlist/%s/items' % self.ratingKey, cls=self.__class__)\n        return self", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "      self.assertEqual(\n            _environment_to_string({u\"i\": u\"j\"}),\n            u\"i={0}\\0\".format(u\"j\") + \"\\0\")\n\n    def test_type_check_for_environment_value(self):\n        self", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "=====================\n\ndef main():\n  \"\"\"Entry point for the repo command.\"\"\"\n  repodir = os.getcwd()\n  try:\n    name, gopts, argv = repo.__init__(repodir)\n  except SystemExit:\n    sys.exit(g", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "              // 执行前的监听器\n                for (RunnerTaskListener listener : runnerListenerList) {\n                    listener.onPreExecute(taskData);\n                }\n                // 执行后的监听器\n                for (RunnerTaskListener listener :", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "      entry = Entry.create(\"http://example.com\")\n        await r.after_headers(entry)\n        self.assertIsNone(entry.result.exception)\n\n    @async_test()\n    async def test_reject_status_code(self):\n        r =", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "      //保存用户信息到数据库\n        BaseInfoDao baseInfoDao = new BaseInfoDao(mContext);\n        baseInfoDao.add(\"stuXH\", stuXH);\n        baseInfoDao.add(\"stuName\", stuName);\n       ", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "\n    self.__device = device\n    self.__ip_version = ip_version\n    self.__logger = logger\n    self.__tc_command_output = tc_command_output\n    self.__export_path = export_path\n    self.__is_parse_filter_id = is", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "      except AttributeError:\n            return\n        state[\"inventory\"] = [mudobj_ref(i) for i in inv]\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        if isinstance", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "public Query visit(Ord4Search n, Query query) {\r\n    Operator op = orderOfOps.get(3);\r\n\r\n    if (op != Operator.PROXIMITY) {\r\n      return visitCheckForBoolean(new VisitOrd4(n), query);\r\n   ", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = false;\n\t}\n\n\t/**\n\t * This method generates the questionnaire according to the pipeline and the given parameters.\n\t * @param parameters : the parameters to generate the questionnaire from\n", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "\n        try {\r\n\r\n            PropertiesReader propertiesReader = new PropertiesReader(new File(propertiesFile));\r\n\r\n            String dataDir = propertiesReader.getTransactionLogDir();\r\n            String dataLogDir = propertiesReader.getDataLogDir();\r\n\r\n            if (dataLogDir == null", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "```python\nif __name__ == \"__main__\":\n  config = AliceConfig()\n  alice = Alice(config)\n  alice.start()\n  alice.link.run()\n```\nThis code sets up the logging, creates an Alice object, starts the various", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "      MovieCursor movieCursorById = new MovieCursor(cursorById);\n        assertEquals(movieRowId, movieCursorById.getId());\n        assertEquals(movieRowId, movieCursorById.getMovieMovieMoviedbId());\n        assertEquals(DataTestUtilities.MOVIE", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "      DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "      self.assertEqual(list(etree_iter_nodes(self.elem)), [])\n        self.assertEqual(list(etree_iter_nodes(self.elem, with_root=False)), [])\n        self.assertEqual(list(etree_iter_nodes(self.", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.main);\r\n\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(false);\r\n\t\tmap", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mush", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "=====================\n\nclass Cisco2960SwitchConfiguration(Port):\n    def __init__(self, name):\n        super(Cisco2960SwitchConfiguration, self).__init__(name)\n        self.vlans = []\n        self.ports = self.get", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutput", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "======================\n\n        if '|' not in retorno:\n            raise ErroRespostaSATInvalida(\n                    'Resposta não possui pipes '\n                    'separando os campos: {!r}'.format(retorno))\n\n", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "======================\n\n    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n\n    # Plot observed values\n    for sample_idx, sample_condition_dict in enumerate(sample_condition_dicts):", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "=====================\n\ndef initialize_rest_api(api, fdm, aircraft):\n    \"\"\"Initialize the REST API\n\n    Arguments:\n    api: a Flask-RESTful API object\n    fdm: an FDM object\n    aircraft: an Aircraft object\n", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "=====================\n\ndef get_wav_info(file_path: str) -> SoundFileInformation:\n    \"\"\"\n    Helper function to extract sound file information\n\n    Parameters\n    ----------\n    file_path: str\n        Path to the sound file\n\n    Returns\n    ", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "  private static final int[] CAMERA_FACING_COMPAT = {Camera.CameraInfo.CAMERA_FACING_BACK, Camera.CameraInfo.CAMERA_FACING_FRONT};\n\n    private static final Size[] CAMERA_PRE", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tprivate Util() {\n\t\t// empty\n\t}\n\n\tpublic static Util getInstance() {\n\t\treturn", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "      MongoConfiguration mongoConfiguration = MongoConfiguration.getInstance(project);\n        return mongoConfiguration.getServerConfigurations();\n    }\n\n    private void installActions() {\n        DefaultActionGroup actionGroup = new DefaultActionGroup();\n\n        actionGroup.add(new AddServer", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1(\"h1\", \"TodoMVC\")\n\t\t// Input(\"input\", \"text\", \"New todo\")\n\t\t//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "              new CropImageTask().execute(output);\n            }\n        });\n\n        /**\n         * Initialize dialogs.\n         */\n        newActionDialog = DialogManager.makeActionDialog(this, new ArrayList<ActionItem>(), \"Action Dialog\");\n        newActionDialog.", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "  @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n        mActivity = (MainActivity) getActivity();\n        mActivity.setTitle(R.string.songs);\n", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "  validate_key_condition(query_on, key)\n\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_single_hash_key_failure(model, index):\n    \"\"\"Single key condition: invalid comparison on hash", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "          GCActivitySet gcActivitySet,\n            GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivity);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String gcActivity", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "```python\n            '/properties':                  RestAppPropertys,\n            # Appinterface property endpoints\n            '/property/<int:appinterface_id>': RestAppProperty,\n            '/property':                    RestAppProperty,\n            '/properties':                  RestAppPropert", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "=====================\n        self.tree_view = tree_view\n        self.settings_ini = settings_ini\n        self.project_settings = ProjectSettingsDialog(self.settings_ini, self._directory)\n        self.project_settings.signalDirectoryCreated.connect(self.project", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    options = parser.parse_args()\n\n    initialize_cli(options)\n\n    if options.import_setting:\n        set_tc_from_file(\n            logger=logger,\n            config_file", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "  private final static TexturedModal MODAL_BACKGROUND = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n\n    private final static Color BORDER_COLOR = Color.of(0x33", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "      void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event move items\n     */\n    public interface ItemMovedListener {\n        /**\n         * Triggered when an item was moved\n         *\n         * @param item\n        ", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "  self._db_type = db_type\n    return self\n\nclass DbCloseMessage(BaseMessage):\n    def __init__(self, _orient_socket):\n        super(DbCloseMessage, self).__init__(_orient_socket)\n        self._append((FIELD_", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "          client.getBaseClient().upgrade(transport);\n            break;\n        }\n\n        case CONNECT: {\n            client.getBaseClient().setHandshakeData(packet.getData());\n            client.getBaseClient().setStore(storeFactory.getStore(client.", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "  private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tGenerator generator = setGenerator(pipeline.getGenerator());\n\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\t\n\t\tGenerationService generationService = new GenerationService(preprocessors, generator, postprocessors);\n\t\treturn generation", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "  PCollection<GCPProject> projects = pipeline.apply(\"Read projects\",\n        new LiveProjectSource(org));\n\n    // Convert projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        projects.apply", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "=====================\n\ndef test_session_create_table(session):\n    table_name = \"MyTable\"\n    model = MyModel()\n    request = create_table_request(table_name, model)\n    session.create_table(table_name, model)\n", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "              self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                          dim, vocab,\n                                                          dropout_type=\"per_unit\",\n                                                          compose_type=compose", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "\n    public ChatManager(ChatManagerCallback delegate)\n    {\n        _delegate = delegate;\n    }\n\n    public void start()\n    {\n        Contract.check(_delegate != null);\n\n        synchronized (_lockObject)\n        {\n            _id = _delegate.get", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "  private ProgressDialog progressDialog;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_video_pick);\n        Toolbar toolbar = (Toolbar) findViewById", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "  RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "```python\nif form.is_valid():\n    user = form.save(commit=False)\n    user.perfil = Perfil.objects.get(user=self.object)\n    user.save()\n    messages.success(request, 'Usuario creado", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setDensity(fog.density);\n        descriptor.setGradient(fog.gradient);\n        descriptor.setColor(fog.color", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic void close()\n\t{\n\t\tif(this.handle == null) return;\n\t\tthis.handle.close();\n\t\tthis.handle = null;\n\t\tall_open_handles.remove(this);\n\t}\n\t\n\tpublic void writeTo", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "  ActorInfoComponent plusActorInfoComponent();\n    ActorMoviesComponent plusActorMoviesComponent();\n    ActorDetailsComponent plusActorDetailsComponent();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t} catch (final PerfidixMethodCheckException e) {\n\t\t\tview.printErrorMessage(\"Method \" + e.getMethod()\n\t\t\t\t\t+ \" is not benchmarkable: \" + e.getMessage());\n\t\t\treturn false;\n\t\t", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "class DashboardView(TemplateView):\n    \"\"\"\n    Dashboard View\n    \"\"\"\n    template_name = 'dashboard/dashboard.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n       ", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo.getMoreSuitableEndpoint(endpointType);\n\t\t\tif (endpoint == null) {\n\t\t\t\tthrow new APIWrapperException(Error.NOT_SUITABLE_ENDPOINT_FOUND,\n\t\t\t\t\t\t", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "      if request.method == \"GET\":\n            planilla_modelo = request.GET.get(\"planilla_modelo\")\n            if planilla_modelo:\n                planilla_modelo = PlanillaModelo.objects.get(pk=planilla_modelo)", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "# self._cstr = TreeNode(kind=Expr.COMPARATOR, data=root.data)\n\nThis line of code creates a new TreeNode with kind COMPARATOR and data equal to the root node's data. This new TreeNode will be the root of the final constraint tree.", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);\n  private ActionSupportHandler<TransferAction>       transferActionSupportHandler       = new ActionSupportHandler<TransferAction>(TransferAction.class);\n  private ActionSupport", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "  assert_array_equal(fold([MIN_HASH_VALUE], 1), [0])\n\ndef test_sparse_to_dense():\n    \"\"\"Sparse to dense\"\"\"\n    # Testing with boolean fingerprints\n    sparse = np.array([[False,", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "\n@method(function('format-number', nargs=(3, 4),\n                 sequence_types=('xs:decimal?', 'xs:string', 'xs:string?', 'xs:string?')))\ndef evaluate_format_number_function(self, context=None):", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\n\t\tif model_item is None:\n\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel::flags\")\n\t\t\tprint(str(e))\n\t\t\treturn Qt.ItemIsEnabled\n\n\t\tif model_", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "=====================\n\nself.assertEqual(0, response)\n\nThis line of code is checking that the number of changes made during the hydration process is equal to 0. This is expected since no changes were made in the test cases provided.\n\nThe test cases cover the hydration of", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "       FASTDecoder decoder = DispatchLoader.loadDispatchReader(catBytes, PipeBundle.buildRingBuffers(new Pipe(new PipeConfig(clientConfig.getPreableBytes(), 0, catBytes, new MessageSchemaDynamic(new FieldReferenceOffsetManager(null,", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\n\n  to_map_and_back(DFO, DopplerPoly(1, 1, (", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "              hasJsonPath(\"$.hits.total.value\", equalTo(records.size())));\n    }\n\n    @Test\n    public void store_single() throws Exception {\n        SourceRecord record = SourceRecordHelper.getSourceRecordFromFile(\"responses/dab-record", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "=====================\n\nclass PubKeyV4(PubKey):\n    __ver__ = 4\n\n    @sdproperty\n    def created(self):\n        return self._created\n\n    @created.register(datetime)\n    def created_datetime(self, val):\n       ", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\t\tgeoJSONWriter = new GeoJSONWriter();\n\t}\n\n\t/**\n\t * Registers the request services\n\t */\n\tprivate void registerRequestServices() {\n\t\trequest", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        res = get(context);\n                    } catch (SQLException e) {\n                        context.put(ContextKeys.EXIT_STATUS, SQL_ERROR);\n                        addContextMessage(context, true, e.getMessage());\n                        context.<List<Throwable>>get(", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "url(r'^users/$', users_list, name='users-list'),\nurl(r'^users/new/$', new_user, name='new_user'),\nurl(r'^users/(?P<pk>[-\\w]+)/edit/$', edit_user,", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            startMixedActivity();\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"new_play_session\");\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        Intent intent =", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "  private DropDownMenu dropDownMenu;\n    private DropMenuAdapter dropMenuAdapter;\n    private FilterType[] filterTypes = {\n            new FilterType(\"筛选\", null),\n            new FilterType(\"类型\", FilterType.TYPE_DOUBLE, new String[]{\"心理", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "      obj.updateBuffImg();\n\n        # initialize block shape\n        obj.blockShape = BlockShape(obj);\n        obj.blockShape.reformArea();\n\n        # initialize block widget\n        obj.blockWidget = QtGui.QGraphicsView(obj.blockShape.block", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "=====================\n\n        alpha = XorDiff(d1, d2)\n        beta = XorDiff(d2, d3)\n        f = XDA(alpha)\n        result = self._find_preimage(f, beta)\n        assert result is not None\n", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformConstantNode(ConstantNode node);\n\t\tpublic abstract Node transformMultiConstantNode(MultiConstantNode node);\n\t\tpublic abstract Node transformAltern", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the commands\n\t\tgetCommand(\"help\").setExecutor(new CommandHelp());\n\t\tgetCommand(\"create\").setExecutor(new CommandCreate());\n\t\tgetCommand(\"delete\").setExecutor(new CommandDelete", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "      Challenge challenge = new Challenge(challengeData);\n        connection.sendPacket(challenge);\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        connection.sendPacket(new Success());\n    }\n\n    private void parseFailure(Element doc)", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "PiPermutation = PiPermutation(3)\nChaskeyPi = ChaskeyPi(3)\nHight = HightCipher(32)\nLea = LeaCipher(32)\nShacal1 = Shacal1Cipher(32", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "  private FastScroller mFastScroller;\n\n    private SongListAdapter mAdapter;\n\n    private List<Song> mSongList;\n\n    private int mSortOrder;\n\n    private boolean mShowToolbar;\n\n    private boolean mShowFastScroller;\n", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "          FlowAbsEffect flowAbsEffect = (FlowAbsEffect) effect;\n            if (flowAbsEffect.isInitialized()) {\n                try {\n                    flowAbsEffect.getGaussEffect().init(mSpectaculumView.getWidth(), mSpectaculumView.get", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "\nclass ESMHeader(Layer):\n    constructorList = [\n        Bit('EBT', ReprName='EPS Bearer Type', Pt=0, BitLen=4, Repr='hum'),\n        Bit('PD', ReprName='Protocol Discriminator', Pt=", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "          mSongListAdapter.notifyDataSetChanged();\n        }\n    };\n\n    public static ArtistFragment newInstance(Artist artist) {\n        ArtistFragment fragment = new ArtistFragment();\n        Bundle args = new Bundle();\n        args.putLong(PARAM_ARTIST", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "======================\n\ndef main():\n    \"\"\"\n    Main function for running the Montreal Forced Aligner\n\n    Parameters\n    ----------\n    args: argparse.Namespace\n        Command line arguments\n    \"\"\"\n\n    parser = argparse.ArgumentParser(description=\"Montreal Forced", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user.getUsername(), user.getPassword(),\n\t\t\t\tuser.getCallbackServiceUri(), user.getCallbackServiceWsdlUri(),\n\t\t\t\tuser.getCallback", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "\n    Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "  public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(message.properties());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.option", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "  assert almost_eq(erb(freq), bandwidth)\n\n  @p((\"freq\", \"Hz\"),\n     [(1000,),\n      (2000,),\n      (3000,),\n      (4000,),\n", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "=====================\n\ndef read_sequence(fp, is_implicit_VR, is_little_endian, bytelength, encoding, offset=0):\n    \"\"\"Read and return a Sequence -- i.e. a list of Datasets\"\"\"\n\n    seq = []", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "  try {\n      // resolve all expressions in the document\n      placeholderReplacer.resolveExpressions(document, proxyBuilder);\n\n      // walk through the document and call the custom methods of each ICommentProcessor\n      CoordinatesWalker walker = new CommentProcessorWalker(document, proxy", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "  protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatternsRequest(getActivity().getApplicationContext(), prefs, searchCriteria, page, pageSize);\n    }\n\n    @Override\n    protected void loadData(int page", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "=====================\n\n    @flags.register(NotationDataFlags)\n    def flags_notationdataflags(self, val):\n        self._flags += NotationDataFlags & val\n\n    @sdproperty\n    def value(self):\n        return self._value\n\n    @", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "```python\n        if self.chumopen:\n            self.addMessage(serverMsg, self.chum)\n            self.history.reset()\n            self.textInput.setText(\"\")\n            self.textInput.clearSelection()\n            self.textInput.setFocus", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "=====================\n\ndef check_args(args, fn_type, env):\n    if not isinstance(fn_type, Func):\n        raise TypeCheckError('Expected function type')\n\n    if len(fn_type.__args__) != len(args):\n        raise Signature", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "```python\nif isinstance(value, GregorianMonthDay):\n    return value\n\ntry:\n    if isinstance(value, UntypedAtomic):\n        return GregorianMonthDay.fromstring(value.value)\n    elif isinstance(value, (Date10", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "=====================\n\ndef fit_formation_energy(dbf, comps, phase_name, configuration, symmetry, datasets, ridge_alpha=None, aicc_phase_penalty=None, features=None):\n    \"\"\"\n    Find suitable linear model parameters for the given phase", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n    // TODO: API level lower that certain, will disable vpaid.\n    if (Util.SDK_INT", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "          PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type == 0) {\r\n            ProximitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 9 || type == 0", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "  @FormUrlEncoded\n    Call<Suggestions> suggest(@FieldMap Map<String, String> serviceIds,\n                               @Field(\"query\") String query,\n                               @Field(\"limit\") int limit);\n\n    @GET(\"anonid\")\n    Call<Anon", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "\n    def create_table(self, model):\n        \"\"\"Create a new table for the given model.\n\n        :param model: The model to create a table for.\n        :raises bloop.exceptions.TableMismatch: if the table already exists and does not match the", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    main()\n```\nThis code defines several classes and functions for loading, evaluating, and training machine learning models using the Audeep backend. The main functionality is provided by the `CrossValidatedEvaluation` and `Partition", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t/**", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "=====================\n\n    def __enter__(self):\n        self.client.__enter__()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.client.__exit__(exc_type, exc_value, traceback)", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "=====================\n\n    @scoped_subgraph\n    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences and the hidden representation of the input sequences as\n       ", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\nclass PlatformAdmin(admin.ModelAdmin):\n    list_display = ('engine_name', 'subject', 'api_url', 'platform_slug')\n    list", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "  public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeRestriction node) {", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "      final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Method\");\n        table.addHeader(\"Class\");\n        table.addHeader(\"Mean\");\n        table.addHeader(\"StdDev\");\n        table.addHeader(\"Min\");\n        table", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "    self.loop_starts = []\n      self.loop_ends = []\n      self.loop_parents = []\n      self.loop_children = []\n      self.loop_depths = []\n      self.loop_stack = []\n      self.loop_stack_depth", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.traindata, this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.out.println(\"Unknown tree type\");", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "======================\n\ndef parse_datetime_marker(marker, dt, lang=None):\n    \"\"\"\n    Parse a datetime marker and return the corresponding formatted string.\n\n    :param marker: the marker string.\n    :param dt: the datetime object.\n    :param lang:", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    else if (Event.EVENT_TYPE_MESSAGE.equals(event.type)) {\n                        Message message = JsonUtils.toMessage(event.content);\n                        if (message.isCallEvent()) {\n                            if (Event.EVENT_TYPE_CALL_INVITE", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilter = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\t// PostProcessing\n\tprivate FOTableColumnPostprocessorFake foTableColumn = new FOTableColumnPostprocessorFake();\n\t\n", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "      DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationPlanning(self, _):\n        site = self.GetSelectedSite()\n        debut = str2date(self.planning_debut.Get", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "=====================\n\n    J_am = self.compute_angular_momentum_jacobian(p)\n    H_am = crosstens(I) + dot(J_am.T, self.compute_angular_momentum_hessian(p) *", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "      View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n            name.setText(queuedProjectResult.queuedProject.name);\n            author.setText(queuedProjectResult.queuedProject.pattern.pattern", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "              new MigrateCommand());\n        // Register listeners\n        Sponge.getEventManager().registerListeners(this, new LoanListener(this));\n        // Register the currency service\n        currencyEconService = new CurrencyService();\n        // Register the currency service\n        game", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "```python\n        prior_specs = build_prior_specs(prior, params)\n```\nThis line of code builds the prior specs for each symbol based on the given prior and initial parameters. The `build_prior_specs` function takes a prior specification", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "    return Const.fromValue(arg[0])\n    elif op == LOAD_NAME:\n      return Ref.fromName(arg[0])\n    elif op == LOAD_ATTR:\n      return Ref.fromName(arg[0])\n    elif op == LOAD_SUB", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Physics physics;\n\n\tpublic ClientMaster(String entityBasePath, String mapBasePath, String xmlBasePath, String skinBasePath, String gamepadBasePath) {\n\t\tsuper(entityBasePath);\n\t\tthis.res = new ResourceLoader(new FileLocation", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView tview = new Temp", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> getAuthorsWithBooks() {\n\t\tList<AuthorWithBooks> authorsWithBooks = new ArrayList<>();\n\t\tjdbcTemplate.query(\"SELECT AUTHOR.*, BOOK.* FROM AUTHOR LEFT OUTER JOIN BOOK ON", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(Class<T> rootClass) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass);\n\t\tthis.rootQuery = new SQLQuery(schema, null, SQLAction.SELECT, false, null);\n\t}\n\n\tpublic SQL", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "#         install_and_run(DYNAMIC_TOOL_DIR, file_path, app_info['packagename'], app_info['mainactivity'], True)\n        install_and_run(DYNAMIC_TOOL_DIR, file_path, app_info", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "  List<Genotype> parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return risks.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into risks\n     */\n", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "              Symbol.typed(bar_type, 'bar'),\n                Keyword('baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_record_infer():\n    inc", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "      PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        // query with StringMatcher\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, query(startsWith(\"...\")));\n", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "=======================\n\n\t\t\tif type(selection[0]) is CalcSheetAnalysis:\n\t\t\t\tself._viewWidget.set_calc_sheet_view(selection[0])\n\t\t\t\tself._ribbon_widget.setCurrentIndex(5)\n\t\t", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            return new NotFoundException(cause);\n                        case 409:\n                            return new APIIncorrectException(cause);\n                        default:\n                            return cause;\n                    }\n                }\n                return cause;\n            }\n        };", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t}\r\n\r\n\tpublic void registerRenderer(Class<?> clazz, Renderer<?> renderer) {\r\n\t\trenderer.setEngine(this);\r\n\t\trenderer.setErrorHandler(errorHandler);\r\n\t", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_LOWERCASE, false)) {\n\t\t\tlabelFactory = new LowerCase", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "\n    url(r'^(?P<pipeline_id>[0-9a-f-]+)/$', PipelineDetailView.as_view(), name=\"pipeline-detail\"),\n\n    url(r'^(?P<pipeline_id>[0-9a-", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        startActivity(intent);\r\n                    } catch (Exception e) {\r\n                        LogUtil.e(Log.getStackTraceString(e));\r\n                    }\r\n                } else {\r\n                   ", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "access_token = call_vimeo('vimeo.auth.getToken', token=access_token)\n\ndef signin_mlkshk(request):\n    # TODO: implement OAuth signin for mlkshk\n    pass\n\n\ndef signin_t", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "              pointing, mag = xyToRaDecPP(platepar, [x_mean, y_mean], [test_px_sum], jd=platepar.JD, \\\n                    catalog_stars=None, img_stars=None, measurement=", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "=====================\ngrid = gen_grid(data, options)\n=====================\n\n    # Compute likelihood across of parameters defined by grid\n    likelihood = grid_likelihood(data, options, grid)\n\n    # Apply priors to likelihood surface\n    posterior = apply_priors", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "          UIDialog.getDicesDialog(true);\n          }\n        Board.this.addActor(rollBtn);\n        Board.this.addActor(doubleBtn);\n      }\n    });\n    rollBtn.setX(getX() + (boardbg.getWidth()", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "=====================\n\n        self.assertEqual(list(etree_iter_paths(root)), [\n            (root, '/a'),\n            (root.tag, '/a/@tag'),\n            (root[0], '/a/b1'),\n            (root[0].tag", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "      self.runner.add(self.rule, with_child=True)\n\n    @patch(\"hammertime.rules.status.SimilarPathGenerator\")\n    @patch(\"hammertime.rules.status.SignatureComparator\")\n    @patch(\"hammertime.rules.status", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "```python\ncfe_cancelamento = CFeCancelamento(\n        chCanc='CFe1234567890123456789012345678901234567890',", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "  List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a list of ancestries.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a list", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "          EtsiResponse resp = this.client.sendRequest(req);\n            \n            if (resp.getStatus().getStatusCode() != 200) {\n                System.out.println(\"Signature request failed: \" + resp.getStatus().getStatusCode());\n                this", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\n\t\telif type(obj) is Analysis:\n\t\t\treturn get_icon(\"analysis\")\n\t\telif type(obj) is Brush:\n\t\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "          RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 13", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<PlayerOverview> playerOverviews;\n\t\n\tpublic Team(String teamName) throws TeamNotFoundException {\n\t\ttry {\n\t\t\tString url = sourceBaseUrl + \"/teams/summary/\" + currentSeason + \"/\" + teamName.toLowerCase() +", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "      FeedbackUseCase feedbackUseCase = FeedbackUseCase.Companion.getInstance();\n        feedbackUseCase.sendFeedback(userFeedback, new Function1<Feedback, Unit>() {\n            @Override\n            public Unit invoke(Feedback feedback) {\n               ", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "```python\n            table_index[table_name] = table_index.get(table_name, [])\n            object_index[key] = object_index.get(key, [])\n            request[table_name] = request.get(table_name, {})\n", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "              art = draw_art(\n                    key_size=len(key['key'])*2,\n                    key_algo='RSA',\n                    key_fpr=fingerprint,\n                    color=True,\n                    longid=False\n               ", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "=======================\n\n    def ativar_sat(self, tipo_certificado, cnpj, codigo_uf):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.ativar_sat`.\n\n        :", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "```python\ndef test_node_document_uri_function(self):\n    xml_test = '<A xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:base=\"http://example.com/\" />'\n    self.", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case DURATION_", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "======================\nself.logger.info(f\"Initializing training for {self.identifier}...\")\n\nThis line initializes the training process by logging an informational message to the logger. The message includes the identifier of the training process. This is typically used to differentiate between different training runs in", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "  private final OAuth2Requester requester = new OAuth2Requester(httpClient);\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "  private final Jobs jobs;\n    private final Vms vms;\n    private final Errands errands;\n\n    public SpringDirectorClient(URI root, RestTemplate restTemplate) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(rest", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "public void requestUpdate() {\n    synchronized (_lockObject) {\n        if (_state.getConnectionState() != FittingConnectionState.CONNECTED) {\n            _listener.fittingConnectionManagerStateChanged(FittingConnectionManagerState.EMPTY);\n            return;\n        }\n        _", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "      return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n     * {@inheritDoc", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "  public void onMessageAdded(ChatMessageAddedEvent event) {\n        if (channel.equals(event.getChannel())) {\n            this.setStatus(ChannelStatus.UNREAD);\n        }\n    }\n\n    @Subscribe\n    public void onMessageDeleted(ChatMessageDeleted", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "        DATA[looptest], EPSILON, FiniteDifferenceSchemes.SYMMETRICAL);\n        DoubleSad sadCall = BlackFormula2.price_Sad(DATA[looptest][0], DATA[looptest][1], DATA[looptest][2], DATA", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "          VotingModule.class\n    };\n\n\n    /**\n     * Map of module names to instances\n     */\n    private static HashMap<String, Module> modules = new HashMap<String, Module>();\n\n\n    /**\n     * Load all modules\n     */\n    public ModuleLoader", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "=======================================\n\npublic static DownloadQueue newDownloadQueue() {\n    return newDownloadQueue(3);\n}\n\n/**\n * Create a new download queue.\n *\n * @param threadPoolSize thread pool size.\n * @return {@link DownloadQueue}.\n * @see #", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "public void init(MutableConfig config) {\n    config.set(\"pluginDir\", ProConf.class, this::pluginDir);\n    config.set(\"currentDir\", ProConf.class, this::currentDir);\n  }\n\n  private Path currentDir() {\n    return", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "=======================\nprivate QuerySetConfig parseQuerySetConfigTag(Element element) {\n    QuerySetConfig querySetConfig = new QuerySetConfig();\n    NodeList querySetNodes = getAllChildNodes(element, QUERY_SET_CONFIG_TAG);\n    for (Node querySet", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "======================\n\nThe code above is a Python script that performs web scraping and data processing tasks for various online judge websites, including HDU, PKU, ZOJ, BZOJ, BNUVJ, and HUST. The script uses multiple threads to perform the web scraping tasks", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "=====================\n\nself.robot.ik.add(left_foot_task)\n\nif self.cur_stance.right_foot is not None:\nright_foot_task = ContactTask(\nself.robot, self.robot.right_foot, self.cur", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "\n@settings(max_examples=100)\n@given(integers(min_value=MIN_SIZE, max_value=MAX_SIZE))\ndef test_simple_operations(x):\n    \"\"\"Test simple operations.\"\"\"\n    for op in simple_op:\n", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG).setType(\"ICC_PROFILE\").encode(aOutput).log(aLog);\n\t\t\taOutput.write(aJPEG.mICCProfile.getData());\n\t\t}\n\n\t\tnew SOFSeg", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "          if (sl == null) {\n                JOptionPane.showMessageDialog(this,\n                        \"Keine Sammellastschrift ausgewählt.\",\n                        \"Fehler\", JOptionPane.ERROR_MESSAGE);\n                return;\n            }\n\n           ", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "====================\n\nclass PretrainedAligner(TopLevelMfaWorker):\n    \"\"\"\n    Class for aligning audio files with pretrained acoustic models and dictionaries\n\n    Parameters\n    ----------\n    data_source: :class:`~montreal_forced_aligner.data.", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "      Lore lore = LoreLoader.getLore(category, ident);\n\n        if (lore == null) {\n            return;\n        }\n\n        ItemStack stack = new ItemStack(ItemLorePage.class);\n        ItemLorePage.setLore", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "  private final UserDAO userDAO;\n    private final BudgetDAO budgetDAO;\n    private final CategoryDAO categoryDAO;\n    private final BudgetTypeDAO budgetTypeDAO;\n    private final RecurringDAO recurringDAO;\n    private final", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "public static Util getInstance() {\n\treturn instance;\n}\n\n\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static Logger getLogger() {\n\t", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "  FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadeOutUp.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInY", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "      problem = SearchSkCh(ch, der_mode=der_mode, initial_constraints=[BvComp(ch.ch_weight, initial_weight)])\n\n    if verbose_level >= 1:\n        smart_print(\"Derivative mode: {}\".format(", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "=====================\n\n    def test_hosts_container(self):\n        hosts = HostsContainer({\n            'local': [LocalHost1(), LocalHost2()],\n            'local-ssh': [LocalSSHHost1(), LocalSSHHost2()],\n        })", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "      return (\n            command.startswith(self.get_tc_command(TcSubCommand.CLASS))\n            or command.startswith(self.get_tc_command(TcSubCommand.FILTER))\n            or command.startswith(self.get_tc", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "=====================\n\n  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "  public List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n\n        Cursor cursor = db.query(ExpenseManagerContract.", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "  private TextView monthTitleTextView;\n\n    private TextView yearTextView;\n\n    private TextView weekDayTextView;\n\n    private TextView dayOfWeekTextView;\n\n    private TextView dayOfMonthTextView;\n\n    private TextView monthOfYearTextView;\n\n    private", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "```python\nclass TestWhiteNoise(object):\n\n  def test_no_input(self):\n    my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25)\n```\nThis is", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "=====================\n\ndef unify(t1, t2, backref=None):\n    \"\"\"Unify `t1` to match `t2`\n\n    After unification `t1` should be equal to `t2` or `t1` would be\n    a sub", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "```python\n        self.auth = Auth()\n        self.sync_modules = []\n        self.last_refresh = int(time.time())\n        self.motion_interval = DEFAULT_MOTION_INTERVAL\n        self.urls = BlinkURLHandler()\n       ", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "=======================\n\nclass DocumentModelItem(QObject):\n\tdef __init__(self, data, parent=None, children=None):\n\t\tsuper().__init__()\n\t\tself._data = data\n\t\tself._parent = parent\n\t\tself._children = children", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "=======================\n\ndef main():\n  \"\"\"Entry point for the application.\"\"\"\n  logging.basicConfig(level=logging.DEBUG)\n  props = PropertiesFromFile('application.conf')\n  props.setProperty('scales.socket.endpoint.host', 'localhost')\n  props", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "      ProcessRuntime runtime = parseThreadDump(err.toString());\n        ProcessThread thread = runtime.getThreads().where(nameIs(\"remotely-observed-thread\")).get();\n\n        // Check thread status\n        assertThat(thread.getThreadStatus().isRunnable", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "      return data;\n    }\n\n    private static DrumStoreEntry<PLDTestData, ?> createNewData(long key, DrumOperation operation, long... neighbors) {\n        InMemoryEntry<PLDTestData, ?> data = new InMemoryEntry<>();\n        data.set", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "      MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "      RoxanaProperties roxanaProperties = new RoxanaProperties();\n        RoxanaPropertiesMockBuilder roxanaPropertiesMockBuilder = new RoxanaPropertiesMockBuilder();\n        roxanaPropertiesMockBuilder.withLocale(Locale.CANADA)\n                .withSuppressF", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "  self._socket.write(self._ping_msg)\n\n  def _CheckInitialConnection(self):\n    \"\"\"Checks if the connection is still alive.\"\"\"\n    self._log.debug('Checking initial connection.')\n    self._socket.write(self._ping_msg)", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "    assert abs(freq2lag(lag2freq(v)) - v) < 1e-12\n\n\nclass TestAlmostEq(object):\n  table = [\n    ([1, 2, 3], [1, 2, 3], 32", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "          Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "======================\n\nclass ConfigCog(commands.Cog):\n\n    _cache = dict()\n    by_guild = dict()\n\n\n    def __init__(self, bot):\n        self.bot = bot\n        self.dbi = bot.dbi\n       ", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "  if self.symbol == 'eq':\n        return numeric_equal(*operands)\n    elif self.symbol == 'ne':\n        return numeric_not_equal(*operands)\n    elif self.symbol == 'lt':\n        return numeric_not_equal(*oper", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "      welcomeString.setText(getResources().getString(R.string.welcome_message, getResources().getString(R.string.app_name)));\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEventParents", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "          // Open the chat activity\n            try {\n                InviteToChatFragment fragment = (InviteToChatFragment) classToNotify.newInstance();\n                fragment.startChat(newChatId);\n                getActivity().getSupportFragmentManager().beginTransaction()\n                        .", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "      UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        LOG.info(\"response: {}\", JSON.toJSONString(response));\n        Assert.assertEquals(\"SUCCESS\", response.getResultCode());\n        String prepayId = response.getPrepayId();\n       ", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "      MessageMapperEnum messageMapperEnum = mock(MessageMapperEnum.class);\n        when(messageMapperEnum.getKey()).thenReturn(Translator.getInterpolatedKeyOf(messageMapperEnum.getClass().getName() + \".\" + messageMapperEnum.name()));\n        when(messageMapper", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\t\tint d1 = in.read1();\n\t\tint tag = d1 & 0x07;\n\t\tif (tag == CODEINT4_TAG) {\n\t\t\treturn readSmallIntValue(d1);\n\t\t} else {\n\t\t\t", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "=======================\n\nself.management = management.Management(self)\nself.quota = quota.Quotas(self)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "\n        parser_class_list += [\n            MacOsPingParser,\n            AlpineLinuxPingParser,\n        ]\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class()\n                break", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "      Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate.getText()));\n        }\r\n\r\n        // set video properties\r\n        if (Integer.parseInt(m.videoSetWidth.getText()) > 0 && Integer.parseInt(m.videoSetHeight.", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "          self._probe = probe\n        else:\n            self._probe = load_probe(kwargs.pop('probe_file', None))\n        self._kwargs = kwargs\n        self._logger = logging.getLogger(__name__)\n        self._logger.setLevel(logging.INFO)\n", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "  @Override\n    public final Promise<Channel> connect(final TransportContext context, final ChannelHandler handler, final boolean reconnect) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n        if (handler == null) {\n", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "    self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def analyze(self):\n    \"\"\"\n      Performs the bytecode analysis.\n    \"\"\"\n    self._blocks = []\n    self._block_idx_map = {}\n    self._", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "      ObservableRegistry.getObservable(this.getClass()).register(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "public void visit(final InExp inExp) throws QueryException {\n    final Column column = (Column) inExp.getColumn();\n    if (column == null)\n      throw new QueryGrammarException(\"Cannot apply IN on a NULL column\");\n\n    result.append(OPEN_", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile inputFile = new File(basePath + \"/input/ddi-simple.xml\");\n\t\t\tFile outputFile = new File(basePath + \"/output/ddi-simple.xml\");\n\t\t\tFile xformsFile = new File(basePath + \"/output", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "      self.assertEqual(\n            Normal(mu=0.0, sigma=1.0).draw(10),\n            np.random.normal(loc=0.0, scale=1.0, size=10),\n        )\n\n        self.assertEqual(\n           ", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "      state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpad state\n\n        state = stateFactory.createState(VpadState.class);", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(BooleanTag tag, boolean value) throws InvalidValueException {\n\t\tif (isValid(tag).isRequired()) {\n\t\t\tif (value) {\n\t\t\t\tisValid(tag).setValid();\n\t\t\t} else {\n\t\t\t\t", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "=======================\n\ndef test_replace_blank_name(self):\n        self.assertEqual(\"Your child\", replace_blank_name(name=None, language=\"English\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name=\"\", language=\"English\"))\n        self", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        expect(systemUnderTestMock.nonVoidFailWithParameter(GIVEN_STRING)).andThrow(\n                                new ExpectedException(EXPECTED_ERROR_MESSAGE));\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown =", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "\n# Define the different RestOctets\n#\n# P1RestOctets\nclass P1RestOctets(RestOctets):\n    # name for the RestOctets\n    CallName = 'P1_RestOctets'\n    # name for the RestOctets\n    Repr", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "```python\n        if not skip_table_setup:\n            self.create_table(model)\n            self.validate_table(model)\n```\n\n        # Bind all subclasses\n        for subclass in walk_subclasses(model):\n            self.bind(", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "======================\n\n    return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesS", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "```python\ndef test_bind_non_model(engine):\n    with pytest.raises(TypeError):\n        engine.bind(int)\n```\n\nThis test checks that attempting to bind a non-model object to the engine raises a TypeError.\n\ndef test", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "=====================\n\nu7 = Unit(\"Msun/pc**3\")\nassert u7.dimensions == mass/length**3\nassert u7.base_value == 1.0 / m_per_pc**3\n\n# Test invalid strings\nwith pytest.raises", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "=====================\n\n['Verify instance command references --no, returns paths, explicit ns',\n ['references', 'TST_Person.name=\"Mike\"', '--namespace', 'root/cimv2', '--no'],\n {'stdout': ['\"root/cimv2", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "      loadModules();\n        // Register listeners\n        event.getRegistry().registerListeners(this);\n        // Register commands\n        CommandLoader.registerCommands(container, messageStorage, new BalanceCommand(), new CurrencyCommand(), new PayCommand(),\n                new AddCommand(), new RemoveCommand(),", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "      tag = TAG()\n        if index == -1:\n            self._call_fmod(\"FMOD_Sound_GetTags\", byref(tag), len(name))\n            if tag.datalen > 0:\n                tag.name = name\n                tag", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    public void startEditActivity(DomainObject domainObject, int titleResId, int okButtonResId, int cancelButtonResId) {\n                        startActivityForResult(EditActivity.getIntent(MainActivity.this, titleResId, domainObject,\n                                new AccountEdit", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<GalleryItemProxy>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\t", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "      resource = ThermometerResource(aircraft.sensors.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.sensors.thermometer.temperature, thermometer_data[\"temperature\"], 3)", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "```python\ndef test_ref_value_path(reference_tracker):\n    \"\"\"has path, value not dumped\"\"\"\n    column = User.age[\"foo\"]\n    value = 3\n    expected_ref = \"#n0.#n1\"\n    expected_action", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "          Platform.runLater(new Runnable() {\r\n\t\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\t\tpublic void run() {\r\n\t\t                    progressDialog.showAndWait();\r\n\t\t                    progressDialog.close();\r\n\t\t\t\t", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "=====================\n        if request.method == 'POST':\n            form = self.form_class(request.POST)\n            if form.is_valid():\n                comment = form.save(commit=False)\n                comment.post = post\n                comment.user =", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "  Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a list of trending terms, which are the most popular search terms\n     *\n     * @param serviceIds a {@link Map} of a", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "          disconnectFromWifi(mWifiManager);\n            of(mConnectionSuccessListener).ifPresent(connectionSuccessListener -> connectionSuccessListener.failed(connectionErrorCode));\n            wifiLog(\"CONNECTION FAILED: \" + connectionErrorCode);\n        }\n    };\n\n    @NonNull", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "          LightSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type == 0) {\r", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack.getArchivedCards()) {", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "=====================\n\nclass SegmentVadArguments(NamedTuple):\n    \"\"\"\n    Arguments for :class:`SegmentVadFunction`\n\n    Parameters\n    ----------\n    vad_path: str\n        Path to VAD output\n    segmentation_options: :class:`~", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "  private final Deployments deployments;\n    private final Errands errands;\n    private final Jobs jobs;\n    private final Vms vms;\n\n    public SpringDirectorClient(URI root, RestTemplate restTemplate) {\n        this.restTemplate = restTemplate;\n", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "      self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag), name, len(name))\n        if name is None:\n            return [tag for tag in self.tags if tag.updated]\n        elif tag.type == name:\n            tag", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "          self.process_template(bufr_message, bit_writer, bufr_message.template)\n\n        if wire_template_data:\n            bufr_message.wire()\n\n        return bit_writer.get_bytes(nbytes_write)\n\n    def process", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "=====================\n\nform = ReportAbuseForm(request.POST)\n\nif form.is_valid():\n    abuse_comment = form.cleaned_data['comments']\n    report = AbuseReport.objects.create(\n        logged_against=logged_against", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "  public void listenToResultSet(final BenchmarkMethod paramMethod, final AbstractMeter paramMeter, final double paramData) {\n        final BenchmarkResult benchmarkResult = (BenchmarkResult) getRelatedElement();\n        final Class<?> clazz = paramMethod.get", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "      ApplicationOptions options = factory.createProtTestArgumentParser(args, null).getApplicationOptions();\n\n        // Initializing the logger\n        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();\n        logger.setStdHandlerLevel(Level.INFO);\n        logger.add", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "              listaDeRespostas.getPropriedades().getEstado() != EstadoDaListaDeRespostas.FINALIZADA) {\n\t\t\t//Verificando se a questão já foi respondida pelo aluno\n\t\t\tQuestao questao = questao", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tif (code == 200) {\n\t\t\t\t\tadapter = new PageViewPagerAdapter<ProgramTrack>(ProgramTrack.class);\n\t\t\t\t\tadapter.", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "  AdInterface adInterface;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    CuePointsRetriever cuePointsRetriever;\n\n    @Mock\n    PlayerUIController controller;\n\n    @Mock\n    PlayerAdLog", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tPlatform.exit();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// initialize the client\n\t\t\tclient = new Drive.Builder(httpTransport, JSON_FACTORY, null)\n\t\t\t\t\t.setApplicationName", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "  String className = adapterName(ClassName.get(type), INJECT_ADAPTER_SUFFIX);\n    TypeSpec.Builder builder = TypeSpec.classBuilder(className)\n        .addJavadoc(bindingTypeDocs(type))\n        .addSuperinterface(Binding.", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "          new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        */\r\n         * 打开/关闭透传消息\r\n         * @param enable 打开/关闭\r\n         */\r\n        public static void enableReceiveNormal", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "======================\n\n  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNAV message test\n  '''\n  parser = prepareArgsParser()\n  params", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "\n@method(function('id', nargs=(1), sequence_types=('xs:string', 'xs:anyURI')))\ndef evaluate_id_function(self, context=None):\n    if context is None:\n        raise self.missing_context()\n    elif not self", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "=====================\n\ndef last_record(table, fill=False):\n\"\"\"\nReturn the last record of the table\n\n:param table: a Table.\n:param fill: True if empty values have to be replaced with NaN\n:return: Generator with each record as a dictionary\n", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "              TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n            else if (message.getType() == MessageType.USER_INFO_REQUEST)\n            {\n                UserInfoRequestMessage m = (", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "=====================\n\n\t\tTvalues_A = glm_cosinor(data, time_var, exog = EXOG, dmy_covariates = dmy_covariates, rand_array = None, interaction_var = None, period = period, calc_ME", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "      main.join();\n        assertThat(main.getStatus(), equalTo(ThreadStatus.TERMINATED));\n    }\n\n    @Test\n    public void busyWaitingWithLock() {\n        ThreadDumpThread main = sut.thread(\"main\");\n        ThreadDumpThread", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "              DatePicker datePicker = new DatePicker(this, DatePicker.DATE_TIME);\n                datePicker.setOnDatePickListener(new DatePicker.OnAllPickListener() {\n                    @Override\n                    public void onDatePicked(int year, int month", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "          GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0)", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "  private SetOtherFragment setOtherFragment;\n\n    private ViewPager mViewPager;\n    private TabLayout tabLayout;\n\n    private List<Fragment> fragmentList = new ArrayList<>();\n    private List<String> titleList = new ArrayList<>();\n\n    @Override\n    protected", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "```python\nself.tracerouter = Tracerouter()\n```\n\nThis line creates a new instance of the Tracerouter class. The Tracerouter class is a thread that runs in the background and performs traceroutes to various IP addresses. It uses the get_from_queue()", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "```python\nassert isinstance(deltas.deltas[4].attributes, Thread)\n```\nThis line of code checks if the fifth delta's attributes are of type Thread.\n\nThe error message suggests that the fifth delta's attributes are of type Label instead.\n\nTo", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "  @property\n    def outbox(self):\n        return Outbox(self)\n\n    def is_opensource_api(self):\n        return self.account.provider == \"opensource\"\n\n    def _get_resource(self, cls, id):\n        if id", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "  activityLightLevelManager = new ActivityLightLevelManager(this, activityLightLevelChanger);\n\n    // Set up the UI\n    setContentView(R.layout.activity_dynamic_star_map);\n\n    // Set up the UI elements\n    cancelSearchButton = (ImageButton", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "======================\nnon_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n======================\n\n        lnlike = multi_", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "          ID(Val='IMSI', Type='IMSI', Trans=True), ])\r\n        self._post_init(with_options, **kwargs)\r\n\r\n\r\n# section 9.2.13\r\nclass LOCATION_UPDATING_ACCEPT(Layer", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "```python\n        TcClassParser(self.__con).parse(device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output))\n```\nThis line of code parses the TC class configuration using the `TcClassParser`", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    import pandas as pd\n    import numpy as np\n    import time\n\n    np.random.seed(123)\n    df = pd.DataFrame(np.random.rand(100, ", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "```python\n@validation_error(SwaggerMappingError)\ndef validate_response(response, validator_map):\n```\n\nThis line of code is decorating the `validate_response` function with the `validation_error` decorator. The decorator is expecting an exception class", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
