{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tMobile m = p.", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tself._init(graph)\n\t\t\tA = self.best(root)\n\t\t\tsolutions.append(A)\n\t\t\tself._init(graph)\n\t\t\te, d = self.next(A, Y_, Z)\n\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "if __name__ == '__main__':\n    TestSndfile.main()\n# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4\n# End of code.", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def get_subtitle_status(self, language):\n        \"\"\"\n        Get the status of the subtitle for the given language.\n        \"\"\"\n        status_tag = self.get_element_by_css_selector(\n            self._STATUS_TAGS, filter=lambda", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t\twriter.addAttribute(\"label\", styleValue.getLabel());\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n#begin\n\nclass _AnswerData(_QAData):\n    def ask_string(self):\n        return self.answer\n    def hint_string(self):\n        return self.answer\nclass _AnswerDataWithHint(_AnswerData):\n    def __init__(", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    mob.Target = new SR_TargetLocation(RuneAcc, mob);\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc,", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "          for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n        }\n        s.println(\"***\");\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLIENT\n *\n * This", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "          try {\n                sp = new JESpace (name, path);\n                spaceRegistrar.put (name, sp);\n            } catch (SpaceError e) {\n                throw new RuntimeException (e);\n            }\n        }\n        return sp;\n   ", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tRedButton btnImpact = new RedButton(Messages.get(this, \"impact\")) {\n\t\t\t\t@Override\n\t\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "# Create a dispatcher instance\ndispatcher = SoapDispatcher(__name__, __version__)\n# Register methods\ndispatcher.register_method(MyMethod)\n# Create a server instance\nserver = HTTPServer(('localhost', 8000), WSGISOAPHandler(dispatcher", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "  def lock_status(self, status_id):\n        self.statuses_lock[status_id] = True\n        self.webview.lock_status(status_id)\n\n    def unlock_status(self, status_id):\n        if self.statuses_", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "def action_copy_between_sftp(self, status_id, params, session):\n    return self.get_process_data(CopyBetweenSftp, status_id, params, session)\n\nThis is a method for copying files between two SFTP servers. It", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsInstanceOf<SecurityException> (c.GetType (), \"ExceptionType\");\n\t\t\tAssert.IsNotNull (c.InnerException, \"InnerException\");\n\t\t", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "# This is the main function that sets up the SSLContext and returns a socket\n# that can be used to connect to a remote server.\ndef create_ssl_context(keyfile, certfile, ca_certs=None):\n    context = _get_ssl_context()\n    context", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "      DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "      self.__tmp_dir, 'datastream.pipe')\n        self.__datastream_transport, self.__datastream_protocol = await self.__event_loop.create_connection(\n            lambda: DataStreamProtocol(self.__event_loop), self.__datastream_address", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.Value[iter, 0]);\n\t\t\t\t\t//update database\n\t\t\t\t\t//...\n\t\t\t\t}\n\t\t\t}", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "      String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] != null) {\n                String argName = args[i].getName();\n                String argValue =", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}));\n\t\tprivate ConfigFile configFile;\n\t\tprivate File(ConfigFile configFile)\n\t\t{\n\t\t\tthis.configFile = configFile;\n\t\t}\n\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE, \"Auto save\",\n\t\t\t\t\t\tget", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "              if (m_Owner.Caster.Party != null)\n                {\n                    foreach (Mobile m in m_Owner.Caster.Party.Members)\n                    {\n                        if (m != m_Owner && m.InRange(m_Owner.", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "# The following code is used to ensure that the Session's identity map\n# is properly populated when an object is loaded from the database.\n# It's a bit complex, but it's necessary to ensure that the Session\n# can properly track the state of objects as they are loaded from the", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tnamed = named==null ? new ArrayList<IField>(3) : named", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "====================\n\nclass MainHandler(RequestHandler):\n    @authenticated\n    @xhr\n    def get(self):\n        self.write(self.get_json_data())\n\nclass MainHandler(RequestHandler):\n    @authenticated\n    @xhr\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "if __name__ == '__main__':\n    args = parser.parse_args()\n    downloader = WigleDownloader( args.user, args.password, args.coordfile, args.outpath )\n    downloader.run()", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "              if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Poss", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "      builds += [{'os': 'Windows', 'os_pretty': 'Windows',\n                    'arch': 'x86', 'arch_pretty': '32-bit',\n                    'download_link': make_download_link(\n                        'firefox', version", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.getByProjectTypeIssueTypeAssignments(projectID, issueTypeID, objectID);\n\t\t}\n\t\treturn (stateBeansList!=null &&", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "          foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if ( argumentSyntax.Expression is IdentifierNameSyntax identifierNameSyntax && memberList.Any( x => x.Identifier.ValueText == identifierNameSyntax.Identifier.ValueText ) ) {\n                    toReplace[argumentSyntax", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "      split_test = self._update_partition_id(0)\n        # Verify that the children are the correct verticals for the first group configuration.\n        self._assert_children(split_test, 2)\n        # Set to second group configuration.\n        split_test = self", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "          // Sivan\n            if (fontSpecific) {\n                Object[] metrics = GetMetrics();\n                PdfIndirectReference toUnicode = null;\n                if (metrics != null) {\n                    Array.Sort(metrics, this);\n                    toUnicode = writer", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the parent\n\t\t\t\t\t\t\tCell", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "      task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      InputStream is = context.getAssets().open(model.getSprite());\n      try {\n        return BitmapFactory.", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "              if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "# TODO: Add tests for NodeEditTagsForm and NodeManagePoliciesForm\n# TODO: Add tests for NodeDetailsView\n# TODO: Add tests for NodeEditTagsForm and NodeManagePoliciesForm\n# TODO: Add tests for NodeEditTagsForm and NodeManagePoliciesForm\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles, sequences);\n\t\t}\n\t\tnotifyPoseListeners(timestamp, getCurrentPose());\n\t}\n\tpublic void notifyP", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "              if (Enabled)\n                    ImageUrl = EnabledImageURL;\n                else\n                    ImageUrl = DisabledImageURL;\n            }\n            base.Render(writer);\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "sharpness = compound.getInteger(\"sharpness\");\nfire = compound.getInteger(\"fire\");\nblast = compound.getInteger(\"blast\");\nsmite = compound.getInteger(\"smite\");\ndamageCooldown = compound.getInteger(\"damageCooldown", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "      return getId() + \" [\" + getProbability() + \"%]\";\n    }\n}\n/**\n * The scope of an effect.\n */\nclass Scope {\n    public static final String UNIT_TAG = \"unit\";\n    public static final String TILE_TAG", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "# test admin can access any group\ni = store.handle_indicator_search(token, 'everyone', 'example.com')\nassert i is not None\nassert len(i) > 0\n# test admin can access private group\ni = store.handle_indicator_search", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "# Test that the delta is correct\nself.assertEqual(person._delta(), {'owns': [SON({'_id': organization._id})],\n                                 'employer': SON({'_id': organization._id})})\nself.assertEqual(organization._delta(), {'owner': S", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "=====================\n\ndef inspect_l1b_product(product_file_path, output_format=None):\n    \"\"\"\n    Open the L1b product inspector for the given file.\n\n    :param product_file_path: The path to the L1b product file", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "              if (!ignored.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var path in toScan)\n            {\n                _logger.Trace(\"Scanning path: {0}\", path);\n              ", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "      resbrains = getToolByName(self.context, 'uid_catalog').searchResults(query)\n        if len(resbrains) > 0:\n            obj = resbrains[0].getObject()\n            objcomments = pdt.getDiscussionFor(obj).", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = (ushort)value; }\n\t\t}\n\t\tpublic bool IsWater\n\t\t{\n\t\t\tget { return ( m_ID & 0x8000 ) != 0; }\n\t\t}\n\t\tpublic", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    // get channel_uri:\n                    channelUri = GetParcelVoiceChannel(scene, avatar, land);\n                }\n                if (String.IsNullOrEmpty(channelUri))\n                {\n                    // create channel_uri:\n                    channelUri", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart=textDateStart.DateTime;\n\t\t\tPayPeriodCur.DateStop=textDateStop.DateTime;\n\t\t\tPayPeriodCur.DatePaycheck=textDatePaycheck.DateTime;", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "      lat, lon = _build_lat_lon_for_NAME_II_timeseries(column_headings)\n        # Convert the time to python datetime objects.\n        pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "# This function is used by the `group_member_create` and `organization_member_create`\n# functions to check if the user is allowed to add a new member to the group or\n# organization.\n# It checks if the user is a sysadmin, or if the user is allowed", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tString childLabel = predictionAttribute.getValue(example).toString();\n\t\t\t\tNode childNode = node.getChild(childLabel);\n\t\t\t\t// setting outcome\n\t\t\t\toutcomes[parentIndex] = childNode.getPartitionId();\n\t\t", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "          return this.SearchSegments(settings, segments, null);\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "          codePoint = string.charAt(offset++) << 10\n                      | string.charAt(offset++) & 0x3FF;\n         }\n         if (_range != null && _range.contains(codePoint)) {\n            return offset;\n         }\n         return", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\tObservationHistoryDAO observationHistoryDAO = new ObservationHistoryDAOImpl();\n\t\tObservationHistory observationHistory = observationHistoryDAO.getObservationHistory(accessionNumber);\n\t\tif (observationHistory != null) {\n\t\t\tString studyFormNameFrom", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest.Id)\n", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify()\n#-------------------\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "          int [] ret = new int[A.Dimensions.NumberOfDimensions];\n            A.GetValueSeq(seqindex, ref ret);\n            return ret;\n        }\n    }\n}", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "pD[ 'plotName' ] = pD[ 'plotName' ].replace( ' ', '_' )\n  pD[ 'plotName' ] = pD[ 'plotName' ].replace( '/', '_' )\n  pD[ 'plotName' ] =", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (playerPower.Power < playerPower.PowerMax)\n\t\t\t\treturn;\n\t\t\tvar closestFactory = world.Actors.OfType<Factory>().OrderBy(f => f.Location.DistanceTo(defenseCenter)).FirstOrDefault();\n\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "      // Save the compiled plan\n        m_currentPlan = new CompiledPlan(name, plan, catalogStmt);\n        return plan.getRoot();\n    }\n    public CompiledPlan getCurrentPlan() {\n        return m_currentPlan;\n    }\n    public static class Comp", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(221, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte) parity;\n\t\t\tdcb.DataBits = (byte) (data_bits + 8);\n\t\t\tdcb.StopBits = (byte", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "  def test_user_with_cobrand_admin_can_edit(self):\n        admin = self.make_user('admin')\n        admin.is_superuser = True\n        admin.save()\n        cobrand = Cobranding.objects.create(user=self", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "  _keep_tempdir = parser.parse_args().keep_tempdir\n    unittest.main()\nif __name__ == '__main__':\n    main()\n# vim: set fileencoding=utf-8 :\n# Local Variables:\n# mode: python\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\tself[\"list\"].setList(self.newAPList)\n\t\tself.listLength = len(self.newAPList)\n\t\tself.updateWlanStatus()\n\t\tself.keyEvent(Key.Green, 0)\n\t\tself.keyEvent(", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "              int len = fCode.Length;\n                int width = (int) ((x + fontX) * 1000);\n                int height = (int) ((barHeight + fontY) * 1000);\n                int barsWidth = (int", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "  return results;\n  }\n}\n\n// The following lines are for testing purposes only\npublic static void main(String[] args) {\n  Properties props = new Properties();\n  props.setProperty(\"foo\", \"bar\");\n  props.setProperty(\"bool\", \"true\");\n", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "# TODO: Add tests for the following methods:\n# * interpolate_nearest\n# * interpolate_linear\n# * interpolate_cubic\n# * interpolate_spline\n# * interpolate_pchip\n# * interpolate_akima", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "          if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrent", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "# build_song_dataset('singer_name')\n# This function is used to build the dataset for the given singer's songs.\n# It loads the audio files, extracts the MFCC features, and stores them in a NumPy array.\n# The function also returns the labels", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "          }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "          this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 3", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n    def nullFunction( self, name, dll=None, resultType=None, argTypes=(), doc=None, argNames=(), extension=None, deprecated=False ):\n        \"\"\"Create a null function pointer.\n\n        This is used as a placeholder for functions that are not", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "          baos.write(emptyStreams.toByteArray());\n            writeUint64(header, emptyStreams.cardinality());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header,", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    alphaLevel -= 1;\n                    if (alphaLevel <= 0)\n                    {\n                        inRamp = true;\n                        try {\n                            Thread.sleep(rampDelay);\n                        } catch (InterruptedException e) {\n                            e", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "          item.CanBeRemoved.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_allow_removal_if_max_ratio_not_reached()\n        {\n            PrepareClientToReturnCompletedItem(true, ratio: 0", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "          if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n            }\n            if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken,", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "#        f.writelines(['F) ', str(NXPTS), '\t\t# Number of pixels in the', \\\n#                      ' X direction of the output image\\n'])\n#        f.writelines(['G) ', str(NYPTS), '\t\t# Number", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x08:\n                    /* C", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "  @property\n    def _course_key(self):\n        \"\"\"\n        Return the CourseKey for the course.\n        \"\"\"\n        if self._course_key is None:\n            self._course_key = CourseKey.from_string(\n                self._course_dict['", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tString chanceString = splitNumber[1].replace(\"%\", \"\");\n\t\t\tchance = Float.parseFloat(chanceString);\n\t\t}\n\t\treturn (int) (Math.random() * chance", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "# Define main function\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True, type='str'),\n            state=dict(default='present', choices=['present', 'absent']),\n            apiid=", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "          this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 12);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "```python\n        for plugname, plug in self.loaded_plugins:\n            try:\n                plug.run()\n                plugruncount += 1\n            except KeyboardInterrupt:\n                self.ui_log.info(_(\"User requested to quit, skipping", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class IConferenceSessionFossil(IConferenceFossil, ISessionFossil):\n    def __init__(self, conference, session):\n        self.conference = conference\n        self.session = session\n\n    def getId(self):\n        return self.session", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText(), subfoldersCheckbox.isSelected(), messageWriter);\n            } else {\n                result = parent.", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getNumber(\"value\").intValue();\n\t\t       \t\t} else if (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t} else if (", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "      if (currentSession != null && currentSession.isOpened()) {\n            Bundle parameters = new Bundle();\n            parameters.putString(FIELDS, REQUEST_FIELDS);\n            Request request = new Request(currentSession, \"/me\", parameters, null);\n", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) sum += emotion.chance;\n\t\tfor (Emotion emotion : emotions) emotion.chance /= sum;\n\t}\n}\nThe code above is a Java implementation of an emotions controller. It uses a list of emotions, each with a", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "#                    'property1': 2, 'property2': 3}\n                    'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list()\n        )\n    def test_to_xml(self", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "  Long = (x/k0 + (1/6*eccSquared*sin(2*phi1Rad)*cos(phi1Rad)*cos(phi1Rad)\n                   + 2/3*eccSquared*sin(3*phi1Rad)*sin", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\nform = ReportUserForm(request.POST)\nif form.is_valid():\n    report = form.save(commit=False)\n    report.user = user\n    report.reporter = request.user\n    report.save()\n    messages.success(request, \"User", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddStepOne(StepView):\n    \"\"\"A step for entering the name of a new product series.\"\"\"\n    form = form.AddForm(IProductSeries, IProductSeries['name'])\n    @property\n    def next_step(self):\n        return ProjectAddStepTwo\n", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "              temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "=====================\n    config._add_post_processor(\n        'isa', set_default_isa)\n    config._add_post_processor(\n        'isa', default_isa)\n    config._add_post_processor(\n        'isa', fix_isa_regex)", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "              return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override bool IsSubclassOf (Type type)\n            {\n                return false;\n            }", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "# class OBD_PID_XX(OBD_Packet):\n#     name = \"PID_XX_XXX\"\n#     fields_desc = [\n#         # fields description here\n#     ]\n# For example, PID_1E_EngineRpm\nclass", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.connection = self.bus_name.get_connection()\n\t\tself.connection.add_filter(self.handle_method_call)\n\t\tself.connection.add_filter(self.handle_signal)\n\t\tself.connection.add_filter(self", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "          }\n            else\n            {\n                index = this.AddCraft(typeof(Prism), 1044294, 1044377, 1, 1, 1, 1, 1, 1, 1, ", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    def __del__(self):\n        \"\"\"This method is called when the request context is garbage collected.\n        This is not the same as the :meth:`pop` method.  The :meth:`pop` method\n        is called when the request context is explicitly popped.  This method", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "  response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name == topic_name)\n    return response\n# ################################################################################################################################\ndef", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "          if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "dx = (angles - min_rot_angle) / alen\n    else:\n        # Find projection of axis on detector\n        axis_proj = _axis_in_detector(ray_trafo.geometry)\n        # Find distance from projection of rotation axis for each pixel\n       ", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\nclass Provider(NZBProvider):\n    def __init__(self, name):\n        GenericProvider.__init__(self, name)\n        self.enable = False\n        self.supports_backlog = False\n        self.supports_anime = False\n        self.", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (IsEmpty)\n\t\t\t\treturn String.Empty;\n\t\t\tif (type == FontSize.AsUnit)\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\treturn font_size_names [(int) type];\n\t\t}", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerObj = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerObj.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(innerObj.Properties[1].Key, Is.", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "              for (int w = 0; w < width; w++) {\n                    int index = h * width + w;\n                    if (w > 0) {\n                        edges.add(T2.of(\"edge-\"+(index-width), \"edge-\"+", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "======================\n\ni1 = iso.Isoelastics(ds)\n\n# test the default values\ndata = i1.get(col1=\"deform\",\n             col2=\"area_um\",\n             lut_identifier=\"LE-2D-FEM-1", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "      final File file1 = new File(args[0]);\n        final File file2 = new File(args[1]);\n        final LocalTripleStore db1 = new LocalTripleStore(file1);\n        final LocalTripleStore db2 = new LocalTripleStore(file2", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "if __name__ == '__main__':\n    unittest.main()\n# This script is a test script for the alert module. It imports the alert module,\n# sets up a test case, and runs the test case. The test case includes several\n# test methods, each of which tests", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, ref vao);\n\t\t\tOpenGL.CheckError();\n\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tOpenGL.CheckError();\n\t\t\twindow.GraphicsContext = null", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "  @property\n    def total_cov_mat(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the total *xy* covariance matrix.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._total_cov_mat\n", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "      return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation of this object\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁  noCanonicalIdAccountIds.add(walrusObject.getOwnerId());\n                  continue;\n                }\n                accountIdAccountMap.put(walrusObject.getOwnerId(), owningAccount);\n              } catch (Exception e) {\n                // Account", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "          add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public IFolder SelectedFolder\n        {\n            get { return _selectedTreeNode == null ? null : _selectedTreeNode.Folder; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "      ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        command.setImportAsNewEntity(isImportAsNewEntity);\n        command.setName(name);\n        List<ConstraintViolation<ImportVmTemplateCommand>> violations =\n                Valid", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.LeftAttach = ((uint)(5));\n\t\t\tw10.RightAttach = ((uint)(6));\n\t\t\tw10.XAlign = ((uint)(0.5F));\n\t\t\tw10.YAlign = ((", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic FieldBuilder DefineField(string name, Type fieldType, FieldAttributes attribs)\n\t\t{\n\t\t\treturn DefineField(name, fieldType, attribs, null);\n\t\t}", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "    return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\")]\n    public static Builder CreateBuilderFromJson", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Returns the index of the vertex that corresponds to the given quad index\n     * and vertex", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "      if (CmsStringUtil.isNotEmpty(showDateData)) {\n            String[] dateCols = CmsStringUtil.split(showDateData, ';');\n            for (String dateCol : dateCols) {\n                if (dateCol.equalsIgnoreCase(", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}\n//  This script is part of the MaterialUI package, which can be found at http://www.assetstore.unity3d.com/#!/content", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "      Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    #endregion\n  }\n}", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n               ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (directions !=", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "          // check if all discounts have a valid criteria code\n            if (CriteriaCodesUsed.Count != 3)\n            {\n                ValidationColumn = FMainDS.PcConferenceOptions.Columns[\"Outreach_Discount_Role_Code\"];\n                VerificationResult =", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "              stream.Read (buffer, 0, (int) stream.Length);\n                // Adding file content as byte[]\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __len__(self):\n        \"\"\"Number of requirements\"\"\"\n        return sum(len(v) for v in self._reqs.values())\n\n    def __iter__(self):\n        \"\"\"Iterator over requirements\"\"\"\n        return iter(itertools.chain(*self._reqs", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && (CopyRange || _numberOfImages > 1); }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string ConfigurationDirectory {\n\t\t\tget { return confDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\n\t\t\tget { return cacheDir; }\n\t\t}\n\t}\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "          if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation lineAnnotation = (SourceLineAnnotation) bugAnnotation;\n                if (lineAnnotation.getLineNumber() < 0) {\n                    throw new IllegalStateException(\"Invalid line number: \" + lineAnnotation.get", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "}\nThis code is a base class for food items in Ultima Online. It includes properties for poison, fill factor, and a constructor for serialization. The Eat() method is not implemented in this base class, but it is called in the derived classes. The base class also includes a constructor for deserial", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneQ\") && Q.IsReady() && MinionManager", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "# ---------------------------------------------------------------------------\n# This is the main entry point for the plugin\n# ---------------------------------------------------------------------------\nclass DWDPlugin(object):\n    def __init__(self, sh):\n        self._sh = sh\n        self._dwd = DWD(sh, '", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "  self.assertEquals(field_model_def, field_def)\nif __name__ == '__main__':\n    run_testsuite()\ntest_suite = make_test_suite()\nrun_test_suite(test_suite)", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new object[] {10, \"E1\"});\n                // widen to short\n                var stmtText = \"create window MyWidened (f0 int primary key, f1 string) as select LongPrimitive as f0, TheString as f1 from SupportBean", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__itruediv__(other)\n\n    def __itruediv", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "# Now, let's add a new method to the view class to save a view section\n# from a JSON payload.\ndef save_json_view_section(self, cr, uid, view_id, json_payload, context=None):\n    \"\"\" Update a view section from a JSON", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "          value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n        c.putClientProperty(documentBaseKey, null);\n    }\n    /**\n     * Returns the factory for creating the editor kit.\n    ", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "s = create(filename, content)\nassert s.content_is_testharness\nassert s.name_is_test\nassert s.name_is_non_conformance\nassert s.name_is_conformance\nassert s.name_is_multi_page\nassert s", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmNamedSQLQuery(namedQueryReference);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmapping.SqlLoader.AddNamedQuery(namedQueryReference);\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer );\n\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "      invocationQueue.pop();\n    }\n    private void popGraphsAndInvocation() {\n        popGraphs();\n        popInvocation();\n    }\n    private boolean contains(CallsiteHolder g) {\n        for (CallsiteHolder h : graphQueue) {\n           ", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "# self.pytest_command = pytest\n\nI assume you want to assign the value of 'pytest' to self.pytest_command.\nSo, the next line of code should be:\nself.pytest_command = pytest\n\nAlso, you need to import py", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "              if (phi) {\n                    ValueNode phiValue = getCachedPhi(key, value.stamp());\n                    mergePhi(phiValue, value, states);\n                }\n            }\n        }\n        private void mergePhi(ValueNode phi, Value", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "      if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraEvent */\n    public void handle", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic EodonianMapGump(Mobile from)\n\t\t{\n\t\t\tm_Mobile = from;\n\t\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "=====================\n\nThe code above defines two classes, `Record` and `RecordMetadata`, which are\nused to represent records and their metadata in the SQL database. The `Record`\nclass is a subclass of `db.Model` and has several properties and methods\ndefined, including `creation", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "  def __getitem__(self, key):\n        \"\"\"Dummy method to make the cache behave like a dictionary.\"\"\"\n        return self.module.get(key)\n\n    def __setitem__(self, key, value):\n        \"\"\"Dummy method to make the cache behave like a dictionary", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n    def __init__(self, msgid, msgstr, fuzzy=False):\n        \"\"\"\n        Constructor.\n        **Keyword arguments**:\n          - *msgid*: string, the msgid.\n          - *msgstr*: string, the msgstr.\n          - *", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "###############################################################################\n# This is the end of the code provided.\n# The following lines are just for testing purposes.\n# Uncomment them if you want to test the code.\n#\n# if __name__ == '__main__':\n#   agent = ValidateOutputData", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tString path = uri.getPath();\n\t\t\tif(path.startsWith(PLUGINS_PREFIX)) {\n\t\t\t\t// Allow access to plugins\n\t\t\t\treturn action;\n\t\t\t}\n\t\t\t// Disallow access to other forms\n", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "      gsp = yield self.setupGerritStatusPush()\n        result = yield self.run_fake_single_build(gsp, buildResult, verifiedScore)\n        gsp.sendReview(result)\n    @defer.inlineCallbacks\n    def check_single_build", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "  self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'test'\n    self.category.label = 'label'\n    self.category.scheme = 'scheme'\n    self.category.extension_attributes =", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = new HashMap<>();\n            for (Map.Entry<String, AnnotationMirror> e1 : r1.entrySet()) {\n                String key = e1.getKey", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "# Register classes\nclasses = [\n    MATERIAL_PT_sss_presets,\n    MATERIAL_PT_sss_presets_menu,\n    MATERIAL_PT_sss_presets_operator,\n    MATERIAL_PT", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "          if (_engine.Memory.Map.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_chr_bank = map16.chr_bank;\n           ", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "          JMenuItem oOpenMenuItem = new JMenuItem(\"Open Document\");\n            oOpenMenuItem.addActionListener(oActionListener);\n            oOpenMenuItem.setAcceleratorKey(KeyEvent.VK_O);\n            oOpenMenuItem.setMnemonic(KeyEvent.V", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Green Rats]\n\t}\n}\n//-----------------------------------------------------------------------------\n// End of File.\n//-----------------------------------------------------------------------------", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = MeasuredHeight;\n\t\t\tint newHeight = 0;\n\t\t\tfor (int i = 0; i < ChildCount; i++) {\n\t\t\t\tView child = GetChildAt (i);\n\t\t\t\tint childHeight", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "=====================\n\n# This is the next line of code that should be added to the file.\n# It creates a new manager for the Announcement model that will be used to filter announcements by Twitter cross-publications.\nclass AnnouncementTwitterPublishedManager(models.Manager):", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "#lexers.register_lexer(name='php', filename='*.php', lexer=PhpLexer)\n#lexers.register_lexer(name='php', lexer=PhpLexer)\n# Override the default lexer for .r", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "# The following line of code is where I need help.  I need to sum the duration of all the flights\n# in the group and set the end time of the group to be the start time of the next group.\n# I can't figure out how to do this.\n#\n# I", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "# TODO: implement this function\ndef db_get_last_snapshot(project_id):\n    \"\"\"\n    This function will connect to the database if possible, and return the last snapshot timestamp\n    for the given project_id.\n    \"\"\"\n    conn = rethinkdb_connection()\n", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tMsg(\"I'm not involved in any kind of conspiracy.<br/>I don't know what you're talking about.<br/>I'm just a simple shepherd.<br/>I don't have time for your nonsense.<br/>Now leave me alone.\");\n\t\t", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "responses = {}\n# Add your responses here\n# Example:\n# responses['LoginAccepted'] = LoginAcceptedResponse\n# responses['LoginFailed'] = LoginFailedResponse\n# responses['LoginFailed'] = LoginFailedResponse\n# responses['LoginFailed'] = LoginFailedResponse\n# responses['", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n    def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nclass HostData:\n    \"\"\"\n    Data about a single host for a single task.\n    \"\"\"\n    def __init__(self, uuid", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "              Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n            finish();\n        }\n    }\n}\nThis code is an Android app that unshortens URLs. It uses the Jsoup", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "# TODO: Add step for checking that primary has only packages and no other items\n# (e.g. headers, rpms, etc.)\n# TODO: Add step for checking that primary has only packages with given names\n# (e.g. \"foo-1.0-1.no", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\n    if __name__ == '__main__':\n        install_lib = install_lib()\n        install_lib.finalize_options()\n        sys.exit(install_lib.run())", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[j];\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity, session, snapshot, j", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "#        '-N', job_name,\n#        '-o', log_name,\n#        '-e', log_name,\n#        '-V', 'RSLT_FILE=%s' % log_name,\n#        '-M', '1000000',", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "          return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate)\n        [HttpPost]\n        [RolesRequired(\"Admin\")]\n        public ActionResult AddEventDelegate(DelegateViewModel model)\n        {\n            var errors = new", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        return string.Format(\"{0} - {1} - {2} - {3}\", ((Circle) obj).Center.X, ((Circle) obj).Center.Y, ((Circle) obj).Radius, ((Circle) obj).Color);\n                    }\n                ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    def download(self, url):\n        self.logDebug(\"Downloading: %s\" % url)\n        self.thread.startDownload(url, self.pyfile.name, self.pyfile.size, self.premium)\n        self.pyfile.set", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path != null && path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\t/// <summary>\n\t\t/// Determines the location from which to search for harvestable resources.\n\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "      self.logger.info(\"syncing dhcp files\")\n        self.dhcp.sync()\n        return True\n    def clean_link_cache(self):\n        \"\"\"\n        Clean out the link cache\n        \"\"\"\n        self.logger.info(\"cleaning link cache\")", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "      return Event.newBuilder().setSource(source).setSeqNo(seqNo.getAndIncrement());\n    }\n}\nThe code above is an abstract class named AbstractEventProducer which implements the EventProducer interface. It provides shortcut methods for sending messages of different severity types.", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "          for (; context != PpmContext.ZERO; context = context.Suffix)\n            {\n                if (context.NumberStatistics == 0)\n                {\n                    Copy(context.Statistics, states, stateIndex);\n                    stateIndex += 256;", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "              return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Sequence VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[0]);\n\t\t\t//if(SqliteJump.SelectCount(sessionID, tFull[1], tFull[2]) > 0)\n\t\t\t//\tsessionValuesArray.Add(session", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n    def test_delete_bytes_empty(self):\n        o = self.file(b'')\n        delete_bytes(o, 8, 0)\n        self.assertEquals(b'', self.read(o))\n\n    def test_delete_bytes_one", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n<td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X</td>\n    <", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "# TODO: plot the results\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--app', required=True, help='Application name')\n    parser.add_argument('--test', default=VC, help='", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "if __name__ == '__main__':\n    unittest.main()", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRoundRect(x + 1, y + 1, controlSize - 2, controlSize - 2, 2, 2);\n\t\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "def simulateClassifier(self, knn, patternDict, testName):\n    \"\"\"\n    Simulates the KNN classifier on a set of patterns.\n    \"\"\"\n    failures = \"\"\n    numPatterns = len(patternDict)\n    LOGGER.info(\"\\nTesting", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "      mirror.writeElement(elementKind, offset - headerSize(), value);\n    }\n    @HOSTED_ONLY\n    public void writeValue(ObjectMirror mirror, int offset, Object value) {\n        if (offset == lengthOffset) {\n            mirror.writeArrayLength(Java", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "          if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(Parent.OutputDirectory, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n           ", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\ndef url_parse(url):\n    \"\"\"\n    Parses a URL into its components\n    \"\"\"\n    if py_version < 3:\n        url = urllib.parse.urlparse(url)\n    else:\n        url = urllib.parse.urlparse", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "    }\n    }\n  }\n}\nThe code above is incomplete. The next line of code should be:\ni20 = i18 + 1;\nThis line of code is missing in the code snippet provided. The missing line should be added before the if statement that starts", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"  \" + s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "              });\n            #endregion\n            #region Lux\n            Spells.Add(\n                new SpellData\n                {\n                    Name = \"LuxQ\",\n                    Slot = SpellSlot.Q,\n                    Range = 1200,\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.user@test.com\"));\n\t}\n\tprotected void mockSecurityContextWithAdmin() {\n\t\twhen(securityContext.getCurrentTenantId()).thenReturn(\"test.tenant", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "  @testlib.with_context\n    def test_popen_raises_error_on_non_existent_executable(self, context):\n        context.add_executable('non_existent_executable')\n        self.assertRaises(\n            subprocess", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (string.IsNullOrEmpty(configDirectory)) {\n\t\t\t\tconfigDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);\n\t\t\t\tconfigDirectory = Path.Combine(configDirectory, applicationName);\n\t\t\t}\n\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//\n\t\t// The following code is used by the designer to initialize\n\t\t// the component. Do not modify the contents of this method with\n\t\t// the code editor.\n\t\t//\n\t\t[EditorBrowsable (EditorBrowsableState.Never)]\n\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n        Dialog.setTabOrder(self.font_size_option, self.zoomby_option)\n        Dialog.setTabOrder(self.zoomby_option", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "              return true;\n            }\n            String stationId = wxs.getString( wxs.getColumnIndex( Wxs._ID ) );\n            String name = wxs.getString( wxs.getColumnIndex( Wxs.NAME ) );\n            String city = wxs.getString", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring queryString = \"from Continent c join fetch c.Countries\";\n\t\t\t\tint results = s.CreateQuery(queryString).List().Count;\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount);\n\t\t\t\tAssert", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "              uiCRCITTSum = (uiCRCITTSum >> 8) ^ crc_table_ITT[(uiCRCITTSum & 0xFF) ^ uiByteValue];\n            }\n            return (ushort)uiCRCITTSum;\n       ", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn hasSpeedModule() ? 10 : 5;\n\t}\n\t/**\n\t * @return The block position below the sentry that affects its movement\n\t */\n\tprivate BlockPos getBlockPosBelowAffectingMovement() {\n\t\treturn getBlockPos", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "          return new IHyperlinkDetector[] {};\n        }\n        IHyperlinkDetector[] detectors = new IHyperlinkDetector[] {\n                new CeylonHyperlinkDetector(editor, controller),\n                new JavaHyperlinkDetector(editor", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "# Create the Object3DAspect and Object3DScale widgets\n# and add them to the layout\n#self.object3DAspect = Object3DAspect(self)\n#self.object3DScale = Object3DScale(self)\n#self.l.add", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set X\n\t\t\t\t\t{\n\t\t\t\t\t\tint x = info.GetInt( 0 );\n\t\t\t\t\t\ttoSet = new Point2D( x, m_Mobile.Location.Y );\n\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁     for (Object valueChoice : valueChoices)\n                     {\n                        String label = selectConverter.convert(valueChoice);\n                        if (Strings.equalsIgnoreCase(label, Strings.toString(value)))\n                        {\n                           chosenObj = valueChoice;", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++)\n\t\t\t\t\tsb.append(\"\"+k+\"\\t\"+totalWithAmount[i][j][k]+\"\\t\"+fractionWithAmount[i][j][k]+\"\\n", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                ", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\tpublic void AddFaultContract (FaultContract faultContract)\n\t\t{\n\t\t\tThrowIfOpened ();\n\t\t\t", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "      final SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager, ownerId, mode, ownerGroupId);\n        final int testUserId = ownerId + 1;\n        assertFalse(permission.canRead(testUserId));\n        verify(mockSecurityManager).checkPermission(", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X / viewport.Width, v.Y / viewport.Height);\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn new Vector3 (", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint(XDRUnion):\n    __slots__ = []\n    member_key = XDRTypedef('endpoint_key')\n    member_value = XDRStruct(endpoint_value)\n    def __init__(self, key=None, value=None):\n        self.", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    Console.WriteLine(\"Client \" + i + \" disconnected\");\n\t\t\t\t    RemoveClient(i, disconnect_client);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// sends", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "          if(type == RequestType.Step) {\n                List<StepBucket> stepBuckets = convertToStepBucketList(list);\n                notifyStepsReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, stepBuckets);\n           ", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "GenerateBase(1)\n  GenerateBase(2)\n  GenerateHelperFunction('NewSingleCallback', 1, 1)\n  GenerateHelperFunction('NewCallback', 1, 1, 'BaseCallback1')\n  GenerateHelperFunction('NewCallback', 2, 1,", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\"\"\"\nresponse = HttpResponse(mimetype='application/json')\njson_data = []\nfor item in items:\n    json_data.append(range_item_dict(item))\nresponse.content = json.dumps(json_data)\nreturn response", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "              new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(new ServiceNode(\n                        new ConstantNode(TermId.make(0,\n                                store.getValueFactory().createURI(\n                                        \"", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n    def dispatch(self, request, *args, **kwargs):\n        self.object = None\n        try:\n            self.object = self.get_object(queryset=self.model.objects.filter(pk=kwargs[\"pk\"]))\n            if not self.object:", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "    get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "          // Start the iterative process\n            int iterations = 0;\n            double residual = 0.0;\n            double rnorm = 0.0;\n            double rnormOld = 0.0;\n            double rho = 0.0;\n            double", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "          if reference_set_map[v] != -1:\n                A[focal] = v\n                L[focal] = edges_out[-1].length\n                break\n            v = parent[v]\n        parent[edge.child] = v\n       ", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "  def test_items_to_raw(self):\n        result = self._test_raw_to_enrich(False)\n        self.assertEqual(len(result['raw']), len(self.ocean_backend.fetch()))\n        self.assertTrue(len(result['raw", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam && slot.Value.Team != null)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(Order.AddBot(", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" [\" + _rootCause.ToString() + \"]\";\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "# TODO(roasbeef): Implement the RST_STREAM frame.\nclass RstStreamFrame(Frame):\n    frame_type = FrameType.RST_STREAM\n    defined_flags = set()\n    def __init__(self, error_code, stream_id):\n        self", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "#endif\n        }\n    }\n}\n//The code above is incomplete, please complete the code given below.\n//The method CheckClusterConsistency() is incomplete, please complete it.\n//The method SetDebugIds() is incomplete, please complete it.\n//The method", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos (m_maxSlopeRadians);\n}\nvoid btKinematicCharacterController::setMaxSlopeCosine(double cosine)\n{\n\tm_maxSlopeCosine = cosine;\n\tm_", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "      for (ExpressionTree initializer : initializers) {\n            if (isInUniqueConstructor(initializer)) {\n                checker.report(initializer,\n                        \"Unique.leaked.array.element\",\n                        \"Array element of a unique constructor\");\n            }\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tN", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t\t_type = typeAttribute.Value;\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the methods associated to this comment item.\n\t\t/// </summary>\n\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 100;\n\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\n\t\t\twhen(classType.isAnnotationType()).thenReturn(true);\n\t\t\twhen(classType.isInterfaceType()).thenReturn(false);\n\t\t\tdoReturn(Collections.singleton(", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.postdominators != null && other.postdominators != null) {\n\t\t\tif (this.postdominators.size() != other.postdominators.size())\n\t\t\t\treturn false;\n\t\t\tfor (int i = 0;", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "          int min2 = wideLExtent[start][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowR) { // can this left constituent stretch far enough?\n              continue;\n            }\n           ", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "              'rsync',\n                '--archive',\n                '--compress',\n                '--delete',\n                '--exclude={\"pg_hba.conf\", \"pg_stat.conf\",\n                          \"pg_clog/*\", \"pg_xlog", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "writer.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a color value to the XML-stream.\n\t *\n\t * @param name   Name of the color parameter.", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null ) {\n\t\t\t return false;\n\t\t}\n\t\tif ( !( aThat instanceof Contact ) ) {\n\t\t\t return false;\n\t\t}\n\t\tfinal Contact that = (Contact)aThat;\n\t\treturn ( (", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "  if total_rej > 10:\n      print('Total number of rejected timesteps = %s' %total_rej)\n      sys.exit()\n\nThe code is a multi-body simulation using the Lubrication model. The simulation is performed for a given number of", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "      idx = node.op.idx_list\n        if len(idx) == 1 and isinstance(idx[0], (int, long, scalar)):\n            # The slice is of the form X[i]\n            # We check if i is a constant\n            try:\n               ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "=====================\n\ndef save_community_page(request, community, form):\n    \"\"\"Save a new CommunityPage instance.\"\"\"\n    community_page = form.save(commit=False)\n    community_page.community = community\n    community_page.save()\n    return", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "```python\nreturn query\n```\n# This is the end of the code. The code above is defining several classes\n# that inherit from the `event.Events` class and define various events\n# that can be listened to in SQLAlchemy. The classes include `InstanceEvents`,\n#", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "# Register the descriptor class with the XBlock registry.\nXBlockRegistry.register_descriptor(ConditionalDescriptor)\n# Register the module class with the XBlock registry.\nXBlockRegistry.register_module(ConditionalModule)\n# Register the module class with the XModule registry.\nXModule", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "=====================\n\nThe code seems to be incomplete and missing some context. Here's a possible completion based on the given code:\n\n```python\n# ...\n\nNext line of code:\n=====================\n\ndef translate_changes(self, data_model_changes):\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && (Method == null && Field == null && Sig == null))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (Method != null && (Class == null || Sig != null))\n\t\t\t{", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t// ", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "      c = self.getNoPrefix(\"mail/syncmail.5\")\n        self.assertEqual(c.branch, \"trunk\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/mail/__init__.py\"]))\n        self.assertEqual(", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "      if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> datum : csvData.entrySet())", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\tif(player.capabilities.isCreativeMode) {\n\t\t\t\tif(player.getHeldItem(EnumHand.MAIN_HAND).isEmpty()) {\n\t\t\t\t\tplayer.inventory.add", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "          intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCase3(Node n", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "if __name__ == \"__main__\":\n    do_upgrade()", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.Close();\n\t\t\tcomputerMgmt=null;\n\t\t\t\n\t\t\t//this.Close();\n\t\t}\n\t\tprivate void importHostFile(string filename)\n\t\t{\n\t\t\t//this.comput", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "  for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Creates an occurrence of the specified event, starting at the specified", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.Bind( DataSource.Component, SourceEventName );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAnd", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "          ISwitchManager switchManager = (ISwitchManager) ServiceManager.getService(ISwitchManager.class, container);\n            SpanConfig spanConfig = new ObjectMapper().readValue(jsonData, SpanConfig.class);\n            Status result = switchManager.addSpanPort(span", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAlert = new ImageHelper(102100, \"/ims/images/alert.gif\", new Integer(16", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "      return rnd.nextInt(size);\n    }\n}", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "  def make_assertions(self,\n                        project_uuid,\n                        predicate_uuid,\n                        subject_uri,\n                        object_uri,\n                        hash_value,\n                        hash_algorithm='sha256'):\n        \"\"\"\n            Make assert", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "          buffer.Append(\"          .shrinktfit= \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .readingorder= \")\n                .Append(StringUtil.ToHexString(", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katana\n\t\t\t\tbytes[posn++] = (byte) (ch - 0x5B);\n\t\t\t\tbytes[posn++] = (byte) (value >> 8);\n\t\t\t\tbytes[posn++] =", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n# -------------------------------------------------------\n# define FPU instructions\n# -------------------------------------------------------\n\n# FPU instructions are not supported in the TriCore architecture\n# -------------------------------------------------------\n# define FPU instructions\n# -------------------------------------------------------\n\n# -------------------------------------------------------\n#", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties properties = new Properties();\n\t\t\tstream = location.openStream();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap map = new JRPropertiesMap();\n\t\t\tfor (Enumeration<Object> keys = properties.propertyNames();", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "          return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n         *", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd = new CommonSecurityDescriptor\n\t\t\t\t(false, false, ControlFlags.None, null, null, null, null);\n\t\t\tAssert.IsFalse (csd.DiscretionaryAclPresent);\n\t\t\tAssert.IsFalse (csd", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "# Here we go!\nresults = []\nfor result in self.__queue:\n    results.append(result)\n    self.__idle()\n    if len(results) >= 10:\n        self.__start_lookup_thread(results)\n        results = []\n# This is", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "      // ----------------------------------------------------------------------------\n        // Add your custom RPCs here.\n        // ----------------------------------------------------------------------------\n        // ----------------------------------------------------------------------------\n        // Add your custom RPCs here.\n        // ----------------------------------------------------------------------------\n        // ------------------------------------------------", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "      if (Config.getBoolean(\"show_message_date\", getActivity())) {\n            full_date = rootLayout.findViewById(R.id.full_date);\n            full_date.setText(message.date);\n        }\n        return rootLayout;\n    }\n   ", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "      # Transform wave function\n        psit_G = np.dot(psit_G, self.symmetry.op_scc[s])\n        if time_reversal:\n            psit_G = psit_G.conj()\n        return psit_", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "      CreateUtkastRequest utkastRequest = buildRequest(\"luse\");\n        utkastRequest.setPatientEfternamn(\"test\");\n        utkastRequest.setPatientPersonnummer(PATIENT_PERSONNUMMER);\n        utkastRequest", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body) {\n\t\t\t\t\tILBasicBlock childAsBB = child as ILBasicBlock;\n\t\t\t\t\tif (childAsBB != null) {\n\t\t\t\t\t\tif (prevChildAsBB != null", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    //if we're not a ragdoll then we'll need to set all the parts to ragdoll\n\t    if (!IsRagdoll) {\n\t\tfor (", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class StratumLayer(GeoLayer):\nWhat should be the next class after FractureLayer?\nThe next class after FractureLayer should be the StratumLayer class. The StratumLayer class is similar to the GeoLayer class, but it is used to represent stratig", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "      out[outOff + 3] = (byte) ((num >>> 24) & 0xff);\n        out[outOff + 2] = (byte) ((num >>> 16) & 0xff);\n        out[outOff + 1] = (byte", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "          super( source );\n            this.objectVariables = objectVariables;\n        }\n        private Map<String, PatternNode> objectVariables;\n        @Override\n        protected Predicate<PatternMatch> getFilter()\n        {\n            return new Predicate<PatternMatch>()\n            {\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "def transform_values_holder_xml_to_json(values_holder_xml, format = None):\n    \"\"\"\n    Transform a values holder XML to a JSON object.\n\n    :param values_holder_xml: An XML element representing a values holder.\n    :param format:", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "          frameToClose = (InternalFrame)buttons.get(btn);\n            if (frameToClose!=null)\n              frameToClose.toFront();\n          }\n        }\n      });\n      btn.addActionListener(new ActionListener() {\n        public void actionPerformed(", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "# Define the functions that will be called on the server\n# These functions should be defined in the server code\n# and should be decorated with the @zmq.api.export decorator\n# The first argument is the name of the function as it will be called from the client\n# The second argument is", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "  move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int z = 0; z < p.getRasterDepth(); z++)\n    {\n      for (int y = 0", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    ContentValues values = new ContentValues();\n                    values.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, values, Db.Table1.ID_GROUP + \" = \" + deleteId,", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "              m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n        #endregion\n        public IntPtr Pointer\n        {\n            get {", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tif (queue[0].Number > numberToCancel)\n\t\t\t\t\tqueue[0].Number -= numberToCancel;\n\t\t\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    infoText += \" file\" if numberOfFiles==1 else \" files\"\n    infoText += \"<br>\"\n\n    if numberOfHiddenFiles>0:\n        infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \"\n        infoText += \"file\"", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "      code = re_m4.sub(r'%%\\1%%', code)\n        # replace the variables\n        for x in self.env.get_vars():\n            code = code.replace('%' + x, self.env[x])\n        # write the result\n", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "if __name__ == '__main__':\n    try:\n        PlanningServer()\n        rospy.spin()\n    except rospy.ROSInterruptException:\n        pass\n    except KeyboardInterrupt:\n        print \"Shutting down\"\n        rosp", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] - hdiv1 * ( chemical[ 1 ][ idx - reactorExtent ]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "              if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tif (qs.Execute().ReturnValue < 0)\n\t\t\t\treturn false;\n\t\t\tentity.cti_id = Convert.ToInt32(qs.Parameters[\"@cti_id\"].Value);\n\t\t\treturn true;\n\t\t}", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic int PropertyCount\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic string PropertyNames\n\t\t{\n\t\t\tget { throw new NotImplement", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "#\n# Main function\n#\ndef main():\n    argument_spec = dict(\n        key_id=dict(type='int', required=True),\n        auth_mode=dict(type='str', choices=['md5', 'sha1']),\n        password=dict(", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "          component = self.store.update(component, fields=['display_name'], user=editing_user)\n            # Verify that the component was updated and that the edit info was updated\n            check_node(component.location, after=after_create, user=editing_user)", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "      digest.update((byte) (TEXT_CODE & 0xff));\n        updateWith(new String(ch, start, length));\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {\n        digest.update((byte", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "#def mkrange(data):\n#    record = AEDesc.desc_list(data)\n#    min, max = [], []\n#    for desc in record:\n#        if desc.type == typeRange:\n#            min.append(unpack(desc.value[", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "          Type type = api.ActionDescriptor.GetParameters()[0].ParameterType;\n            if (type == typeof(HttpRequestMessage))\n            {\n                type = ResolveHttpRequestMessageType(api);\n            }\n            else if (type == typeof(HttpResponseMessage))\n           ", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "      elif event.keyval == gtk.keys.Mod1Mask + gtk.keys.K_Return:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "          beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /**\n     * The order of this bean processor.\n     */\n    public int getOrder()\n    {\n       ", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "          lines = f.readlines()\n        finally:\n            f.close()\n    if lines:\n        for line in lines:\n            if len(line.strip()) == 0:\n                module.fail_json(msg=\"Password file contains blank lines\")\n    if state", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "      [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Interface)] object pUnk\n            );\n        [PreserveSig]\n        int QueueEventParamString(\n            [In] Media", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "      ensureWriteAccess( directedAclKeys.getAclKey() );\n        spm.addPrincipalToPrincipal( directedAclKeys );\n        return null;\n    }\n}", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "      for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element matches what is expected.\"\"\"\n        expected_tag = self.expected_data.", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "=====================\n\n# This is the implementation of the NodeList interface.\n# It is a list of nodes, and is used to represent the result of\n# a document.getElementsByTagName() call.\nclass NodeList(object):\n    def __init__(self, nodes):\n", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostics, context);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t* @", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.Name, endOffset)) {\n\t\t\t\tName name = new Name();\n\t\t\t\tdecodeName(name, decoder);\n\t\t\t\tkeyLocator.setKeyName(name);\n\t", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "      for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update();\n        }\n        \n        //Updates the camera position\n        if(myPlayer.destination.x != destx || myPlayer.destination", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "      action.setColor( color );\n        GameEngine.model().getGame().addJoin( action );\n        hide();\n      }\n    } );\n    m_btnOk.setEnabled( false );\n    hPanel hpanel = new hPanel();\n    hpanel.add(", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "# Raise an error if the response is not 200 OK\nif r.status != 200:\n    err = json.loads(r.data.decode(\"utf-8\"))\n    if \"status\" in err and err[\"status\"] == False:\n        msgs", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = null;\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "def _find_carbon_sources(model: \"Model\") -> List[Union[\"Reaction\", None]]:\n    \"\"\"Identify carbon sources in the model.\n    Parameters\n    ----------\n    model : cobra.Model\n        The model to search for carbon sources in.\n    Returns", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "class Unit(CachedTreeItem, models.Model):\n    \"\"\"A unit of translation, with a source and a target string.\n    \"\"\"\n    #: The source string.\n    source = models.CharField(max_length=settings.MAX_SOURCE_LENGTH)\n    #:", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n        migrations.AddField(\n            model_name='academiccenter',\n            name='state',\n            field=models.ForeignKey(to='events.State'),\n        ),\n\n        migrations.AddField(\n            model_name='city',\n            name='state',", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "# start the controller\npox.openflow.libopenflow.ofp_init_logger()\npox.openflow.libopenflow.ofp_init_event_loop()\npox.openflow.libopenflow.ofp_init_ofp_connection_manager", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "  if (m_IgnoreChanges)\n      return;\n\n    if (m_RecentItems.size() >= m_MaxCount) {\n      m_RecentItems.remove(m_MaxCount);\n    }\n    m_RecentItems.add(item);\n   ", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "          if (src.FightMode == FightMode.Aggressor || src.FightMode == FightMode.Passive)\n                return true;\n            return false;\n        }\n    }\n}\nI'm not sure what the next line of code should be. The", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "      if (halfTradePeriodDate == null && takeOfferDate != null) {\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod() / 2);\n        }\n        return half", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompAllFollowSets() {\n\t\tforeach (Symbol sym in SymbolTable.symbols) {\n\t\t\tif", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteAsync(buff);\n\t\t\tBeginAsyncRead();\n\t\t\treturn mReadBuff;\n\t\t}\n\t\t/// <summary>\n\t\t/// Write data to Wiimote\n\t\t/// </summary>\n\t\t/// <param name=\"data\">Data", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = (order == SortOrder.DESCENDING) ? -1 : 1;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "          for (int j = 0; j < N_INDEXES; j++)\n            {\n                _units2Indx[j] = j;\n            }\n        }\n    }\n}\nThe code above is incomplete and needs to be completed to function properly. The missing", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "# Create a new compute rate\ncompute_rate = ComputeRate(description='TestComputeRate', fields={'Used CPU': {'per_time': 'Hourly', 'variable_rate': '1'}})\ncompute_rate.create()\n# Create a new storage rate\nstorage_rate =", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.WriteData( offset, length, src, discardWholeBuffer );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new AxiomException(", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.scan_sat = buildTerTransponder(self.session, self.feid, self.orbital_position, self.satfinder_scan_nims.value)\n\t\tself.scan_sat.addNotifier(self.retune, initial_call", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "          else {\n                String[] filters = filterStr.split(\",\");\n                for (String filter : filters) {\n                    String[] parts = filter.split(\":\");\n                    if (parts.length != 2) {\n                        throw new IllegalArgumentException(\"Invalid filter format", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "              // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the decoded row to the previous row\n                Array.Copy(curr, 0, prior, 0, bytesPerRow);\n", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "      s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('com.example.Interface'))\n        s.set_interface", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def __str__(self):\n        return \"MASS object\"\n\nI'm trying to add a method to this class that computes the Massey product of two elements in the first cohomology group. The method is called massey_product and it takes two elements as arguments", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "          AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\" or extension named \\\"protobuf_unittest.TestAllTypes.nosuchfield_extension\\\".\",\n               ", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\tfinal Object old = map.remove( key );\n\t\treturn old;\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal Iterator it = m.entrySet().iterator();", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member deleting an auction\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\nclass HrAttendanceAction(models.Model):\n    _inherit = 'hr.attendance.action'\n\n    def attendance_action_change(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns the new attendance record.\n        \"\"\"\n        self.ensure_", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = null;\n\t\tfor (int i = 0; i < form.grdResults().getRows().size(); i++)\n\t\t{\n\t\t\tgrdResultsRow row = (grdResultsRow) form.grdResults().get", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "              pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// Set the position of this item.", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "      terminal = maker.new_terminal(self, cwd, profile, debugtab)\n        self.add_terminal(terminal)\n        self.show_all()\n        self.terminator.last_active_window = self.uuid\n        self.terminator.last", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    toReturn.Add( new StructTypeInfo( nameArraySizeFragment, managedType, marshalAttribute, arraySize ) );\n                }\n            }\n            return toReturn;\n        }\n    }\n    public class StructInfo\n    {\n        public StructInfo( string name,", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type == null || base_type.IsValueType;\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsByRef {\n\t\t\tget { return false; }\n\t\t}\n\t\tpublic override bool IsPointer {\n\t\t", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "              throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}\n//What is the next line of code?\n//The next line of code should be:\n//throw new Exception(\"Could not find model: \"", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n    self.context = OpenSSL.SSL.Context(\n        _openssl_versions[protocol],\n        OpenSSL.SSL.SSL_OP_NO_SSLv2 | OpenSSL.SSL.SSL_OP_NO_SSLv3 |\n        OpenSSL.SSL.SSL_", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.LabelProp = \"page\";\n\t\t\tthis.label8.UseMarkup = true;\n\t\t", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "# headbook.connect(\"page-reordered\", page_reordered)\n\n# The following code is for the statusbar\n# statusbar = gtk.Statusbar()\n# statusbar.pack(expand=True, fill=True)\n# notebooks[\"statusbar\"] = statusbar", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "  \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Close-all-tabs\": QKeySequence(Qt.CTRL + Qt.Key_W),\n    \"Close-all-tabs-except-current\":", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\"\n\t\t\t\t+ this.persistenceProviderClassName + \", transactionType=\" + this.transactionType\n\t\t\t\t+ \", nonJtaDataSource=\" + this.", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "  IEditorInput editorInput = getEditorPart().getEditorInput();\n    if (editorInput instanceof IFileEditorInput)\n    {\n      IFileEditorInput fileEditorInput = (IFileEditorInput)editorInput;\n      return fileEditorInput.exists() && !fileEditorInput.", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(728, 12);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(32", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "      if (sb != null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n}\n\n// The following code is missing, it should be added to the end of the file\n\n// This method is", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC6979_TestVector1 ()\n\t\t{\n\t\t\tbyte[] key = { ", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(EnumSwitcher.option_1) {\n\t        case option_1:\n\t            current_sum += 4;\n\t            break;\n\t        case option_2:\n\t            current_sum += 4;\n\t            break;\n\t        case option", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "      return null;\n      String jdk = java.GetValue(\"InstallPath\").ToString();\n      return jdk;\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (javaHome != null)\n        return javaHome", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "  comment = l\n\n    if job is not None:\n        if l.split()[0] == job:\n            return [comment, l]\n\n    return []\n\n    def find_env(self, name):\n        # attempt to find env by name\n        for l in", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# Mesh Modifiers\n# -------------------------------------------------\n# old - remove after recreating meshes through import\n# -------------------------------------------------\n# Mesh Modifiers\n# -------------------------------------------------\n# old - remove after recreating meshes through import\n# ------------------------------------------------", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "          double[] likelihoods = new double[totalBuckets];\n            for(int i = 0; i < totalBuckets; ++i)\n            {\n                double rankBucket = mScoreRankBuckets.get(i);\n                int rankCount = rankCount", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "      for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n       ", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\nif __name__ == \"__main__\":\n    p = Pydump()\n    args = p.arguments()\n    if args:\n        if args.inspect:\n            p.inspect = Inspect()\n            p.cap = p.sniff(iface=args.", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "          this.rptComboBox.Location = new System.Drawing.Point(91, 132);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(221,", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "          'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),\n            'creator': ('django.db.models.fields.related.ForeignKey', [], {'to", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "              // If we're processing imports, we may not have processed the type yet, but we'll need to\n                // add it to the list of types to process.\n                if (isProcessImports()) {\n                    addTypeToProcess(targetNamespace, sdoType", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "      self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_refuse(self, cr, uid, ids, context=None):\n        self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "          set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets the number of columns in the grid\n        /// </summary>\n        int IBOColSelector.NoOfColumns\n        {\n            get { return this.Columns.Count; }\n       ", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "          return String.Format(\"{0} ({1}): {2} ({3}): {4} ({5})\",\n                this.Name,\n                this.ShortName,\n                this.TypeDescription,\n                this.TargetName,\n                this.Is", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainFactory.getDomainObject(valueObject.getCareContext().getClass(), valueObject.getCareContext().getID(), valueObject.getCareContext().getVersion());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "          [\"cargo\", \"build\"],\n            cwd=self.get_project_dir(),\n            env=env,\n            args=opts)\n        if status:\n            return status\n        if release:\n            release_path = path.join(base_path, \"release\",", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double[] { 0, n }, false));\n\t\t}\n\t}\n\t/**\n\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "              Stashed.SetStashDiffs(gitStash.Revision, gitStash.Revision, ResourceManager.Strings.Stash, gitItemStatuses, null, null, null);\n            }\n            Loading.Visible = false;\n            Stashes.Enabled = true", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "# print out the addresses of the beam monitors:\nst_AssignAddressItem_print_out(\n    job.ptr_assign_address_item(\n        lattice_buffer_id=lattice_buffer_id,\n        output_buffer_id=output_buffer_id,\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "      if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.match(that) > 0;\n    }\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(\"AddInt\", asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += PaneldatenDto.TAB;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "# Load the archive index\narchive_index = load_archive_index(args.index_file)\nif archive_index is None:\n    sys.exit(1)\nargs.func(archive_index, args)\n# Uncomment the following line to test the change password functionality\n#", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "      self.mosi_bits = self.parse_bits(mosi)\n        self.ss, self.es = ss, es\n        self.samplenum += 1\n        # TODO: Handle 'DATA' packets.\n        # TODO: Handle 'CMD' tokens.\n       ", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "        cursor += v_3;\n        } while (false);\n        // setlimit, line 200\n        limit = cursor;\n        // call R1, line 200\n        r1();\n        // setlimit, line 200\n        limit = cursor", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "              o = cls.newInstance();\n                if (cd == null) {\n                    cd = new ChannelData(channel, cls, fingerprint, msg_size);\n                    channelMap.put(channel, cd);\n                    channelList.add(cd);\n                   ", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "  def _get_key_usage(self):\n        try:\n            extensions = self.cert.get_extensions()\n            for extension in extensions:\n                if extension.get_short_name() == 'X509v3 Key Usage':\n                    return extension.", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (i != _slots.end());\n\t\t\t}\n\t\t\tif (still_there) {\n\"\"\", file=f)\n    print(\"\\t\\t\\tif (v) {\", file=f)\n    print", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "# The following code is a test case. It is not part of the code to be completed.\nif __name__ == \"__main__\":\n    # The following code is a test case. It is not part of the code to be completed.\n    sm = \"\"\"\n        D: 0x", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = la.pos; int col = la.col;\n\t\t\twhile (StartOf(11)) {\n\t\t\t\tif (StartOf(12)) {\n\t\t\t\t\tGet();\n\t\t\t\t\tsym.attrPos.Add", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n#\n#    OpenERP, Open Source Business Solution\n#    The OpenERP Project: http://www.openerp", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS+\"/ssl\");\n\t\treturn new ServiceDescription(\"_openhab-server-ssl._tcp.", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "              permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testVirtualPermissionServiceExtension() throws Exception\n    {\n       ", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "# Here you can add your test cases for the Enumerator class.\n# Each test case should start with the name of the test and\n# should be a method of the TestEnumerator class.\n# For example:\n# def test_match_subsystem(self, context):\n#    ", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "# Initialize device\ndevice = Device(deviceToken)\n# Initialize user\nuser = user.newUser(loginId, password)\n# Login\ndata = user.login()\n# Check inspection\ndata = device.check_inspection()\n# End tutorial\ndata = user.endTut", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "# Parse the command line arguments.\nargs = docopt(__doc__)\n# Set up the observatory.\nobserver = ephem.Observer()\nobserver.date = args['--date']\nobserver.lon = args['--longitude']\nobserver.lat = args['--", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "          ItemID = 0x1011 + (int)(Math.Min(MaxKeys, Keys.Count) * 10);\n        }\n        private class InternalTarget : Target\n        {\n            private KeyRing m_Owner;\n            public InternalTarget(KeyR", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "      for (String device : devices) {\n            String deviceName = device;\n            String deviceIpAddress = \"\";\n            String deviceModel = 0;\n            if (ipAddressMap.containsKey(deviceName)) {\n                deviceIpAddress = ipAddressMap.get(deviceName", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "  if (lastSeenVersion < Version.USER_NOTIFICATIONS) {\n      jobs.put(Version.USER_NOTIFICATIONS, new UserNotificationsMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAYDREAM_MIGRATION) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "    List<Pattern> regex = new ArrayList<>();\n      for (String regexString : split[0].split(\"\\\\s+\")) {\n        regex.add(Pattern.compile(regexString, ignoreCase ? Pattern.CASE_INSENSITIVE : 0));\n      }\n      String type", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "      for p in path:\n            try:\n                node = self.fs.Find(os.path.join(p, n),\n                                   self.env,\n                                   self.env[self.keyword_paths[include[0]]])\n                if node:", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "# Mapnik Python bindings are built using SWIG, which generates a Python module\n# for each C++ class. The generated module is named after the C++ class.\n# The following lines are used to register the generated Python modules with\n# Python.\n# The first line imports the generated module for", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "# Initialize the Ansible module\nmodule = AnsibleModule(\n    argument_spec=f5_argument_spec(\n        parent=dict(type='str', required=True),\n        name=dict(type='str', required=True),\n        ip=dict(type='", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "=====================\nclass MethodAddView(AutomateExplorerView):\n    title = Text('#title')\n    # ...\n    playbook_input_parameters = PlaybookInputParameters()\n    add_button = Button('Add')\n\n    @classmethod\n    def is_display", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "          throw new Exception(\"ActionFactory: getActionObject: \"\n                    + \"Action class not found: \" + className);\n        }\n        return result;\n    }\n    public void publishEvent(EventObject event) {\n        // publish event to all subscribers\n        for (", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "=====================\n\nclass ThreadTest(TestCase):\n    \"\"\"Tests for thread views.\"\"\"\n    def setUp(self):\n        super(ThreadTest, self).setUp()\n        self.client = Client()\n        self.course_key = SluggedOrganization.objects.get", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "# if not msvc_exists(env, 'link'):\n#     raise SCons.Errors.SConsError('MSVC linker not found')\n#\n# The following code is used to set up the environment for the linker.\n# It is called from the SCons.Tool", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "          ISchedulingRule rule = getSchedulingRule();\n            if (rule != null) {\n                Job job = new Job(\"\") { //$NON-NLS-1$\n                    @Override\n                    protected IStatus run(IProgressMonitor monitor) {\n                       ", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t// Allocate output row meta\n\t\tdata.outputRowMeta = new RowMetaClone(getInputRowMeta());\n\t\tmeta.getFields(data.outputRowMeta, getStepname(), null, null, this);\n\t\t\n\t\treturn super.init(smi", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "```python\nassert f('..', last=d(2014,1,31, 19,30)) == (d(2014,1,31, 19,30), d(2014,1,31, ", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "          else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            int walkingrange = Utility.ToRange(Utility.ToInt35(swalkingrange), 0, 12);\n           ", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "def test_qemu_suspend_resume(test, params):\n    \"\"\"\n    Test qemu suspend and resume functionality.\n\n    :param test: QEMU test object.\n    :param params: Dictionary with the test parameters.\n    \"\"\"\n    gs = GuestSuspend", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "      service.submit(pub);\n        service.awaitTermination(30, TimeUnit.SECONDS);\n        int received = rc.get();\n        System.out.printf(\"Received %d messages%n\", received);\n        service.shutdown();\n    }\n}\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "          if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(r, destination, res);\n            }\n            this.owner.getDecorator().", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn (uint)value;\n\t\t\tif (value <= 0x3FFF)\n\t\t\t\treturn (uint)((ushort)(value >> 8) | 0x8000", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "      self.fm.execute_console_command(\n            \"arj \" + \" \".join(au_flags) + \" \" + one_file.path,\n            callback=refresh)\n# Extracts copied archive (yy) --> extract\nclass extract(Command):\n    def execute", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringString_ConstructorFlag ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (typeof (COMTest), new string[] { \"MonoTests.System.ActivatorTestInternal.COMTest\", \"2", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "  def testOneOldAndOtherNew(self):\n        da = Locale.objects.get(code='da')\n        de = Locale.objects.get(code='de')\n        repo = self._setup(da, Action.ACCEPTED, Action.REJECTED)\n", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "          self.Log.debug(\"Sending userstate to server\")\n            self.send_message(PYMUMBLE_MSG_USERSTATE, userstate)\n            cmd.response = True\n            self.commands.answer(cmd)\n        elif cmd.cmd == PYMUM", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "      PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.setLeader(player);\n        }\n    }\n    public static PlayerGroup getGroup(int teamId) {\n        return groups.get(teamId);\n    }", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\ndef test_vltable():\n    \"\"\"\n    test vltable\n    \"\"\"\n    logger.debug(\"test_vltable\")\n    # create a table\n    table = vltable()\n    # add some rows\n    table += vltable.addrow(\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "  def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        column._update_cell_", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t}\n\twhile (parent instanceof Grid);\n\t((Grid) parent).addColumn(column);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "              ImageIndex = Convert.ToInt32(ReadElement(element, \"ImageIndex\"));\n            } catch (Exception ex) {\n                throw new Exception(\"Error loading creature \" + Convert.ToString(GUID) + \":\\n\" + ex.Message);\n            }\n        }", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\telse if ( m_Peerless == PeerlessList.MelisandeTrammel || m_Peerless == PeerlessList.MelisandeFelucca )\n\t\t\t\t\t\tm_key[i] = new MelisandeActiv", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "Version(1, new int[]{1, 1, 1, 1, 1, 1, 1, 1},\n        new ECBlocks(1, new ECB(1, 29)),\n        new ECBlocks(1, new ECB(1, 2", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pbOut = kdf.DeriveBytes(pbKey, pbMsg, p);\n\t\t\tif(!MemUtil.ArraysEqual(pbOut, pbExpc))\n\t\t\t\tthrow new Exception(\"Argon2d13 test failed\");\n#endif\n", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to lower the cost.\n\t", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Add your custom middleware classes here.\n#MIDDLEWARE_CLASSES += (\n#    'yourproject.middleware.MyMiddlewareClass',\n#)\n# Add your custom template tags here.\n#TEMPLATES = [\n#    {\n#       ", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "      if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList != null))\n                return false;\n        } else if (!this.actionTraceList.equals(other.actionTraceList))\n            return false;\n        if ((this.screensh", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "          dc.number = PhoneNumberUtils.parse(p.readString(), null);\n            voiceSettings = p.readInt();\n            dc.callType = voiceSettings & RIL_CALL_TYPES_MASK;\n            dc.callHandle = p.readInt();\n            dc.", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "          for (int x = 0; x < xSizeP; x++)\n            {\n                int index = y * xSizeP + x;\n                newVertices[index] = new Vector3(x + leftBottomCorner.x, y + leftBottomCorner.", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_METHOD_ADD, testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tresult = ((Integer) rawResult).intValue();\n\t\t\t\t\n\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void addC", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "          out.writeBoolean(false);\n            out.writeUTF(\"Object not found\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeInt(found.identifier);\n        }\n        out.flush();\n        out.close();\n        in", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        16 + (~stactics.display_buffer[i] & 0x0f),\n                        16,\n                        pixel_x, pixel_y,\n                        Machine.drv.gfxdecodeinfo[0].pens[1],\n                        Machine.", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                    .Distance(position) <= spell.Width &&\n                                    minionPrediction.CastPosition.To2D()\n                                        .Distance(position) <= spell.Width)\n                                {\n                                    result.Add(target);\n                                    break;", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "      return existsInducingPathInto(x, y, graph, new HashSet<>());\n    }\n    public static boolean existsInducingPathInto(Node x, Node y, Graph graph, Set<Node> visited) {\n        if (x.getNodeType() != NodeType.", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if (pop[i] is Drawable)\n                        plcs.Push(pop[i] as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the siblings", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "      if (this.attachmentFile == null && other.attachmentFile != null) {\n            return false;\n        }\n        if (this.attachmentFile != null && other.attachmentFile == null) {\n            return false;\n        }\n        if (!StringUtils.equals(this.", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (mobiles[i] != from && mobiles[i].Alive && SpellHelper.CheckToxic(from, mobiles[i]))\n                            AOS.Damage(mobiles[i], from, m_Item.GetDamage(), 0, ", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t\t{\n\t\t\t\t\tHistory.OrderByDescending(kv => kv.Value.Time).First().Value.Dis", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "  return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public List<ComponentInstLight> getAvailComponentInstLights(String userId, String componentName,\n          String spaceId) {\n    return mock.getAv", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog2 = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog2.show(", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "      if (this.channel != null && this.channel.isOpen()) {\n            this.channel.close();\n        }\n    }\n    public void close(IChatBaseComponent ichatbasecomponent) {\n        if (this.channel != null && this.channel.isOpen())", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "              z_arr[p_index, kk, :] = z_dict[z_key][per][:]\n                z_err_arr[p_index, kk, :] = z_dict[z_key][per][3:]\n            for t", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "    return context.getString(resourceOne, name);\n    }\n    String names = String.join(\", \", recipients.stream().map(Recipient::toShortString).toArray(String[]::new));\n    return context.getString(resourceMany, names);\n  }\n}", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "      env[\"PATH\"] += os.pathsep.join(extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] += os.pathsep.join(extra_lib)\n        if self.config[\"tools\"][\"ccache\"]:\n            env", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "def load_manifest(tests_root, url_base=\"/\"):\n    \"\"\"Loads a manifest file from the given directory.\"\"\"\n    manifest = Manifest(url_base)\n    for rel_path, source_file in sourcefile_items((tests_root, url_base, rel", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "      compiledScript = null;\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding() {\n            @Override\n            public Object getVariable(String name) {\n                return ScriptUtils.getVariable(name, this);\n            }\n            @", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "          throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\nclass AtomicGradientTransformer(Transformer):\n  \"\"\"\n  TODO: Implement gradient transformation.\n  \"\"\"\n  def __init__(self, transformer):\n    self.transformer = transformer\n  def transform(self, X, y, w):\n    \"\"\"\n   ", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo) obj;\n\t\tif (this.id == null && other.id != null)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tif (this.", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "      assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n    @Test\n    public void shouldFindStacksWithNoTags() throws Exception {\n        stacks[0].getTags().clear();\n        stacks[1].getTags().clear();", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "      Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterCode(\"DEPTH\");\n        depthParameter.setParameterFamily(pf);\n        depthParameter.setValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION_REGEXP\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// If the pattern is a single node, then the candidate must be that node\n\t\t\tif (pattern.IsLeaf)\n\t\t\t\treturn candidate.IsLeaf && candidate.Equals(pattern);\n\t\t\t// If the pattern is a list, then the candidate", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "              if (colisionList.Any())\n                {\n                    extendedWillHit++;\n                    extendedFarmLocation = colisionList.First().Position;\n                }\n                }\n                int shortenWillHit = MinionManager.GetMinions(q.", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(contextMenus);\n\t\t// Controls\n\t\tsuper.addControl(factory.getControl(ctnContractDetailsContainer.class, new Object[] { control, new Integer(startControlID.intValue()), new Integer(startTabIndex.intValue", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "@task\n@timed\ndef install_python_prereqs():\n    \"\"\"\n    Install Python prerequisites.\n    \"\"\"\n    if no_prereq_install():\n        print(\"Skipping Python prerequisites installation.\")\n        return\n    create_prere", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "          'sub_ids': [(6, 0, self.env['test_testing_utilities.sub2'].create({\n                'name': 'sub2'\n            }).id)]\n        })\n        f = Form(r)\n        with self.assertRaises(", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "  assert simplify(Sum(x**2, (x, a, b)).change_index((a, b, x))) == \\\n        Sum(y**2, (y, b, a))\ndef test_change_index_issue_1112():\n    assert simpl", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=UnityEngine", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "              this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeRemove(action, changedItems, startingIndex);\n            }\n        }\n        private void InitializeRemove(NotifyCollectionChangedAction action, IList oldItems,", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "          String xml = writer.toString();\n            InputSource inputSource = new InputSource(new StringReader(xml));\n            XMLStreamReader xmlStreamReader = xmlUnmarshaller.parse(inputSource);\n            XMLStreamReaderReader reader = new XMLStreamReaderReader(xmlStreamReader);\n            Object", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.CampusType = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  Width: {0}\", ide.width);\nConsole.WriteLine (\"  Height: {0}\", ide.height);\nConsole.WriteLine (\"  ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"  Planes: {0}\", ide.planes", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "              // adds a JSR block to the successor of the RET blocks in the subroutine\n                for (Label successor = l.successor; successor != null; successor = successor.successor) {\n                    if (successor.status & Label.TARGET)", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "          ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method, __mStack);\n            UnityEngine.Ray instance_of_", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.select(position.name().toLowerCase().equals(\"inside\") ? 0 : 1);\n\t\t\tlblLabelPosition.setText(\"Label Position: \" + position.name());\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {\n", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "      currImageValue = self._getCurrentImageValue( driver )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue\n        print \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImageValue)-1", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "=====================\n\nclass KexGSS(object):\n    \"\"\"\n    This class implements the GSS-API key exchange method as defined in RFC 4254.\n    \"\"\"\n    def __init__(self, transport):\n        self.transport = transport\n        self.", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "          FileSystemNode newFolderNode = FileSystemNode.createFolderNode(overallNodeName, disableTreeSelection);\n            FSTree tree = this.tree;\n            tree.setCurrentNode(newFolderNode);\n            tree.setSelectedNode(newFolderNode);\n            tree.", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "              self.cr.execute(\"SELECT sum(number_of_days) as number_of_days, sum(number_of_hours) as number_of_hours\\\n                            FROM smart_salary_payslip as hp, hr_payslip", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "  mf, dlnmdlnm = halo_mass_function(lnMassSigmaSpl, chiarr, dlnz, mmin, mmax, Ns, constk, cosmo, omega_b, omega_cdm, omega_lambda, h, n", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "      d.height = font.getSize() + getSettings().getLineHeight();\n        return d;\n    }\n    /**\n     * Overrides FigText's method to return a new FigText with the same\n     * properties.\n     *\n     * @return a new Fig", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "#self.cal_p2()\n#self.all_in_all(phi,flag)\n#self.print_path()\n#self.print_result()\n#self.print_xyz()\n#self.print_xyz_os()\n#self.print_", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void SecuritiesButton_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "=====================\n\nclass _Hist3D(Hist):\n    def __init__(self):\n        Hist.__init__(self)\n\n    def _parse_args(self, *args):\n        params = [{'bins': None,\n                   'nbins': None,\n", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "          Roster roster = protocol.getRoster();\n            RosterItem rosterItem = roster.getRosterItem(contact.getUserId());\n            if (rosterItem != null) {\n                rosterItem.setLastMessage(query.getLastMessage());\n              ", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "      im1L = im1.convert(\"L\", rgb2I)\n    else:\n        im1L = im1\n    h1 = im1L.histogram()\n\n    #compute transform\n    x = arange(0, 256, 1)", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tif (tag.canDoIt()) {\n\t\t\t\ttag.selectNextRecord();\n\t\t\t\treturn readLog24(tag, sfi);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected abstract Application createApplication", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "=====================\n\nclass ACEParser(Parser):\n    \"\"\"\n    ACE parser\n    \"\"\"\n    def __init__(self):\n        Parser.__init__(self)\n        self.current_size = 0\n        self.current_block = None\n        self.blocks", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter.removeCommAdapterByteListener(this);\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "\n        path_info = environ['PATH_INFO']\n        for prefix, app in self.apps:\n            if path_info.startswith(prefix):\n                return app(environ, start_response)\n        raise NotFoundError(path_info)\n# vim:", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.train()\n\t\tmodel.savemodel( sys.argv[ 3 ] )\n\telse : print \"Usage : python %s <datafile> <outputmodel", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "          if (Utility.RandomDouble() < (double)chance / 100.0)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n\nI'm trying to", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "\n        entries[entry_name] = entry_value\n\n        # Create the enum type\n        EnumType = type(\n            'Enum_%s' % type_name,\n            (rdltypes.UserEnum,),\n            {'values': entries}\n        )\n        return", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    MessageBox.Show(\"Unable to locate any modules to install.\");\n                    this.Close();\n                }\n            }\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (isQuiet())\n            {\n              ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "              object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "              if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(this.textureArray[textureHash] != null)\n                {\n                    if(this.currentTexture != null && this.currentTexture != this.textureArray[", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "@login_required\n@handle_500(template_path='500.html')\n@add_p3p_header\ndef my_view(request):\n    \"\"\"\n    This is a sample view that does nothing but return a 500 error.\n    \"\"\"", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Driver driver = idlePool.Dequeue();\n                    if (driver.Connection.IsExpired(now))\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else\n                    {\n                        idlePool.Enqueue", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "  return [var] if name in ('resolution', 'radius') else var\n\ndef _verify_list(var, name, length):\n    \"\"\"Ensure that list-like parameter has the correct length.\"\"\"\n    if not isinstance(var, (list, tuple)):\n        raise ValueError('", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "# Register the quest\n# This line is needed to register the quest with the system.\n# It will be read by the GM when the server is started.\n# The line below is needed to register the quest with the system.\n# It will be read by the GM when the server is started.\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60 * 60 - (double)num1 * 60) % 60);\n\t\t\t\t\tempty = string.Format(\"{", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "          // Initialize the shader program\n            Program = GL.CreateProgram();\n            GL.AttachShader(Program, GL.CreateShader(ShaderType.VertexShader,\n                System.IO.File.ReadAllText(\"VertexShader.glsl\")));\n            GL.AttachShader(", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\n    def add_reaction(self, reaction):\n        \"\"\"Add a reaction to the model\"\"\"\n        reaction._model = self\n        self.reactions.append(reaction)\n        # update awareness\n        for metabolite, stoichiometry in reaction._metabolites.items", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(Object bean : beans)\n\t\t{\n\t\t\tims.clinicaladmin.vo.TumourGroupListVo vo = new ims.clinicaladmin.vo.TumourGroupListVo();\n\t\t\tvo.setBean((ims.cl", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent = lines[selectedLine];\n\t\t\t\twhile(foundBottom){\n\t\t\t\t\tfoundBottom = false;\n\t\t\t\t\tfor(int i=lines.length-1; i>=0; i--){\n\t\t\t\t\t\tif", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "      new LayoutAnimationController(set, 0.2f);\n        mListView.setLayoutAnimation(controller);\n    }\n\t\n\t/**\n\t * Fill the list with data.\n\t */\n\tprivate void fillData() {\n\t\tList<WeaveBookmark>", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "              if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.SetFieldKey(HighestNumber + 1);\n        }\n", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.ssToInt(protein.getStructure()[i]) != Mappings.indexUnknown)\n\t\t\t{\n\t\t\t\tInstance instance = this.", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
