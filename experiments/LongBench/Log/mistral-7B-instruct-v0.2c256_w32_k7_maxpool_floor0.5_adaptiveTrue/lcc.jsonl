{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tMobile m = p.", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tself._init(graph, Y, Z)\n\t\t\tA = self.best_branching(Y, Z)\n\t\t\tsolutions.append(A)\n\t\t\tP.put((self.graph_score(A), A))\n\t\treturn solutions", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "if __name__ == '__main__':\n    TestSndfile.main()\n    TestSeek.main()\n\"\"\"\n# This is a test script for the pysndfile module.\n# It tests the basic functionality of the module.\n#\n# The script opens a test", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def get_video_status(self, video_id):\n        \"\"\"\n        Get the status of a video.\n        \"\"\"\n        # TODO: Implement this method\n        pass\n\nThis method is supposed to get the status of a video. \n\nHere's a possible implementation", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t\twriter.addAttribute(\"label\", styleValue.getLabel());\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\ndef get_question_data(question_id):\n    # This function should return a QuestionData object\n    # that can be used to ask the question and check answers\n    # The question_id is the id of the question in the database\n    # The question_id is a string\n", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    mob.Target = new SR_Target(SR_Gump.this, 2);\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRuneBookPrompt(", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "          for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n        }\n        s.println(\"***\");\n    }\n}\n\n/*\n * ServerKeyExchange:  Server sends its certificate chain and its public key", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "          try {\n                sp = new JESpace (name, path);\n                spaceRegistrar.put (name, sp);\n            } catch (SpaceError e) {\n                warn (\"Error creating space: \" + e.getMessage());\n                return null;\n           ", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tprivate void consumeItem() {\n\t\t\t\tif (item instanceof AlchemistItem) {\n\t\t\t\t\tAlchemistItem alchem", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "# Create a dispatcher and a server\ndispatcher = SimpleSOAPDispatcher()\nserver = HTTPServer(('localhost', 8000), WSGIHandler(dispatcher))\n# Start the server\nlog_format = '%h %l %u %t \"%r\" %s", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "  def lock_status(self, status_id):\n        self.statuses[status_id]['locked'] = True\n        self.update()\n        self.show()\n\nI want to add a method to this class that will update the statuses in the UI when a new status is", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "def action_create_copy(self, source, dest, session):\n    self.log_info(\"Creating copy from %s to %s\" % (source, dest))\n    try:\n        conn = self.get_connection(session)\n        conn.exec_command(\"l", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsInstanceOf<ZoneIdentityPermission> (c);\n\t\t\tAssert.IsNotNull (c);\n\t\t\tAssert.AreEqual (SecurityZone.Untrusted, c", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "# Create a context with our custom managers\ncontext = SSLContext.getInstance(\"TLS\")\ncontext.init(None, self.trustAllX509TrustManager(), None)\n# Create a socket with our context\nsocket = context.getSocketFactory().createSocket(\"localhost\", 8", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "      DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}\n```\nThe code above is incomplete, and you are required to complete it. Here's what you need to do:\n\n1.", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "      self.__tmp_file = os.path.join(self.__tmp_dir, 'datastream-%s.dat' % str(uuid.uuid4()))\n        self.__datastream_fd = os.open(self.__tmp_file, os.O_RDWR | os", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, 0));\n\t\t\t\t\t//get the new weight\n\t\t\t\t\tstring newWeight = Convert.ToString(store.", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "      String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] != null) {\n                String argName = args[i].getName();\n                if (argName", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}));\n\t\tprivate final ConfigFile configFile;\n\t\tprivate static ConcurrentMap<String, Person> persons;\n\t\tprivate static ConcurrentMap<UUID, Firm> firms;\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\t// Add the nodes to the manager\n\t\tmgr.addToRoot(playbackNode);\n\t\tmgr.addToRoot(shortcutsNode);\n\t\tmgr.addToRoot(new PreferenceNode(\"fontPreferences\") {\n\t\t\t@Override\n\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "              if (m_Owner.m_Target != null)\n                {\n                    AddEntry(m_Owner.m_Target, m_Owner.Caster.AccessLevel);\n                }\n            }\n        }\n        private class InternalTarget : Target\n        {\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "# def _finalize_loaded(self, states):\n#     \"\"\"\n#     Calls :meth:`_finalize_loaded` on each state in the given list,\n#     which will perform any necessary :class:`SessionExtension`\n#     calls and :meth:`_exp", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tString name = field.getName().toString();\n\t\t\tfinal String shortName = field.getType().getSimpleName().toString();\n\t\t\tfinal List<IField> fieldsWithSameName = name2Field.get(", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "====================\n\nclass UIModule(object):\n    \"\"\"\n    A UIModule is a RequestHandler subclass that can be used to build a\n    web application.\n\n    .. testcode::\n\n        import tornado.web\n\n        class MainHandler(tornado.web.", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n//\n// Generated by the Novell.Data.Designer.CommonDataLayer tool.\n// Do not modify this code. Set the DataSource property of the MultiView control to a data source ID to configure", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "if __name__ == '__main__':\n    args = parser.parse_args()\n    downloader = WigleDownloader( args.user, args.password, args.coordfile, args.outpath )\n    downloader.run()", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "              if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonusType(1) != BonusType.SkillPoints)\n                    {\n                        foreach (SkillName sk in", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "      builds += [{'os': 'Windows', 'os_pretty': 'Windows',\n                    'arch': 'x86', 'arch_pretty': '32-bit',\n                    'version': version,\n                    'download_url': make_download_url(", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateID = StatusBL.getStateIDByProjectIDAndIssueTypeID(projectID, issueTypeID, objectID);\n\t\t\tif (stateID==null) {\n\t\t\t", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "          foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if (argumentSyntax.Expression is IdentifierNameSyntax identifierNameSyntax && memberList.Any(x => x.Identifier.ValueText == identifierNameSyntax.Identifier.ValueText)) {\n                    var memberDeclaration = memberList", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "      split_test = self._update_partition_id(0)\n        # Verify that the children have been updated to match the new group configuration.\n        self.assertEqual(split_test.children[0].display_name, 'Group 0')\n        self.assertEqual(split_test", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "          if (vertical) {\n                // we need to sort the metrics\n                Array.Sort(metrics, this);\n            }\n            // we need to create the font dictionary\n            PdfIndirectObject font = writer.DirectObject;\n            font.Put(PdfName.", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// this cell is not yet placed\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "      task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      try (InputStream is = context.getResources().openRawResource(model.getSprite())) {\n        return BitmapFactory.decode", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "              if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "# TODO: Add NodeManagePoliciesForm and NodeEditTagsForm to the NodeView class\n# TODO: Add NodeManagePoliciesForm and NodeEditTagsForm to the NodeView class\n# TODO: Add NodeManagePoliciesForm and NodeEditTagsForm to the NodeView class\n#", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequences, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifySequenceListeners(BigInteger timestamp,\n\t\t\tLabanSequence sequence)", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "              if (Enabled)\n                    ImageUrl = EnabledImageUrl;\n                else\n                    ImageUrl = DisabledImageUrl;\n            }\n            base.Render(writer);\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "sharpness = compound.getInteger(\"sharpness\");\n\t}\n\t\n\t@Override\n\tpublic NBTTagCompound writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "      return getId() + \" [\" + getProbability() + \"%]\";\n    }\n}\n/**\n * The effect of a disaster.\n */\npublic class DisasterEffect extends Effect {\n    /**\n     * Creates a new <code>DisasterEffect</code>.\n    ", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "# Allow admin to access any group\nt = store.store.tokens.create(username='admin', groups=['everyone'], read=True, write=True)\nassert t is not None\nassert t.token is not None\nassert t.token.startswith('Bearer ')", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "# Test that the delta document is correctly created\ndelta = person.to_delta()\nself.assertEqual(len(delta), 3)\nself.assertIn('name', delta)\nself.assertIn('owns', delta)\nself.assertIn('employer', delta)\n", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "=====================\n\ndef save_plot(fig, filename):\nif figure_writer is not None:\nfigure_writer.savefig(fig, filename)\nelse:\nprint('No figure writer available')\n\nThis code saves a plot to a file using a figure writer. If no figure", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "              if (!ignored.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var path in ignored)\n            {\n                toScan.Remove(path);\n            }\n            foreach (var path in", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E merge(K key, I value, BiFunction<? super E, ? super I, ? extends I> remappingFunction) {\n\t\tI internalValue = internalMap.get(key);\n\t\t", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "      cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) > 0:\n            con = resbrains[0].getObject()\n            obj = pdt.getDis", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tpublic int Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z = value; }\n\t\t}\n\t\tpublic int X\n\t\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    // get channel_uri\n                    channelUri = GetParcelChannelUri(land.ParcelID);\n                    // create parcel voice info\n                    parcelVoiceInfo = new ParcelVoiceInfo(land.ParcelID, channelUri);\n                    // create", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriod pp=new PayPeriod();\n\t\t\tpp.DateStart=textDateStart.DateTime;\n\t\t\tpp.DateStop=textDateStop.DateTime;\n\t\t\tpp.DatePaycheck=text", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "      lat, lon = _build_lat_lon_from_headings(column_headings)\n        # Convert the X and Y headings to lists.\n        x_values = [float(x) for x in column_headings['X']]\n        y_values = [", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "# This function is used by the group_member_create function to check if the user\n# is allowed to add a member to the group or organization.\ndef _check_group_or_org_member_auth(context, data_dict):\n    group_or_org_id = data", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tString label = example.getLabel(predictionAttribute.getName());\n\t\t\t\tint childIndex = Integer.parseInt(label);\n\t\t\t\tNode childNode = node.getChildren().get(childIndex);\n\t\t\t\t// setting outcome\n\t\t\t", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "          return this.TranslationMemory.SearchSegments(settings, segments);\n        }\n        /// <summary>\n        /// Performs a search for a single segment.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param>\n        ///", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "          codePoint = string.charAt(offset++) << 10\n                      | string.charAt(offset++) & 0x3FF;\n         }\n         if (_range != null && _range.contains(codePoint)) {\n            return offset;\n         }\n         return", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\tObservationDAO observationDAO = new ObservationDAO();\n\t\tObservation observation = observationDAO.getObservationByAccessionNumber(accessionNumber);\n\t\tif (observation != null) {\n\t\t\tString studyFormNameFromDB = observation.get", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderToClient(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.ModVersion != ModVersion)\n\t\t", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif (beans == null)\n\t\t\treturn coll;\n\t\tfor (int i = 0; i < beans.length; i++)\n\t\t\tcoll.add(beans[i].build());\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'notify':\n    notify()\nelif prnum == 'donate':\n    donate()", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "          int [] ret = new int[A.Dimensions.NumberOfDimensions];\n            A.Index(seqindex, ref ret);\n            return ret;\n        }\n    }\n}", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "pD[ 'plotName' ] = pD[ 'plotName' ].replace( ' ', '_' )\n  pD[ 'plotName' ] = pD[ 'plotName' ].replace( '/', '_' )\n  pD[ 'plotName' ] =", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (player.IsPaused || player.IsIdle || player.IsWon || player.IsLost)\n\t\t\t\treturn;\n\t\t\tif (player.IsBuilding && player.SelectedActor != null)\n\t\t\t{\n\t\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "      // Save the compiled plan\n        String plan_sql = plan.getSQL();\n        db.getDatabase().compilePlan(plan_sql, plan.getPlanId(), plan.getPlanHash(), plan.getPlanSize(), plan.getPlanText(), plan.getPlanType(), plan.", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(221, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte) parity_to_win32 (parity: parity);\n\t\t\tdcb.ByteSize = (byte) data_bits_to_win3", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "  page = self.client.get(self.user.get_absolute_url())\n    self.assertTemplateUsed(page, 'user_profile.html')\n    self.assertEqual(page.context['user'], self.user)\n    self.assertFalse(page.context['c", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "  _keep_tempdir = parser.parse_args().keep_tempdir\n    unittest.main()\nif __name__ == '__main__':\n    main()\n# vim: set fileencoding=utf-8 :\n# Local Variables:\n# mode: python\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tself.list.setList(self.newList)\n\t\t\t\tself.list.instance.setSize(self.size.width, len(self.newList) * self.size.height)\n\t\t\t\tself.list.instance.moveTo(", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "              int barWidth = (int)Math.Ceiling(xScale * fontX);\n                int barHeight = (int)Math.Ceiling(yScale * (barHeight + fontY + 2 * xScale * x));\n                return new Rectangle(0", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "  return results;\n  }\n}\n\n// The code above is incomplete. The next line of code should be:\n// return results;\n// This method returns an array of strings from the given property in the given Properties object.\n// The values of the property are assumed to be comma", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "# x_points = np.linspace(x_min, x_max, num_points)\n# y_points = np.linspace(y_min, y_max, num_points)\n# z_points = np.linspace(z_min, z_max,", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "          if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrent", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "# build_dataset()\n# save_echonet_data()\n# pickle_data()\n# slice_data()\n# slice_data_to_folder()\n# slice_data_to_folder_to_pickle()\n# slice_data_to_folder_to", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "          set { _numValues = value; }\n        }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "          this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(292, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n    def nullFunction( self, name, dll, resultType=None, argTypes=(), doc=None, argNames=(), extension=None, deprecated=False ):\n        \"\"\"\n        Create a null function object.\n\n        :param name: The name of the function.\n", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "          baos.write(emptyStreams.toByteArray());\n            writeUint64(header, emptyStreams.size());\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    alphaLevel -= 1;\n                    if (alphaLevel <= 0)\n                    {\n                        inRamp = true;\n                        try {\n                            Thread.sleep(rampDelay);\n                        } catch (InterruptedException e) {\n                            e", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "          item.CanBeRemovedFromQueue.Should().BeTrue();\n        }\n\n        [Test]\n        public void should_not_be_able_to_remove_item_from_queue_if_it_is_seeding()\n        {\n            PrepareClientTo", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "          if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n            }\n            if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken,", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "# Fit bulge and disk components\n# -----------------------------------------------------------------------\n# The following lines are used to fit bulge and disk components.\n# The bulge component is fitted first, followed by the disk component.\n# The bulge component is fitted using the Sersic law, while the", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    i += ((b & 0x08) >> 3);\n                    i += ((b & 0x04) >> 2);\n                    i += ((b & 0x02) >> 1);\n                    i += ((b & 0x", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "  @property\n    def _course_key(self):\n        \"\"\"\n        Return the CourseKey for the course.\n        \"\"\"\n        if self._course_key is None:\n            self._course_key = CourseKey.from_string(\n                u'edX+{", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tString chanceString = splitNumber[1].replace(\"%\", \"\");\n\t\t\tchance = Float.parseFloat(chanceString);\n\t\t}\n\t\treturn (int) (Math.random() * chance", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "# main\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            state=dict(choices=[\"present\", \"absent\"]),\n        ),\n        supports_check_mode=True,\n", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "          this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(12, 12);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "```\n        for plugin in self.plugins:\n            try:\n                plugin.run()\n            except Exception as e:\n                self.ui_log.error(_(\"Error while running plugin %s: %s\") %\n                                  (plugin.__class__.__name__,", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class IConferenceFossil(IEventFossil):\n    def __init__(self, conference):\n        self.conference = conference\n        self.title = conference.title\n        self.description = conference.description\n        self.startDate = conference.startDate\n        self", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(new File(file.getAbsolutePath()), messageBrowser, messageWriter);\n            } else {\n                result = parent.mirth", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getNumber(\"value\").intValue();\n\t\t       \t\t} else if (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t} else if (", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "      if (currentSession != null && currentSession.isOpened()) {\n            Bundle requestParams = new Bundle();\n            requestParams.putString(FIELDS_NAME, REQUEST_FIELDS);\n            Request request = new Request(currentSession, \"/me\", request", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.chance;\n\t\t}\n\t\tfor (Emotion emotion : emotions) {\n\t\t\temotion.chance /= sum;\n\t\t}\n\t}\n\tpublic interface UpdateHandler", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "#                    'property1': 2, 'property2': 3}\n                    'property1': 2, 'property2': 3}\n            }],\n            self.build.to_list()\n        )\n    def test_to_xml(self):\n       ", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "  Long = LongOrigin + (x/k0*cos(phi1Rad)*(1+N*sin(phi1Rad)*sin(phi1Rad)*sin(phi1Rad)*sin(phi1Rad)))\n    Lat = phi1;\n    return Lat, Long\n#================", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n    form = ReportUserForm(request.POST)\n    if form.is_valid():\n        report = form.save(commit=False)\n        report.user = request.user\n        report.save()\n        messages.success(request, \"User reported successfully.\")\n        return", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddStepOne(StepOne):\n    \"\"\"A form to add new product series\"\"\"\n    schema = IProductSeries\n    label = \"Add a new series\"\n    next_url = \"/+series/add/step2\"\nclass ProductAddStepTwo(StepTwo):\n   ", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { }\n\t\t", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "              temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}\n//The code above is incomplete, please complete it.\n//The code above is incomplete, please complete it.\n//The code above is incomplete, please complete it.\n", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "=====================\n    config_post_processors = {\n        'isa': (lambda x: (\n            set(x),\n            frozenset(x)\n        )),\n        'positional_tags': (lambda x: (\n            [TagRegex(include=True,", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "              return base.GetCustomAttributes (attributeType, inherit);\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return base.IsDefined (attributeType, inherit);\n            }\n            public override bool IsSubclassOf (", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "# Add your custom PIDs here\n# For example:\n# class OBD_PID_Custom(OBD_Packet):\n#     name = \"Custom PID\"\n#     pid = 0x2A\n#     fields = [\n#         StrLenField(\"data\", ", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.connection = self.get_connection()\n\t\tself.connection.add_signal_receiver(self.OnSessionOpened,\n\t\t                                   dbus_interface=\"org.freedesktop.Secret.Session\",\n\t\t                                   path=\"/org", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "          }\n        }\n    }\n}\n\n//This code is for the Mystic's Crafting System.\n//It adds the crafting of Enchanted Prism and Enchanted Prism of Reflection.\n//The Enchanted Prism is used to create the Ench", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    self._app_ctx._teardown_list.append(self)\n\n    if self._preserved:\n        self._app_ctx._preserved = False\n        self._app_ctx._preserved_ctx = None\n        self._app_ctx._preserved_", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "  response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubConsumer.topic_name==topic_name)\n    return response\n# #############################################################################################################################\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "          if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "dx = (angles - min(angles)) / alen\nelse:\n# 3D case\ndx = np.linalg.norm(angles - min(angles, axis=0), axis=1) / alen\n# Compute lower and upper bounds\nlower_bound = np.", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\nclass ProxyManager:\n    def __init__(self):\n        self.providers = []\n        self.enabled = False\n        self.provider = None\n        self.provider_index = 0\n        self.provider_count = 0\n        self.provider_list =", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (type == FontSize.Point) {\n\t\t\t\treturn String.Format (CultureInfo.CurrentCulture, \"{0}pt\", unit.Value);\n\t\t\t}\n\t\t\tif (type == FontSize.Percent) {\n\t\t\t\treturn String", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidOperationException(\n\t\t\t\t\t\t\t\"Invalid block size for decryption\");\n\t\t\t\t}\n\t\t\t}\n\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerObj = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerObj.Properties[0].Key, Is.EqualTo(\"The outermost object's property\"));\n\t\t\tAssert.That(innerObj.Properties[1].Key", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "              for (int w = 0; w < width; w++) {\n                    int index = h * width + w;\n                    if (w < width - 1) {\n                        edges.add(T2.of(w+\"\", (h * width + w +", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "=====================\n\ndef test_with_rtdc():\n    \"\"\"Test the Isoelasticity analysis with RT-DC data.\"\"\"\n    # Initialize the dataset\n    keys = [\"channel width\", \"flow rate\", \"temperature\", \"medium\", \"pixel size\"]\n    dd", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "      final File file1 = new File(\"data/test1.db\");\n        final File file2 = new File(\"data/test2.db\");\n\n        final LocalTripleStore store1 = new LocalTripleStore(file1);\n        final LocalTripleStore store2 = new", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "if __name__ == '__main__':\n    unittest.main()\n\nThis code is a Python script for testing an alert system. It uses the unittest module for testing. The script defines a test case class AlertTest with several test methods. The test methods test the functionality of the alert", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallation(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.Dispose();\n\t\t\tSDL.GL_DeleteContext(context);\n\t\t\twindow.Platform.Graphics.Dispose();\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "  @property\n    def total_covariance(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the total *xy* covariance matrix.\n        \"\"\"\n        return np.kron(self.x_error_matrix, self.y_error", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "      return new CmsLink(m_structure, m_type, m_structure, m_type, m_structure, m_type, m_structure, m_type, m_structure, m_type, m_structure, m_type, m_structure, m_type, m", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁  noCanonicalIdAccounts.add(owningAccount);\n                  noCanonicalIdAccounts.add(adminUser);\n                } else {\n                  accountIdMap.put(owningAccount.getAccountNumber(), owningAccount);\n                }\n              }", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "          add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public IFolder SelectedFolder\n        {\n            get { return _selectedTreeNode == null ? null : _selectedTreeNode.Folder; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "      ImportVmTemplateParameters parameters = new ImportVmTemplateParameters();\n        parameters.setName(name);\n        parameters.setImportAsNewEntity(isImportAsNewEntity);\n        List<ConstraintViolationException> violations =\n                ValidationUtils.validate(parameters, Import", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.LeftAttach = ((uint)(0));\n\t\t\tw10.TopAttach = ((uint)(0));\n\t\t\tw10.RightAttach = ((uint)(1));\n\t\t\tw10.BottomAttach = ((uint", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "# ==============================================================================\n# Set up the database\n# ==============================================================================\n# This is where you would initialize the database if you were going to use it.\n# The following code is commented out as an example.\n#\n# import sqlite3\n#\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] customAttributes, ParameterInfo[] parameterInfos)\n\t\t{", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "    return (Builder)pb.Google.Protobuf.WellKnownTypes.Empty.CreateBuilderForType();\n    }\n    public static Builder CreateBuilder(SendInvitationRequest prototype, pb.Google.Protobuf.IMessage initialMessage) {\n      return (Builder)pb.Google.", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getIndex(getQuadVertIndex(i, x))));\n            }\n        }\n    }\n\n    /**\n     * @param i\n     * @param x\n", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "      if (showDateData.equals(\"false\")) {\n            result.add(COLUMN_DATE_CREATED);\n            result.add(COLUMN_DATE_MODIFIED);\n        }\n        return result;\n    }\n    /**\n     * Returns the default sorting method", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}\n//  The following code is for the placeholder text color change when the input field is selected\n//  You can use this code as a reference for your own custom", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "      Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n  }\n}\n\n//--------------------------------------------------------------------------------------------------\n//\n//  m_autoHeight = true;\n//  Invalidate();\n//\n//------------------------------------------------", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n               ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "          // Validate the conference currency\n            // (this is done in the base class)\n            // Validate the conference start and end dates\n            // (this is done in the base class)\n            // Validate the conference location\n            // (this is done in the base class)\n            // Validate the", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "              stream.Read (buffer, 0, (int) stream.Length);\n                // Adding file content as blob/byte[]\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __str__(self):\n        \"\"\"String representation of the object\"\"\"\n        return \"PayloadRequirements(packages=%s, groups=%s)\" % (\n            self.packages, self.groups\n        )\n\n    def __repr__(self):\n        \"\"\"Representation for debug", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && (CopyRange || _customRangeIsValid); }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset { _customRange = value; }\n\t\t}", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\n\t\t\tget { return cacheDir; }\n\t\t}\n\t\tpublic string ConfigurationDirectory {\n\t\t\tget { return confDir; }\n\t\t}\n\t\tpublic", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "          if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation lineAnnotation = (SourceLineAnnotation) bugAnnotation;\n                if (lineAnnotation.getLineNumber() < 0) {\n                    throw new IllegalStateException(\"Invalid line number: \" + lineAnnotation);\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "}\nThis code is a base class for food items in Ultima Online. It includes properties such as weight, fill factor, and stackability, as well as methods for eating and applying effects to the consumer. The abstract class is extended by various food types, such as Bread, Cake, and Cookies", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.Item(\"Q\").GetValue<bool>())\n                    {\n                       ", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0, 0, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraints with default values for x, y, width, height,\n\t * fill and anchor.\n\t * @return\n\t */\n\t", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "# def get_data(self):\n#     self._data = {}\n#     self._data['warnings'] = self._get_warnings()\n#     self._data['current'] = self._get_current()\n#     self._data['forecast'] = self._get", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "  self.assertEquals(field_model_def, field_def)\n\nif __name__ == '__main__':\n    suite = TestParser()\n    run = makeSuite(suite)\n    run()", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new object[]{\"10\", \"E1\"});\n                // test widening to short\n                EPStatementCompiled stmt = env.CompileEPL(\"select thestring(intprim) as thestring from SupportBean\");\n                EPAssertionUtil.AssertComp", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        clibrebound.rebound_particle_scale(c, ctypes.c", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n\nThis code is a part of OpenERP (now known as Odoo) module. It is a view class that extends the standard view class to add some functionalities like", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "          value = createHTMLView(c, text);\n        }\n        if (value != oldValue) {\n            c.putClientProperty(BasicHTML.propertyKey, value);\n        }\n    }\n    /**\n     * The key used to store the HTML renderer in a component", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "s = create(filename, content)\nassert s.content_is_testharness\nassert s.manifest_item.url == \"/\" + filename\nassert s.manifest_item.type == \"script\"\nassert s.manifest_item.src == \"/resources/testh", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmNamedSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.AddNamedQuery(namedQueryReference, mapDoc.GetNamedQueries()[namedQueryReference]);\n\t\t}\n\t\tpublic void CustomSqlInsert(string", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer );\n\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "      invocationQueue.pop();\n    }\n\n    private boolean contains(CallsiteHolder graph) {\n        for (CallsiteHolder g : graphQueue) {\n            if (g == graph) {\n                return true;\n            }\n        }\n        return false;\n   ", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "# pytest_args = pytest.split()\n# self.pytest_cmd = self.args['pytest_cmd'] + \" \" + \" \".join(pytest_args)\n\nThis code is trying to extract the pytest command from the pr metadata and then append it to the", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "              if (phi) {\n                    ValueStamp stamp = ValueStamp.forNode(value);\n                    ValuePhiNode phiNode = getCachedPhi(stamp);\n                    phiNode.setValue(value);\n                    for (int i = 0;", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "      if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException e) {\n                // Ignore\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraEvent", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonMapGump(from));\n\t\t\t}\n\t\t}\n\t\tpublic override void GetProperties(ObjectPropertyList list)\n\t\t{\n\t\t\tbase.GetProperties(list);\n\t\t\tlist.", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "=====================\n\nThe code above defines two classes: `Record` and `RecordMetadata`. The `Record` class is a subclass of `db.Model` and represents a record in a database. It has some properties and methods, such as `id`, `deleted`, and `add_bib", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "  def __getitem__(self, key):\n        \"\"\"\n        :param key: A string in the format 'username@domain'\n        :return: The data for the user or an empty dictionary if the user does not exist.\n        \"\"\"\n        user = key.split('@')\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n    def __init__(self, msgid, msgstr, encoding=None):\n        \"\"\"\n        Constructor for PO/MO file entries.\n        **Keyword arguments**:\n          - *msgid*: the message id.\n          - *msgstr*: the message string.\n          - *", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "#############################################################################################################################################\n# This is the end of the code provided.\n# The following lines are for testing purposes only.\n# Uncomment them if you want to test the code.\n#\n# if __name__ == '__main__':\n#   my", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif (action.startsWith(PLUGINS_PREFIX)) {\n\t\t\t\t// Plugins are allowed to have forms, but they must be protected by a form password\n\t\t\t\tif (trustedPlugins.contains(action.substring(PLUGINS_PREFIX.", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "      gsp = yield self.setupGerritStatusPush()\n        buildInfo = yield self.run_fake_single_build(gsp, buildResult, verifiedScore)\n        result = yield gsp.sendReview(buildInfo)\n        self.assertEqual(result.reviewStatus,", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "  self.category = atom.Category()\nclass CategoryTest(unittest.TestCase):\n  def setUp(self):\n    self.category = atom.Category()\n  \n  def testTerm(self):\n    self.category.term = 'test'\n    self.assertEqual(", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "Map<String, AnnotationMirror> r2) {\n            if (r1 == null) return r2;\n            if (r2 == null) return r1;\n            for (Map.Entry<String, AnnotationMirror> e1 : r1.entrySet()) {", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "# Register classes\nbpy.utils.register_class(Material)\nbpy.utils.register_class(MaterialOutput)\nbpy.utils.register_class(MaterialInput)\nbpy.utils.register_class(MaterialNode)\nbpy.utils.register_class(", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "          if (_engine.Mapper is Mapper16)\n            {\n                //Mapper 16 specific code\n            }\n            //MAPPER 17\n            if (_engine.Mapper is Mapper17)\n            {\n                //Mapper 17 specific code", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "          JMenuItem oMenuItem = new JMenuItem(\"Open Document\");\n            oMenuItem.addActionListener(oActionListener);\n            oMenuItem.setMnemonic('O');\n            oMenuItem.setAcceleratorKeyStroke(java.awt.event.KeyEvent.VK_", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Blue Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Green Bears]\n\t\tAdd(\"Party Quest\",", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = MeasuredHeight;\n\t\t\tint newHeight = 0;\n\t\t\tfor (int i = 0; i < ChildCount; i++) {\n\t\t\t\tView child = GetChildAt (i);\n\t\t\t\tint childHeight", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "=====================\n\n# Announcement model\nclass Announcement(models.Model):\n    title = models.CharField(_('Title'), max_length=255)\n    slug = models.SlugField(_('Slug'), unique=True)\n    content = models", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "#lexers = {'php': PhpLexer()}\n# Enable highlighting for PHP code not between <?php ... ?> by default\n#lexers = {'source.php': PhpLexer()}\n# Enable highlighting for PHP code not between <?php ... ?> by default\n#lex", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "# The following line of code is missing. \n# It should sum the durations of all the flights in the group and store the result in the flight_group table.\n# The start time of the group is the start time of the first flight in the group and the end time is the end time of", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "# TODO: implement this function\ndef db_get_last_snapshot(project_id):\n    \"\"\"\n    This function should connect to the database and return the last snapshot timestamp for the\n    given project_id.\n    \"\"\"\n    conn = rethinkdb_connection()\n    # Do", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tcase \"complicity\":\n\t\t\t\tMsg(\"I'm not involved in any criminal activities.<br/>I'm just a simple shepherd.<br/>I swear!\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tMsg(\"I don", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "responses = {\n    'ANIME_INFO': LoginResponse,\n    'ANIME_INFO_RESPONSE': AnimeInfoResponse,\n    'ANIME_INFO_RESPONSE_RESPONSE': AnimeInfoResponseResponse,\n    'ANIME_INFO", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n    def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nclass HostData:\n\n    def __init__(self, uuid, name, status, result):\n        self.uuid = uuid\n        self", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "              Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n            finish();\n        }\n    }\n}\nThis code is a part of an Android app that unshortens URLs. The code is", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "# TODO: Add step for checking that primary has no packages\n# TODO: Add step for checking that primary has packages\n# TODO: Add step for checking that primary has no files\n# TODO: Add step for checking that primary has files\n# TODO: Add step for checking that primary has no headers\n#", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\nif __name__ == '__main__':\n    install_lib.install()", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyProperties.Length; j++)\n\t\t\t{\n\t\t\t\tif (lazyProperties[j].Name == fieldName)\n\t\t\t\t{\n\t\t\t\t\tobject propValue = disassembledValues[", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "#\n# @param request is a dictionary containing the job request data\n# @return the SGE command line to submit the job\n#\ndef sge_cmdline(request):\n    #\n    # Set the job accounting information\n    #\n    db = db_connect()\n    db", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "          return View(\"Form\", new DelegateEventViewModel());\n        }\n    }\n\n    public class DelegateEventViewModel : DelegateViewModel\n    {\n        public int EventId { get; set; }\n        public int DelegateId { get; set", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        return string.Format(\"{0} - {1} - {2} - {3}\", ((Circle) obj).Center.X, ((Circle) obj).Center.Y, ((Circle) obj).Radius, ((Circle) obj).Color);\n                    }\n                ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    if premium_url:\n        self.logDebug(\"Using premium URL: %s\" % premium_url)\n        self.download(premium_url)\n        return\n\n    self.logError(_(\"Failed to get premium URL\"))\n    self.offline()\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path != null && path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\t/// <summary>\n\t\t/// Determines the cell to search for resources from.\n\t\t/// </", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "      return True\n\n    def sync_dhcp(self):\n        \"\"\"\n        Syncs the dhcpd.conf file with the dhcpd.leases file\n        \"\"\"\n        if not self.api.is_enabled(\"dhcp\"):\n            self.logger.", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "      return Event.newBuilder().setSource(source).setSeq(seq.getAndIncrement());\n    }\n}\nThe code above is an abstract class named AbstractEventProducer. It has a method named newEvent() which returns an Event.Builder object. The next line of code is missing", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "          for (PpmContext currentContext = context.Suffix; currentContext != null; currentContext = currentContext.Suffix)\n            {\n                if (currentContext.NumberOfStates > 0)\n                {\n                    if (currentContext.NumberOfStates < stateIndex", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "              return new DicomAttributeSL(tag);\n                //return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// Sequence Attribute Representation\n        /// </summary>\n        public static readonly DicomVr Sq", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[3]);\n\t\t\t//if(SqliteTest.IsTestInSession(sessionID, tFull[0]))\n\t\t\t//\tcontinue;\n\t\t\t//if(SqliteTest.IsTest", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n    def test_delete_bytes_in_middle(self):\n        o = self.file(b'abcdefghijklmnopqrstuvwxyz')\n        delete_bytes(o, 5, 3)\n        self.assertEquals(b'abcde", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n<td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X</td>\n    <", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "# plot the data\n# plot the 95% CI\n# show the plot\n# save the plot\n# plot the data for all apps\n# plot the 95% CI for all apps\n# save the plot for all apps\n# plot the data for a single app\n#", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "if __name__ == '__main__':\n    unittest.main()", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRoundRect(x + 1, y + 1, controlSize - 2, controlSize - 2, 2, 2);\n\t\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "def simulateKMoreThanOne(self, patterns, classes, k):\n    \"\"\"\n    Simulates the KNN classifier with k > 1.\n    \"\"\"\n    failures = \"\"\n    knn = KNNClassifier(k)\n    for i in xrange(len", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "      mirror.writeElement(value);\n    }\n    @Override\n    public boolean isLayoutCompatible(Layout layout) {\n        if (layout instanceof ArrayLayout) {\n            final ArrayLayout other = (ArrayLayout) layout;\n            return elementKind().equals(other.elementKind());", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "          if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = FileUtils.Combine(\n                ParentDirectory.FullName, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\ndef _get_input(prompt='', default=None, validate=None):\n    \"\"\"\n    Get user input with optional validation\n    \"\"\"\n    while True:\n        try:\n            value = input(prompt)\n            if default is not None:\n                value =", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "    }\n    }\n  }\n}\nThe code above is incomplete. The next line of code should be:\ni27 = i19 + i16;\nThis line of code is used to calculate the index of the last element in the lower triangle of the matrix A.\n", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"  \" + s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "              });\n            #endregion\n            #endregion\n        }\n    }\n}\n// Copyright 2014-2015 EvilGeniuses eSports\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.user@example.com\", \"test.user\"));\n\t}\n}\n\n// The code above is a JUnit test base class for testing the EMF components. It sets up", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "  @mock.patch('subprocess.Popen')\n    def test_popen_raises_error(self, mock_popen):\n        mock_popen.side_effect = subprocess.CalledProcessError(1, 'command')\n        context = testlib.TestContext", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (string.IsNullOrEmpty(configDirectory)) {\n\t\t\t\tconfigDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);\n\t\t\t\tconfigDirectory += Path.DirectorySeparatorChar + applicationName;\n\t\t\t}\n\t\t\tif", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t// This is a workaround for a bug in the DataSet designer.\n\t\t// The designer does not set the DataSet property on the constraint.\n\t\t// This is necessary for the constraint to be able to raise\n\t\t// events when the DataSet is changed.\n\t\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n        Dialog.setTabOrder(self.zoomby_label, self.tick_box)\n        Dialog.setTabOrder(self.tick_box, self.", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "              return false;\n            }\n            String stationId = wxs[0].getString( 0 );\n            String stationName = wxs[0].getString( 1 );\n            String stationType = wxs[0].getString( 2 );\n            String stationLat = wxs", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring queryString = \"from Continent c where c.name = 'Europe'\";\n\t\t\t\tint count = s.CreateQuery(queryString).List().Count;\n\t\t\t\tAssert.AreEqual(1, count);\n\t\t\t\tAssert.Are", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "              uiCRCITTSum = (uiCRCITTSum >> 8) ^ (CRCITTTable[(uiCRCITTSum & 0xFF) ^ uiByteValue]);\n            }\n            return (ushort)uiCRCITTSum;\n        }", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn hasSpeedModule() ? 10 : 5;\n\t}\n\t/**\n\t * Returns the BlockPos below the entity that causes the entity to move slower than usual.\n\t * This is used to prevent the entity from moving through blocks that slow it down.\n\t */\n", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "          return new IHyperlinkDetector[] {};\n        }\n        IHyperlinkDetector[] detectors = \n                new IHyperlinkDetector[] {\n                        new CeylonHyperlinkDetector(editor),\n                        new CeylonJavaHyper", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "# Create the Object3DAspect widget\nself.object3DAspect = Object3DAspect(self)\n# Create the Object3DScale widget\nself.object3DScale = Object3DScale(self)\n# Create the Object3DPrivateInterface widget\nself.object", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // X\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D(info.X, m_Mobile.Location.Y);\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshould", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁     for (Object valueChoice : valueChoices)\n                     {\n                        String label = selectConverter.convert(valueChoice);\n                        if (label.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tfor (int k=0; k<maxChangesRecorded; k++)\n\t\t\t\tsb.append(\"\"+k+\"\\t\"+totalWithChange[i][j][k]+\"\\t\"+fractionWithChange[i][j][k]+\"\\n\");\n", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                int orderIndex = unpricedLine.Key;\n                                int lineIndex = unpricedLine.Value;\n                                //check that the", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\tpublic string ReplyAction {\n\t\t\tget { return reply_action; }\n\t\t}\n\t\tpublic string ReplyMessagePattern {\n\t\t\tget {\n\t\t\t\tif", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "      final SimpleACLPermission permission = new SimpleACLPermission(ownerId, ownerGroupId, mode);\n        final int testUserId = ownerId + 1;\n        final boolean expected = false;\n        final boolean actual = permission.canRead(testUserId);\n        assertEquals(expected,", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X / viewport.Width, v.Y / viewport.Height);\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn new Vector3 (", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats_key(XDREnum):\n    PORT_STATS = XDREnum(0)\n    MAC_STATS = XDREnum(1)\n    IPV4_STATS = XDREnum(2)\n    IPV6_STATS =", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    Console.WriteLine(\"Client disconnected: \" + i);\n\t\t\t\t    RemoveClient(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Send a message to a single client\n\t\tpublic void SendTo", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "          if(type == Portal.RequestType.Step) {\n                List<StepBucket> list2 = convertToStepBuckets(list);\n                notifyStepsReceived(requestId, list2);\n            } else if(type == Portal.RequestType.Activity) {\n", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "# Generate the Single Execution Helper Function\n  GenerateSingleExecutionHelperFunction(1)\n\ndef GenerateSingleExecutionHelperFunction(bind_count):\n  \"\"\"Generate the Single Execution Helper Function.\"\"\"\n  # Generate the Single Execution Helper Function\n  print ''\n  print '", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\"\"\"\nresponse = HttpResponse(content_type='application/json')\njson_data = []\nfor item in items:\n    json_data.append({\n        'id': item.pk,\n        'title': item.title,\n        'start': item.range_start_", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "              new VarNode(\"score\"), null/* c */, Scope.DEFAULT));\n                whereClause.addChild(new ServiceNode(\n                        new ConstantNode(TermId.mkTerm(\n                                \"http://www.w3.org/2001/sw/", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n    def dispatch(self, request, *args, **kwargs):\n        self.object = None\n        try:\n            self.object = self.get_object(queryset=self.model.objects.all())\n        except self.model.DoesNotExist:\n            self", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "    get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public override Version ResolvedVersion {\n      get { return this.ResolvedAssembly.Version; }", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "          // tfqmr_iter(A, b, x, &r, &z, &p, &m, &k, &tol, &max_it, &info, &comm);\n            // The following is a rough translation of the C code\n            // The following is a rough", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] { sortedNumbers[left] };\n\t\t} else {\n\t\t\treturn new Apfloat[] { sortedNumbers[left], sortedNumbers[right] };\n\t\t}\n\t}\n}\n\n// The code above is incomplete.", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "          if sample_count[v] < len(reference_sets):\n                A[i, sample_count[v]] += 1\n                sample_count[v] += 1\n            v = parent[v]\n        parent[edge.child] = v\n        if", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "  def test_backend(self):\n        self._test_backend_setup()\n        self._test_backend_enrichment()\n        self._test_backend_cleanup()\n\n    def _test_backend_setup(self):\n        self.ocean_index = self.", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots && slot.Value.LockTeam == null)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(new AddBotTo", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" : \" + _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "# TODO: Implement DataFrame class\nclass DataFrame:\n    def __init__(self, stream_id, flags, data):\n        self.stream_id = stream_id\n        self.flags = flags\n        self.data = data\n\n    def serialize(self):\n       ", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "#endif\n        }\n}\n\n//The code below is the missing part\nusing Microsoft.Msagl.Core.Geometry;\nusing Microsoft.Msagl.Core.Layout;\nusing Microsoft.Msagl.Layout;\nusing Microsoft.Msagl.Layout.LayoutAlgorithms", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos (m_maxSlopeRadians);\n}\nvoid btKinematicCharacterController::setUseControllerMotion(bool useControllerMotion)\n{\n\tm_useControllerMotion = useControllerMotion;\n}\nvoid", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "      for (ExpressionTree initializer : initializers) {\n            if (initializer instanceof VariableTree) {\n                VariableTree variableTree = (VariableTree) initializer;\n                AnnotatedTypeMirror typeMirror = atype.getAnnotatedType(variableTree", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tstack.setTagInfo(\"display\", new NBTTagCompound());\n\t\t\t\tNBTTagCompound nbttagcompound1 = stack.getTagCompound();\n", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t\t_returnType = _context.GetType(typeAttribute.Value);\n\t\t\t}\n\t\t}\n\t\t//--------------------------------------------------------------------------------------------------\n\t\t// <summary>\n\t\t// Creates", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.Size = new Size(100, 50);\n\t\t\t\tmyTrackBar.Orientation = Orientation.Horizontal;\n\t\t\t\tmyTrackBar", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\n\t\t\twhen(classType.isAnnotationType()).thenReturn(true);\n\t\t\twhen(classType.isInterfaceType()).thenReturn(false);\n\t\t\tdoReturn(Collections.singletonList", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.postdominators != other.postdominators)\n\t\t\treturn false;\n\t\tif (this.pathSensitiveInfo != other.pathSensitiveInfo)\n\t\t\treturn false;\n\t\tif (this.pathSensitiveInfo != null) {", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "          int min2 = wideLExtent[r.rightChild];\n            int min = Math.min(min1, min2);\n            int max1 = wideRExtent[r.leftChild];\n            int max2 = narrowL;\n            int max = Math.max(", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "              'rsync',\n                '--archive',\n                '--compress',\n                '--delete',\n                '--exclude={\"pg_hba.conf\", \"pg_stat.conf\", \"pg_clog/*\",\n                 \"pg_xlog/*", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "writer.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n}", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null ) {\n\t\t\t return false;\n\t\t}\n\t\tif ( !( aThat instanceof Contact ) ) {\n\t\t\t return false;\n\t\t}\n\t\tfinal Contact that = (Contact)aThat;\n\t\treturn this.", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "  if n == n_steps:\n      print('Total number of rejected timesteps = %i' % total_rejec\n      sys.exit()\n\nThe code above is a multi-body simulation using the Luby-Melchionna algorithm. The simulation involves reading the input", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "      idx = node.op.idx_list\n\n        # This optimization is only for the case when the slice is over the full\n        # input.\n        if len(cdata) > 0 and all(isinstance(x, Variable) for x in idx):\n            # Check", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "=====================\n\ndef save_permissions(form, user):\n    \"\"\"\n    Save the selected groups for the user.\n    \"\"\"\n    groups = form.cleaned_data['groups']\n    user.groups.clear()\n    for group_id in groups:\n        group", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "```python\nreturn query\n```\nThis code is used to wrap the listener function and return the Query object after it has been modified, if the listener function returns None or a new Query object. This is necessary because the Query object is immutable and cannot be modified directly. The `retval` parameter is", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "# Register the descriptor\nXBlockDescriptor.register(ConditionalModule)\n# Register the descriptor with the XBlockStore\nXBlockStore.register_item_type(ConditionalModule.get_item_type())\n# Register the descriptor with the XBlockStore's registry\nXBlockRegistry.", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "=====================\n\nThe next line of code should be the definition of a new class `MyAdapter` that inherits from `AbstractAdapter` and overrides the necessary methods to implement the desired functionality. Here's an example of how you might define a new adapter for a 2D numpy array:\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && (Method == null && Field == null && Sig == null))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (Method != null && (Class == null || Sig != null))\n\t\t\t{", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 24);\n\t\t\tthis.objYLabel.TabIndex = 21;\n\t\t\tthis.objYLabel.Text = \"Var Y:\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "      c = self.getNoPrefix(\"mail/test-buildbot-0.1.tar.gz\")\n        self.assertEqual(c.branch, \"tags/test-buildbot-0.1\")\n        self.assertEqual(set(c.files), set([\"mail/test", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "      if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n\n        for (Map.Entry<String, String> entry : csvData.entrySet())", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassive()) {\n\t\t\tif(player.capabilities.isCreativeMode) {\n\t\t\t\tsetPassive(false);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tif(player.getHeld", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "          intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthOperation(Community c", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "if __name__ == '__main__':\n    print(__doc__)\n    if not update_needed():\n        print(\"Database is already up-to-date.\")\n        sys.exit(0)\n    do_upgrade()", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.Close();\n\t\t\tcomputerMgmt=null;\n\t\t\t\n\t\t\t//this.Close();\n\t\t\t//Application.Exit();\n\t\t\t//Application.Run(new Form1());\n\t\t\t//Application", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "  for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * @param date the date to convert\n   * @param event", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.EventName = SourceEventName;\n\t\tsourceEventBinding.Target = DataSource;\n\t\tsourceEventBinding.EventType = typeof( dfComponent ).GetEvent( SourceEventName );\n\t\tsourceEventBinding.OnEvent += OnSourceEvent;\n\t}", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "          ObjectMapper mapper = new ObjectMapper();\n            SpanConfig spanConfig = mapper.readValue(jsonData, SpanConfig.class);\n            ISwitchManager switchManager = (ISwitchManager) getService(ISwitchManager.class);\n            switchManager.addSpanPort", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAllergy = new ImageHelper(1000001, \"/ims/images/allergy.gif\", new", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "      return rnd.nextInt(size);\n    }\n}", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "  def make_assertion(self, subject, predicate, object, project_uuid):\n        \"\"\"\n        Make an assertion in the given project.\n        \"\"\"\n        # Create a new link entity for the object\n        link_entity = LinkEntity.objects.create(uri=object", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "          buffer.Append(\"          .shrinktofit= \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergedcell= \")\n                .Append(StringUtil.ToHexString(", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katakana\n\t\t\t\tbytes [posn++] = (byte) (ch - 0x30;\n\t\t\t} else {\n\t\t\t\t// EUC-JP encoding\n\t\t\t\tbytes [posn++] =", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n# ------------------------------------------------------------------------------\n# ISRs\n# ------------------------------------------------------------------------------\n\n# ------------------------------------------------------------------------------\n# ISR for Timer0\n# ------------------------------------------------------------------------------\n@isr(0)\ndef Timer0_ISR():\n   ", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties properties = new Properties();\n\t\t\tstream = location.openStream();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap map = new JRPropertiesMap();\n\t\t\tmap.setProperties(properties);\n\t\t\treturn map;", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "          return this == CREATIVE;\n        }\n\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator()\n        {\n            return this == SPECTATOR;\n        }\n\n        /**\n         *", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor ();\n\t\t\tcsd.SetOwner (new SecurityIdentifier (WellKnownSidType.BuiltinAdministratorsSid, null));\n\t\t\tcsd.SetGroup (new SecurityIdentifier (WellKnownSid", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "# results = []\n# for result in results:\n#     print(result)\n#     results.append(lookup(result))\n# print(len(results))\n# return results\n\ndef lookup(result):\n    \"\"\"\n    Lookup the acoustid for a given result.", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "      // Add your custom RPCs here.\n        // The RPCs will be added to the list in the order they are added.\n        // The RPCs will be added to the list in the order they are added.\n        // The RPCs will be added to the list in", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "      return rootView;\n    }\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n        if (getArguments() != null) {\n            message = (IIMessage)", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "      # Translation\n        if np.all(op_cc[:3] == 1):\n            return np.roll(psit_G, op_cc[3], axis=0)\n        # Rotation\n        elif np.all(op_cc[:3] != 1", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "      CreateUtkastRequest request = new CreateUtkastRequest();\n        request.setPatient(new Patient());\n        request.setPatient().setPersonnummer(PATIENT_PERSONNUMMER);\n        request.setPatient().setFornamn(\"", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body) {\n\t\t\t\t\tif(child is ILBasicBlock) {\n\t\t\t\t\t\tILBasicBlock childAsBB = child as ILBasicBlock;\n\t\t\t\t\t\tif(prevChildAsBB !=", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    //if we're not a ragdoll then we'll need to set all the parts to ragdoll\n\t    if (!IsRagdoll) {\n\t\tfor (", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class FractureLayer(GeoLayer):\n\nThis is a subclass of GeoLayer. It is used to represent a fracture layer in the geological model. The main difference between a FractureLayer and a GeoLayer is that a FractureLayer has additional properties related to fract", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "      out[outOff++] = (byte) ((num >>> 24) & 0xff);\n        out[outOff++] = (byte) ((num >>> 16) & 0xff);\n        out[outOff++] = (byte) ((num >>> 8) & ", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "          super( source );\n            this.objectVariables = objectVariables;\n        }\n\n        private Map<String, PatternNode> objectVariables;\n\n        @Override\n        protected Iterator<PatternMatch> createIterator()\n        {\n            return new Iterator<PatternMatch>()\n           ", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "def transform_values(values, format = None):\n    \"\"\"\n    Transform a list of values into a list of dictionaries.\n    \"\"\"\n    if not values:\n        return []\n    if isinstance(values[0], list):\n        return [transform_values(value,", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "          frame.setSelected(true);\n            frame.toFront();\n          }\n        }\n      });\n    } catch (Exception ex) {\n      ex.printStackTrace();\n    }\n  }\n}\n\n//The code above is incomplete, please complete it.\n//The", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "# This is the code that needs to be completed\n# It should call the function getLC() and print the result\n# The result should be a tuple containing the filename, redshift and data\n# of the LC file for the given object name\n# The object name should be passed as an argument to", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "  move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi), Util.px2mm(offset.z, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    ContentValues values = new ContentValues();\n                    values.put(DbHelper.TableExpenses._ID, newId);\n                    values.put(DbHelper.TableExpenses.ID_GROUP, newId);\n                    db.update(DbHelper.TableExpenses.", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "              m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n        #endregion\n        public IntPtr Ptr\n        {\n            get", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tqueue.RemoveAt(0);\n\t\t\t\tplayer.ModifyResources(GetCost(itemName), false);\n\t\t\t\treturn;", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    infoText += \" file\" if numberOfFiles==1 else \" files\"\n    infoText += \"<br>\"\n\n    if numberOfHiddenFiles>0:\n        infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \"\n        infoText += \"file\"", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "      code = re_m4.sub(r'@\\1@@', code)\n        # replace the variables\n        for x in self.env.get_vars():\n            code = code.replace('%{%s}' % x, self.env[x])\n        # write", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "if __name__ == '__main__':\n    rospy.init_node('planning_server')\n    try:\n        planning_server = PlanningServer()\n        rospy.spin()\n    except rospy.ROSInterruptException:\n        pass\n   ", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] - 2 * h[ y, x ], 2 );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactor", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "              if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(new TextTimestampAdapter(timestampFormatFactory.getTimestampFormat(pattern), utf8(pattern), utf8(pattern", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tif (qs.Execute().ReturnValue < 0)\n\t\t\t\treturn false;\n\t\t\tentity.cti_id = Convert.ToInt32(qs.ReturnValue);\n\t\t\treturn true;\n\t\t}\n\t}\n}", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic int PropertyCount\n\t\t{\n\t\t\tget { return 2; }\n\t\t}\n\t\tpublic Type[] PropertyTypes\n\t\t{\n\t\t\tget { return new Type[] { typeof", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "#\n# Create a NTP authentication key\n#\nif self.state == \"present\":\n    if self.key_id not in self.proposed_config[\"ntp\"]:\n        self.proposed_config[\"ntp\"].append({\n            \"ntp_auth_key", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "          component = self.store.bulk_operations(test_course.id)\n            component.update_edit_info(editing_user=editing_user)\n            component.save()\n            component = self.store.bulk_operations(test_course.id)\n", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "      digest.update((byte) (TEXT_CODE & 0xff));\n        update(ch, start, length);\n    }\n    public void startElement(String uri, String localName, String qName, Attributes atts)\n            throws SAXException {\n        digest.update", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "#def mkrange(data):\n#    return aetypes.Range(unpack(data))\n#\n#def mkcomparison(data):\n#    return aetypes.Comparison(unpack(data))\n#\n#def mklocation(data):\n#    return aet", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "          Type type = api.ActionDescriptor.GetParameters().FirstOrDefault()?.ParameterType;\n            if (type == null)\n            {\n                type = api.ReturnType;\n            }\n            if (type == typeof(HttpResponseMessage))\n            {\n                type =", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "      elif isinstance(entry, gtk.Entry):\n            if self.editing:\n                self.editing.hide()\n                self.editing = None\n            self.editing = entry.begin_editing()\n            self.editing.connect('editing-", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "          beanProperties.addPropertyValue(\"locations\", newLocationList);\n        }\n        return beanProperties;\n    }\n}\n*/\nbeanProperties.addPropertyValue(\"locations\", newLocationList);\nreturn beanProperties;\n}\n}\n```vbnet\n\nThis code", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "          lines = f.readlines()\n        finally:\n            f.close()\n    if lines:\n        for line in lines:\n            if len(line) < 2:\n                module.fail_json(msg=\"Password file contains blank lines, please remove them before continuing\")", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "      [In, MarshalAs(UnmanagedType.Interface)] IMFMediaEvent pEvent\n        );\n    }\n    #endregion\n    public interface IMFMediaEvent\n    {\n        [PreserveSig]\n        int GetType(\n            [Out] out MediaEventType pType", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "      ensureWriteAccess( directedAclKeys.getAclKey() );\n        spm.addPrincipalToPrincipal( directedAclKeys );\n        return null;\n    }\n}", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "      for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag name of the element.\"\"\"\n        expected_tag = element.tag\n        actual_tag =", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "=====================\n\nif node.nodeType == node.ENTITY_REFERENCE_NODE:\n    clone = newOwnerDocument.createEntityReference(node.nodeName)\nelif node.nodeType == node.PROCESSING_INSTRUCTION_NODE:\n    clone = newOwner", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) object, diagnostics, context);\n\t\t\t}\n\t\t};\n\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\n\t/**\n\t* Validates the validate", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvType.KeyName)) {\n\t\t\t\tkeyLocator.setKeyName(decoder.readNestedTlv(TlvType.KeyName));\n\t\t\t} else if (decoder.peekType(", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "      for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //Updates the camera\n        updateCamera();\n        \n        //Updates the HUD\n       ", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "      action.setColor( color );\n        GameEngine.model().getGame().addJoin( action );\n        hide();\n      }\n    }\n    , this);\n    m_colorSelection = m_colorSelectionButton;\n    m_colorSelectionButton.addClickHandler( m", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "# Get the filename from the Content-Disposition header\nfilename = get_filename(r.headers)\n# Create a temporary file to write the downloaded data to\ntemp_file = os.path.join(os.getcwd(), \"%s.tmp\" % filename)\n# Write the", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = null;\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "def _find_carbon_elements(reaction):\n    \"\"\"Return a list of carbon elements in a reaction.\n    Parameters\n    ----------\n    reaction : cobra.Reaction\n        The reaction to find carbon elements for.\n    Returns\n    -------\n    list\n        A list of", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "class Unit(CachedModel, CachedTreeItem, models.Model):\n    \"\"\"A unit is a single translation of a source message.\n    \"\"\"\n    #: The source message that this unit represents.\n    source = models.ForeignKey(Source, on_delete=models.CAS", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n        'created', models.DateTimeField(auto_now_add=True)),\n\n        ('updated', models.DateTimeField(auto_now=True)),\n        ('created_by', models.ForeignKey(related_name='created_by', to=settings.AUTH_USER_MODE", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "# Add a new entry to the interface_to_port_map\n# This is where you should add the code to handle the incoming packet\n# and determine the port number to forward it to\n# You can use the ARP packet's src and dst IP addresses to determine\n# the port number to", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "  if (m_RecentItems.size() >= m_MaxItems) {\n      m_RecentItems.remove(m_MaxItems - 1);\n    }\n    m_RecentItems.add(item);\n    if (m_IgnoreChanges)\n      return;", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "          if (src.FightMode == FightMode.Aggressor || src.FightMode == FightMode.PassiveDefensive || src.FightMode == FightMode.Defensive)\n                return true;\n            return false;\n        }\n    }\n\nI think", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "      if (halfTradePeriodDate == null && takeOfferDate != null) {\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod() / 2);\n        }\n        return half", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompFollow(Node p, BitArray f) {\n\t\tif (p == null) return;\n\t\tif", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteAsync(buff);\n\t\t\treturn mReadBuff;\n\t\t}\n\t\tprivate void WriteAsync(byte[] data)\n\t\t{\n\t\t\t// TODO: Complete member initialization\n\t\t\tm_wData = data;\n\t\t\tm_", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(order);\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tMskJointVo mskJointVo1 = (MskJ", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch ( Exception ex )\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"Failed: {0}\", ex.Message );\n\t\t\t}\n\t\t}\n\t}\n}\n\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 1))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List<Item>();\n\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "          for (int j = 0; j < N_INDEXES; j++)\n            {\n                int index = j;\n                int nu = 0;\n                int index2 = 0;\n                int nu2 = 0;\n                int index3", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "# navigate to the Rates page\nnavigate_to(Rates)\n# create a new Compute Rate\nadd_rate = Rates.AddComputeRate()\n# fill in the form\nadd_rate.description.fill(description)\nadd_rate.currency.fill(currency)", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock();\n\t\t\t\tif ( discardWholeBuffer )\n\t\t\t\t{\n\t\t\t\t\t// Discard the whole buffer\n\t\t\t\t\tshadowBuffer.", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\tdef create(self):\n\t\tself.createScan()\n\t\tself.createSetup()\n\t\tself.createConfig()\n\t\tself.createActions()\n\t\tself.createScreens()\n\t\tself.createSetupMenu()\n\t\tself.createSetup", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "          else {\n                String[] filters = filterStr.split(\",\");\n                for (String filter : filters) {\n                    String[] parts = filter.split(\":\");\n                    if (parts.length != 2) {\n                        throw new IllegalArgumentException(\"Invalid filter:", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "              // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytes.Length);\n                \n                // Copy the decoded row to the previous row\n                Array.Copy(curr, 0, prior, 0, bytes.Length", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "      s = lowlevel.Signal('foo.bar', sender=':1.23', destination=':1.24')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('org.freedesktop.DBus", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    except:\n        logging.error(\"Error in p_operator\")\n        continue\n\n    if m_product:\n        output += \"in \" + str(amap.get_codomain_degree()) + \" degree\\n\"\n        output += str(m_product)", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "          AssertParseError(\n                \"1:1: Message \\\"TestMessage\\\" has no field named \\\"nosuchfield\\\".\",\n                \"TestMessage: { nosuchfield: 123 }\");\n        }\n    }\n}\n//#endregion", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tinitialize( true );\n\t\tfor ( Object key : m.keySet() ) {\n\t\t\tfinal Object value = m.get( key );\n", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounts.MobileAccount).AccessLevel.ToString() );\n\t\t\t}\n\t\t}\n\t}\n#endregion\n}\n// This is the end of the code.", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\nclass HrAttendance(models.Model):\n    _inherit = 'hr.attendance'\n\n    def attendance_action_change(self):\n        \"\"\"\n        This method is used to change the attendance status of an employee.\n        \"\"\"\n        self.ensure_one()\n", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults.getRows().get(0);\n\t\tif (parentRow == null)\n\t\t{\n\t\t\tparentRow = form.grdResults.getRows().add(new grdResultsRow());\n\t\t\t", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "              pt = (POINT)Marshal.PtrToStructure(c.Location, typeof(POINT));\n                return new Point(pt.X, pt.Y);\n            }\n        }\n\n        /// <summary>\n        /// Sets the position of the item.\n        /// </summary", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "      new_terminal = maker.new_terminal(self, cwd, profile)\n        self.add_terminal(new_terminal)\n        self.show_all()\n        if debugtab:\n            new_terminal.set_debug(True)\n        self", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    toReturn.Add(new StructFieldInfo(name, managedType, marshalType, isRef));\n                }\n            }\n            return toReturn;\n        }\n    }\n    public class StructFieldInfo\n    {\n        public StructFieldInfo(string name, Type", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type == null || base_type.IsValueType;\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsByRef {\n\t\t\tget { return attributes.GetCustomAttribute<CustomAttributeData> (\"System.Runtime.InteropServices.", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "              throw new Exception(\"Could not find model for rule: \" + args.Key);\n            }\n        }\n    }\n}\n//The code above is incomplete. The next line of code is missing.\n//throw new Exception(\"Could not find model for rule: \" + args.", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n    self.context = OpenSSL.SSL.Context(\n        _openssl_versions.get(protocol, OpenSSL.SSL.SSLv23_METHOD))\n    self.context.set_options(OpenSSL.SSL.OP_NO_SSLv2 | OpenSSL.SSL", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label1 = new global.Gtk.Label ();\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Text = \"Label 1\";\n\t\t\t// Container child hbox3.Gtk.Box+Box", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "# headbook.connect(\"page-reordered\", _callback_page_reordered)\n\n################################################################################\n#                                                                              #\n#                                                                              #\n#                                                                              #\n#                                                                              #\n#                                                                ", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "  \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-next\": QKeySequence(Qt.CTRL + Qt.Key_PageDown),\n    \"Move-Tab-to-previous", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [name=\" + this.persistenceUnitName + \", transactionType=\" +\n\t\t\t\tthis.transactionType + \", jtaDataSource=\" + this.dataSource + \", properties=\" +\n\t\t\t\tthis.properties + \"]\";\n\t}\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "  IEditorInput editorInput = getEditorInput();\n    if (editorInput instanceof IFileEditorInput)\n    {\n      IFileEditorInput fileEditorInput = (IFileEditorInput)editorInput;\n      return fileEditorInput.exists() && !fileEditorInput.isSaveLocal();", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(720, 12);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(12", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "      if (sb != null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n}\n\nThe code above is incomplete, and I need to complete it. The missing part is the last line of code", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512 (legacy)\", hmac, data, digest);\n\t\t}\n\t\t//\n\t\t// The following test vectors are from the HMAC-SHA512 test vector document\n\t\t// available at http://www.ietf.", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch (EnumSwitcher.option_1) {\n\t        case option_1_option_1:\n\t            current_sum += 4;\n\t            break;\n\t        case option_1_option_2:\n\t            current_sum += 4;\n\t", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "      return null;\n      String javaPath = java.GetStringValue(\"JavaHome\");\n      if (javaPath == null)\n        return null;\n      return javaPath;\n    }\n    private static String GetJavaHome()\n    {\n      String javaHome = Environment.GetEnvironmentVariable", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "  comment = l\n\n    if job is not None:\n        if re.match(r'%s' % shlex.quote(job), l):\n            return [comment, l]\n\n    return []\n\n    def find_job_by_minute(self, minute):", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# Mesh modifiers\nclass MeshModifier:\n    def __init__(self, name, modifier_type, object):\n        self.name = name\n        self.modifier_type = modifier_type\n        self.object = object\n        self.modifier = None\n", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "          double[] likelihoods = new double[totalBuckets];\n            for(int i = 0; i < totalBuckets; ++i)\n            {\n                double rankCount = rankCounts[i];\n                double rankBucket = rankCounts.length > i", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "      for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getNeighbor());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\nif __name__ == \"__main__\":\n    p = Packet()\n    p.sniff(filter=\"tcp port 80\", prn=lambda x: print(x.summary()))\n    inspect = Inspect()\n    inspect.prompt(packets=p.pk", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "          this.rptComboBox.SelectedIndex = 0;\n            //\n            // rptComboBox\n            //\n            this.rptComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;\n            this.rptComboBox.Form", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "          'Meta': {'object_name': 'Scan'},\n            'id': ('models.AutoField', [], {'primary_key': 'True'}),\n            'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),\n           ", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "              // If the type is not defined in the schema, and we are not processing all types,\n                // then we don't need to process it.\n                return false;\n            }\n        }\n        return false;\n    }\n    private void processComplexType(Complex", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "      self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state': 'validate'})\n    def holidays_validate_notificate(self, cr, uid, ids, context=None):\n", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "          set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets the name of the column\n        /// </summary>\n        string IBOColSelector.ColumnName\n        {\n            get { return this.Columns[this.CurrentCellAddress.X].", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "          return String.Format(\"{0} ({1}): {2} ({3}): {4}\",\n                this.Name,\n                this.TargetName,\n                this.Channels,\n                this.TypeDescription,\n                this.IsActive ? \"Active", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = valueObject.getCareContext().getDomainObject();\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\tims.core.vo.DomainObject value11 = valueObject.getDomainObject();\n\t\tif (", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "          [\"cargo\", \"run\", \"--\", \"--features=android\", \"--\", \"--manifest-path\", \"Cargo.toml\"],\n            cwd=self.servo_dir,\n            env=env,\n            stdout=subprocess.PIPE,\n            stderr=", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getOptimisticScore(new double[] { p, 0, estP, estN }, true),\n\t\t\t\t\tthis.getOptimisticScore(new double[] { n", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "              Stashed.SetDiffs(gitStash.Name, gitStash.Message, gitStash.Commit, gitStash.Parents, gitStash.Files, gitStash.IsClean, gitItemStatuses);\n            }\n            Loading.Invoke(() => Load", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "# use the pre-defined test function to check the results\ntest_results = test_beam_monitor_output(lattice, pset)\nassert test_results.status == st_ARCH_STATUS_SUCCESS.value\nprint('Test passed')\n# print out the beam monitor output for", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "      if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.match(that) > 0;\n    }\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(\"AddInt\", asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += PanelDataBase.SN_TREFFER_ZWEITELN;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "# Load the index\narchive_index = load_archive_index(args.index_file)\nif archive_index is None:\n    log.msg('Error loading index file: {}'.format(args.index_file))\n    sys.exit(1)\n# Run the action\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "      self.mosi_bits = miso\n        self.mosi_bits_ss, self.mosi_bits_es = ss, es\n        self.samplenum += 1\n        # TODO: Handle the 'DATA' packet.\n        #\n        # The 'DATA", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "        cursor = limit - v_3;\n          if (cursor < bra) {\n            break lab0;\n          }\n          if (cursor > ket) {\n            break lab0;\n          }\n          if (cursor == bra) {\n            // set region to the current character", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "              o = cls.newInstance();\n                dins.readFully(o);\n                if (cd == null) {\n                    cd = new ChannelData(channel, cls, fingerprint, msg_size);\n                    channelMap.put(channel, cd);\n", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "  def _get_key_usage(self):\n        \"\"\"\n        :return: list of key usage extensions\n        \"\"\"\n        extensions = []\n        for extension in self.cert.get_extensions():\n            if extension.get_extension_type() == OpenSSL.crypto.X5", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (i != s.end());\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\t(*i->first)();\n\t\t\t\t/* If the slot has disconnected itself, remove it from our list */", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "# interval_1word = Interval(0, 0xFFFF)\ninterval_1word = Interval(0, 0xFFFF)\n\n# The following line is not correct. It should be:\n# interval_2words = Interval(0xD800, 0", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\t// tabulate attributes\n\t\t\t// (if there is no attribute list, then there is no attribute table)\n\t\t\t// (if there is an attribute list, then there is an attribute table)\n\t\t\t// (the attribute table is a list of attribute names and their", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n#\n#     OpenERP Sale Order Line EDI Export\n#\n#     @author: Javier Fuentes <", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS + \"s\");\n\t\treturn new ServiceDescription(\"_openhab-server-ssl._tcp.", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "              permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n\n    @Override\n    protected void assertNodePermission(NodeRef nodeRef, String permission,", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "# Here you can add your test cases for the Enumerator class\n# or any other class you want to test.\n# For example:\n#\n# class TestEnumerator(object):\n#     def test_match_subsystem(self, context):\n#         devices = context.list", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "# Create a device object\ndevice = Device(deviceToken)\n# Create a user object\nuser = user.newUser(loginId, password)\n# Login\nuser.login()\n# Check inspection\nprint(device.check_inspection())\n# Explore\nuser.explore()", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "# This is the main part of the code.\nargs = sys.argv\ndataset = args[1]\ncal = args[2]\n# Load the dataset.\ndata = load(dataset)\n# Load the calibration file.\ncalfile = open(cal, \"r\")\ncal", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "          if (m_Keys.Count > 0)\n                ItemID = 0x14F0 + m_Keys[0].KeyID;\n            else\n                ItemID = 0x14F0;\n        }\n        private class InternalTarget : Target\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "      for (Iterator<String> it = devices.iterator(); it.hasNext();) {\n            String deviceName = it.next();\n            String ipAddress = ipAddressMap.get(deviceName);\n            int model = liveModelMap.get(deviceName);\n            Tuner tun", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "  if (lastSeenVersion < Version.USER_NOTIFICATIONS) {\n      jobs.put(Version.USER_NOTIFICATIONS, new UserNotificationsMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_NOTIFICATIONS) {\n     ", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "    List<Pattern> regex = new ArrayList<>();\n      for (String s : split[0].split(\"\\\\s+\")) {\n        regex.add(Pattern.compile(s, ignoreCase ? Pattern.CASE_INSENSITIVE : 0));\n      }\n      String type = split", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "      for p in path:\n            if os.path.isfile(os.path.join(p, n)):\n                return SCons.Node(os.path.join(p, n))\n            # try to find it in the sub-path\n            for subp in sub", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "#\n# Mapnik Python bindings\n#\n# This file contains the Python bindings for Mapnik.\n#\n# The Mapnik Python bindings are a thin wrapper around the C++ API.\n#\n# The bindings are generated using SWIG (http://www.swig.org", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "# Get the current state of the LTM monitor\nmonitor = F5_BIGIP_MONITOR_SPEC.find(\n    name=module.params['name'],\n    partition=module.params['partition']\n)\nif monitor is None:\n    module.fail_json", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "=====================\nclass MethodAddView(BaseView):\n    class Meta:\n        name = \"method_add\"\n        url_template = \"/automate/api/methods/{method_type}/{name}/add\"\n        wrapper_name = \"div\"\n        wrapper_class_", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "          throw new Exception(\"Action class not found: \" + className);\n        }\n        return result;\n    }\n}\n// End of code\n\n// The code below is for testing purposes only\npublic static void main(String[] args) {\n    try {\n        IAction action =", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "=====================\n\n    {\"thread_id\": \"dummy_thread_id\"},\n    {\"course_id\": self.course.id, \"thread_id\": \"dummy_thread_id\"},\n)\n\n    self._test_request_error(\n        \"update_thread\",\n", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "# Check for existence of manifest file\nif not msvc_exists(manifestSrc):\n    return 0\n# Check for existence of linker option\nif not env.get('MSVC_LINKER_OPTIONS') or \\\n   not 'MANIFEST' in env.get", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "          IStructuredSelection selection = (IStructuredSelection) getStructuredSelection();\n            if (selection == null || selection.isEmpty()) {\n                return;\n            }\n            final Object[] elements = selection.toArray();\n            final IResource[] resources = new IResource", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t// Allocate output row meta\n\t\tdata.outputRowMeta = new RowMeta();\n\t\tdata.outputRowMeta.setDynamic(true);\n\t\tdata.outputRowMeta.setName(meta.getName());\n\t\tdata.outputRowMeta.setDescription(meta", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "```python\nassert d(2014,1,31, 22,21) <= d(2014,1,31, 22,21)\n```\nThis line of code is checking if two datetime objects with the same value represent the", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "          else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            int walkingrange = 0;\n            int spawnrange = 0;\n            int spawncount = 0;\n            int spawnid =", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "def setup_vm(test, params, vm):\n    \"\"\"\n    This function sets up the VM for the test.\n\n    :param test: QEMU test object.\n    :param params: Dictionary with the test parameters.\n    :param vm: Reference to the VM object.\n", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "      service.submit(pub);\n        service.shutdown();\n        service.awaitTermination(1, TimeUnit.MINUTES);\n        int received = rc.get();\n        System.out.println(\"Received \" + received + \" messages\");\n    }\n}\nThe code", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "          if (this.owner instanceof FTBody) {\n                ((FTBody) this.owner).setRecoveryRequested(true);\n            }\n            if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn (uint)value;\n\t\t\tif (value <= 0xFFFF) {\n\t\t\t\treturn (uint)((ushort)0xFF | (ushort)(value >> 8));\n\t", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "      self.fm.run_command('arj', 'x', au_flags, cwd=cwd, description=descr, \\\n                           on_complete=refresh)\n\n# Custom command to extract files using 7z\nclass extract7z(Command):\n    def __", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\t[ExpectedException (typeof (TargetInvocationException))]\n\t\tpublic void CreateInstance_StringWithInvalidTypeName ()\n\t\t{\n\t\t\tActivator.CreateInstance (\"MonoTests.ActivatorTest.InvalidTypeName\");\n\t\t}", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "  def testOneOldAndOtherNew(self):\n        da = Locale.objects.get(code='da')\n        de = Locale.objects.get(code='de')\n        repo = self._setup(da, Action.PENDING, Action.ACCEPTED)\n       ", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "          self.Log(\"Userstate update for user %s\" % userstate.session)\n            self.send_message(self.get_user(userstate.session), \"Userstate update for user %s\" % userstate.session)\n            self.send_message(self.get", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "      PlayerGroup group = player.getPlayerGroup();\n        if (group != null) {\n            group.setLeader(player);\n        }\n    }\n    public static PlayerGroup getGroup(Player player) {\n        return player.getPlayerGroup();\n    }\n    public", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\ndef test_vtable():\n    \"\"\"\n    Test the vtable functionality.\n    \"\"\"\n    logger.debug(\"Test the vtable functionality.\")\n    # Define a simple vtable\n    vtable = {\n        \"name\": {\"regex\": r\"\\w+\"},\n        \"age", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "  def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n        column, tree_model = self._setup_column_and_tree_model()\n        tree_model.set_value(", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t}\n\twhile (parent instanceof Grid);\n\t((Grid) parent).addColumn(column);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "              Image = new Bitmap(element.Attributes[\"Image\"].InnerText);\n            } catch (Exception ex) {\n                throw new Exception(\"Error loading creature \" + Name + \":\\n\" + ex.Message);\n            }\n        }\n        private void ParseStatus(Inventory", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\tfrom.AddToBackpack( m_key[i] );\n\t\t\t\t\tfrom.SendMessage( \"You have been given a key to summon the boss of this realm", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif (beans == null)\n\t\t\treturn coll;\n\t\tfor (ims.careuk.vo.ChangeOfServiceVo bean : beans)\n\t\t{\n\t\t\tcoll.add(bean);\n\t\t}\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "Version(1, new int[]{-1, 1, 1, 1, 1, 1, 1, 1}, new ECBlocks(new ECBlocks(new ECBlocks(new ECBlocks(new ECBlocks(new ECBlocks(new ECBlocks(new ECBlocks(new", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pbKey = kdf.DeriveKey(pSalt, pMsg, pIterations, pLength, pSaltLen, pHashLen, pOutLen);\n\t\t\tif (!Arrays.Equals(pbKey, pbKeyExpected))\n\t\t\t\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\tfloat discount = 0F;\n\t\tif (player.isWearing(BotaniaTab.armor", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Add your custom middleware classes here.\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.Cs", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "      if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList != null))\n                return false;\n        } else if (!this.actionTraceList.equals(other.actionTraceList))\n            return false;\n        if ((this.userErrorMessage", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "          dc.number = PhoneNumberUtils.parse(p.readString(), null);\n            dc.type = p.readInt();\n            dc.isRinging = p.readInt() != 0;\n            dc.isHeld = p.readInt() != 0;\n", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.getName().equals(\"CC0\")) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odr", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "          for (int x = 0; x < xSizeP; x++)\n            {\n                int index = y * xSizeP + x;\n                newVertices[index] = new Vector3(x + leftCorner.x, y + leftCorner.y,", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(username, password, API_VERSION, API_NAMESPACE, API_METHOD_ADD, testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tresult = ((Integer) raw", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void addSelection", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "          out.writeBoolean(false);\n            out.flush();\n            out.close();\n            return;\n        }\n        out.writeBoolean(true);\n        out.writeInt(found.identifier);\n        out.flush();\n        out.close();\n    }\n}", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        16 + (~(stactop[0] & 0x0f) >> 4),\n                        16,\n                        bitmap,\n                        Machine.gfx[5],\n                        16 + (~(stactop[0] & 0xf", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                    .Distance(position.To2D()) <= spell.Width)\n                                {\n                                    result.Add(target);\n                                }\n                            }\n                            break;\n                        case Collision.CollisionType.Minion:\n                            result", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "      if (graph.isAncestorOf(x, y)) {\n            return true;\n        }\n        List<Node> path = new ArrayList<>();\n        path.add(x);\n        Node current = x;\n        while (current != y) {\n            List<", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if (pop[i] is Drawable)\n                        plcs.Push(pop[i] as Drawable);\n                }\n            }\n            return null;\n        }\n        public void Dispose()\n        {\n            if (this.Parent != null)\n", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "      if (this.attachmentFile == null && other.attachmentFile == null) {\n            return true;\n        }\n        if (this.attachmentFile != null && other.attachmentFile != null) {\n            if (this.attachmentFile.getFileId() == other.attachmentFile.", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (m_Item.OnTouch(m_Item, mobiles[i]))\n                            break;\n                    }\n                }\n            }\n        }\n    }\n}\n\n// The code above is incomplete. The missing line of code is:\n// if", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t\t{\n\t\t\t\t\tHistory.RemoveAt(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "  return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public List<ComponentInstLight> getComponentInstLights(String userId, String componentName) {\n    return mock.getComponentInstLights(userId, componentName", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialogFragment = new ZipFilesDialog();\n                    dialogFragment.show(mActivity.getFragmentManager(), \"ZipFilesDialog", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "      this.channel.close();\n    }\n    public void close(Packet packet) {\n        this.j.writeLock().lock();\n        try {\n            this.channel.close();\n            this.m = null;\n            this.n = null;\n            this.o", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "              z_arr[p_index, kk, :] = z_dict[z_key][per][:]\n                z_arr[p_index, kk, 0] = z_arr[p_index, kk, 0].real\n               ", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "    return context.getString(resourceOne, name);\n    }\n    String names = String.join(\", \", recipients.stream().map(Recipient::toShortString).toArray(String[]::new));\n    return context.getString(resourceMany, names);\n  }\n}", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "      env[\"PATH\"] = os.pathsep.join(env[\"PATH\"] + extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = os.pathsep.join(env[\"LD_LIBRARY_PATH\"] + extra_lib)", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "def load_manifest(manifest_file):\n    with open(manifest_file) as f:\n        manifest_json = json.load(f)\n        manifest = Manifest()\n        for manifest_item in manifest_json:\n            manifest.update(manifest_item", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "      if (compiledScript != null) {\n            try {\n                AccessController.doPrivileged(new PrivilegedAction<Void>() {\n                    public Void run() {\n                        compiledScript.getClass().getProtectionDomain().getCodeSource().getFile().delete", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "          throw new NotImplementedException();\n        }\n        /// <summary>\n        /// Overrides the base class to provide a wrapper for the client and server data frames\n        /// </summary>\n        /// <returns>The data frame wrapper for the client</returns>\n        public override IData", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\nclass AtomicDataset(NumpyDataset):\n  \"\"\"\n  A dataset of atomic structures and energies.\n  \"\"\"\n  def __init__(self, X, y, transformer=None):\n    super(AtomicDataset, self).__init__(X, y)\n    self.", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo) obj;\n\t\tif (this.id == null && other.id != null)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tif (this.", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "      assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n\n    private void updateAll() {\n        stackDao.saveAll(asList(stacks));\n    }\n\n    private StackImpl createStack(String name) {\n        final Stack", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "      Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterCode(\"DEPTH\");\n        depthParameter.setParameterFamily(pf);\n        depthParameter.setValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION_REGEXP\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// [$] or [$ op $]\n\t\t\tif (pattern.Calls(S.Dollar))\n\t\t\t{\n\t\t\t\tif (candidate.Calls(S.Dollar))\n\t\t\t\t{\n\t\t\t\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "              if (colisionList.Any())\n                {\n                    extendedFarmLocation = colisionList.First().Position.To3D();\n                    extendedFarmLocation.Z += 50;\n                    extendedWillHit = q.GetDamage(objAi", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(contextMenus);\n\t\t// Controls\n\t\tsuper.addControl(new cmbContractType(this, new Integer(1), new Integer(1), new Integer(1), new Integer(1), new Integer(1), new Integer(1", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "@task\ndef prerequisites():\n    \"\"\"\n    Install Python prerequisites.\n    \"\"\"\n    # Install pip if it's not already installed.\n    if not sh.which('pip'):\n        print(\"Installing pip...\")\n        sys.exit(sub", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "          'sub_ids': [(6, 0, [self.env['test_testing_utilities.sub'].create({\n                'name': 'sub1'\n            }).id])]\n        })\n        with Form(r) as f:\n            with self.assert", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "  assert simplify(Sum(x**2, (x, 0, n))) == Sum(x**2, (x, 0, n))\n\n    # test change index\n    assert simplify(Sum(x**2, (x, 0, n))) == Sum(", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tUnityEngine.WWW www = new UnityEngine.WWW(string);\n\t\t\tpushValue(l,true);\n\t\t\tpushValue(l,www);\n\t\t\tsetTableValue(l, \"www\");\n\t\t\treturn 1;\n\t\t}", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "              this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeRemove(action, changedItems, startingIndex, changedItems.Count);\n            }\n        }\n        private void InitializeRemove(NotifyCollectionChangedAction action,", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "          String xml = writer.toString();\n            InputSource inputSource = new InputSource(new StringReader(xml));\n            XMLStreamReader xmlStreamReader = staxFactory.createXMLStreamReader(inputSource);\n            int event = xmlStreamReader.next();\n            assertEquals(event, st", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusId:\n                    c.CampusId = Token.Text.ToInt();\n                    break;\n                case Param.CampusName:\n                    c.Camp", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  Width: {0}\", ide.width);\nConsole.WriteLine (\"  Height: {0}\", ide.height);\nConsole.WriteLine (\"  Bit Depth: {0}\", ide.bitCount);\nConsole.WriteLine (\"  Color Planes: {0}\", ide.", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "              // adds a JSR instruction to the successor of the RET instruction\n                // in the subroutine\n                if (l.status & Label.TARGET) {\n                    Label successor = l.successors[0];\n                    successor.successors[0]", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "          ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectReferenceValue(ptr_of_this_method);\n            return ILIntepreter.PushObject(__ret, __", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.setText(position.toString());\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {\n\t\t\tString labelPosition = comboLabelPosition.getText();\n\t\t\treturn Position.fromString(labelPosition);\n\t\t}\n\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "      currImageValue = self.find_element_by_name(\"image\")\n        self.assertEqual(currImageValue.get_attribute(\"value\"), str(int(lastImageValue)+(-1)))\n\n# This test checks that the Animator decreases the image value by one when the decre", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "=====================\n\n# This is the end of the KexGSS module.\n# The following code is for the SSH-2 protocol itself.\n# It is not part of the KexGSS module.\n\n# The following code is for the SSH-2 protocol itself.\n", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "          FileSystemNode folderNode = FileSystemNode.createFolder(overallNodeName);\n            FileSystemNode databaseNode = FileSystemNode.createDatabaseNode(connectionData);\n            FileSystemNodeManager nodeManager = FileSystemNodeManager.getInstance();\n            nodeManager.addNode(folderNode", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "              (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                if res:\n                    return res[0]\n                else:\n                    return 0.0\n\n                return", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "  dV = (4. * np.pi * (1. + z)**3 * (np.log(1. + (np.sqrt(1. + (1. + z)**3)/(1. + z)) - 1.) - np.log(1. + z)))", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "      d.height = font.getSize() + getSettings().getDiagramSettings()\n                .getClarificationHeight();\n        d.width = getPreferredSize().width;\n        return d;\n    }\n    \n    @Override\n    public void setText(String", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "#self.cal_p2_in_plane(p0,p1,phi,flag)\n#self.cal_p2_in_plane(p1,p0,phi,flag)\n#self.cal_p2_in_plane(p0,p1,", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void SecuritiesButton_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "=====================\n\nclass _Hist3D(Object):\n    def __init__(self, *args, **kwargs):\n        self.hist = ROOT.TH3F(*args, kwargs['title'],\n                             [kwargs['xbins'], kwargs['ybins'],\n                             ", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "          Roster roster = RosterManager.getInstance(protocol).getRoster(contact);\n            if (roster != null) {\n                roster.addMessageArchive(query.getStart(), query.getEnd(), query.getMessages());\n            }\n        }\n   ", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "      im1L = im1.convert(\"L\", rgb2I)\n        h1 = im1L.histogram()\n\n        # compute transform\n        t = self.computeTransform(h0, h1, scale=scale)\n\n        # apply transform to image 0", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tif (tag.canSelectNextLogicalRecord()) {\n\t\t\t\ttag.selectNextLogicalRecord();\n\t\t\t\treadLog24(tag, sfi);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "=====================\n\n# Create the parser\nparser = Parser()\nparser.add_block(\"ACE\", Block)\n# Set the parser's handler\nparser.set_handler(\"ACE\", ACEHandler)\n# Parse the file\nparser.parse(\"test.ace\")\n# Display", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter.removeCommListener(this);\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "\n        path = environ['PATH_INFO']\n        for app, wsgi_app in self.apps:\n            if path.startswith(app):\n                return wsgi_app(environ, start_response)\n        raise NotFoundError(path)\n\n       ", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.train()\n\t\tmodel.savemodel( sys.argv[ 3 ] )\n\telse : print \"Usage : python %s <datafile> <outputmodel", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "          if (Utility.RandomDouble() < (double)chance / 100.0)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n\nI'm trying to add a", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "\n        entries.append(Enum(entry_name, entry_value, displayname, desc))\n\n        return typing.new_type(\n            'UserDefinedEnum_%s' % entry_name,\n            members=tuple(entries)\n        )\n\nThis code is", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    MessageBox.Show(\"Unable to locate any modules to configure.\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Unable to locate the FOG Service installation directory.\");\n                this.Close();\n            }\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "              object obj = this.ViewState[\"SubmitText\"] ?? true;\n                return (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// True", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "              if(this.trianglesToRender[textureHash] == null)\n                    continue;\n                if(this.trianglesToRender[textureHash].length > 0)\n                {\n                    insideBeginEnd = true;\n                    Main.glBegin(Main", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "@login_required\n@csrf_exempt\n@json_response\n@handle_api_errors\n@handle_api_exceptions\n@handle_api_throttling\n@handle_api_throttling_exceptions\n@handle_api_throttling_exceptions", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Driver driver = idlePool.Dequeue();\n                    if (driver.IsExpired(now))\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else\n                    {\n                        idlePool.Enqueue(driver", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "  return [var]\n\ndef _verify_list(var, name, default=None):\n    \"\"\"Ensures that the given variable is a list-like object of numbers.\"\"\"\n    if var is None:\n        return default\n    if not isinstance(var, (list, tuple)):", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "# Register the Quest with the system\n# This is done by adding new lines to the following file\n# /data/scripts/quests/\n# quests.xml\n#\n# The line below should look like:\n# <quest id=\"386\" name=\"StolenDignity", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60 * 60 - (double)num1 * 60) % 60);\n\t\t\t\t\tempty = string.Format(\"{", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "          // Initialize OpenGL state\n            GL.ClearColor(Color4.CornflowerBlue);\n            GL.Enable(EnableCap.DepthTest);\n            GL.Enable(EnableCap.CullFace);\n            GL.CullFace(CullFaceMode.Back);\n           ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\n    def add_metabolite(self, metabolite):\n        \"\"\"Add a metabolite to the model\"\"\"\n        self.reactions._add_metabolite(metabolite)\n        self.metabolites.append(metabolite)\n        metabolite._", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (ims.clinical.vo.TumourGroupListVo bean : beans)\n\t\t{\n\t\t\tcoll.add(TumourGroupListVo.buildFromBean(bean));\n\t\t}\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent = lines[selectedLine];\n\t\t\t\twhile(current!=null){\n\t\t\t\t\tif(current.x<left){\n\t\t\t\t\t\tleft = current.x;\n\t\t\t\t\t}\n\t\t\t\t\tcurrent =", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "      new LayoutAnimationController(set, 0.2f);\n        mListView.setLayoutAnimation(controller);\n    }\n\n    /**\n     * Fill the list with data.\n     */\n    private void fillData() {\n        // TODO Auto-generated method stub\n       ", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "              if (PartnerInterestRow.RowState != DataRowState.Deleted)\n                {\n                    if (PartnerInterestRow.FieldKey > HighestNumber)\n                    {\n                        HighestNumber = PartnerInterestRow.FieldKey;\n                    }", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\tfor (int i = 0; i < length; ++i)\n\t\t\t{\n\t\t\t\tif (Mappings.isTmh(structure[i]))\n\t\t\t\t{\n\t\t\t\t\tscoresSol[i] = this.", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
