{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tMobile m = p.", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tself._init(graph)\n\t\t\tA, Y, Z = self.build_tree(Y, Z)\n\t\t\tsolutions.append(A)\n\t\t\tP.put((self.get_score(A, Y, Z) + w, A", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "if __name__ == '__main__':\n    TestSndfile.main()\n    TestSeek.main()\n# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4\n# End of file", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def get_video_info(self):\n        \"\"\"\n        Get the video title, speaker name, location and date.\n        \"\"\"\n        self.open_video_page()\n        title = self.get_video_title()\n        speaker = self.get_speaker_", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t\twriter.addAttribute(\"label\", styleValue.getLabel());\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\nclass _AnswerData(_QAData):\n    def ask_string(self):\n        return self.answer\n    def hint_string(self):\n        return self.answer\nclass _AnswerDataWithHint(_AnswerData):\n    def __init__(self, answer,", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    mob.Target = new SR_TargetLocation(RuneAcc, mob);\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunePrompt(RuneAcc,", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "          for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n        }\n        s.println(\"***\");\n    }\n}\n\n/*\n * ServerHelloDone is sent by the server after it has sent all its\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "          try {\n                sp = new JESpace (name, path);\n                spaceRegistrar.put (name, sp);\n            } catch (Exception e) {\n                throw new SpaceError (e);\n            }\n        }\n        return sp;\n    }", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (item instanceof AlchemicalPotion) {\n\t\t\t\tRedButton btnImpose = new RedButton(Messages.get(this, \"", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "# Create a dispatcher and a server\ndispatcher = SoapDispatcher()\nserver = HTTPServer(('localhost', 8000), WSGISOAPHandler(dispatcher))\n# Register the dispatcher's methods\ndispatcher.register_method(name='add',\n                ", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "  def lock_status(self, status_id):\n        self.statuses[status_id]['locked'] = True\n\n# This is the code that needs to be completed\n# The lock_status method is called when a status is clicked\n# The status is locked to prevent the user from", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "def get_process_data(self, connection, method, params):\n    self.logger.info(\"Getting data from SFTP process\")\n    try:\n        if self.process is None:\n            self.logger.error(\"SFTP process is not running\")\n            return {\"error", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsInstanceOf<ZoneIdentityPermission> (c);\n\t\t\tAssert.IsNotNull (c);\n\t\t\tAssert.AreEqual (SecurityZone.Untrusted, c", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "# Create a context with our custom managers\ncontext = SSLContext.getInstance(\"TLS\")\ncontext.init(key_manager, trust_manager, null)\n# Create a socket with our context\nsocket = context.getSocketFactory().createSocket(\"localhost\", 8000)\n# Per", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "      DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "      self.__tmp_file = os.path.join(self.__tmp_dir, 'render-%s.raw' % str(uuid.uuid4()))\n        self.__datastream_fd = os.open(self.__tmp_file, os.O_RDWR | os.O", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, 0).ToString());\n\t\t\t\t\t//TODO: update database\n\t\t\t\t}\n\t\t\t}\n\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "      String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] != null) {\n                String argName = args[i].getName();\n                String argValue =", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}));\n\t\tprivate ConfigFile configFile;\n\t\tprivate String fileName;\n\t\tprivate ConcurrentMap<String, Object> loadedData;\n\t\tprivate Map<String, Object> ser", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\t// Add the nodes to the manager\n\t\tmgr.addToRoot(playbackNode);\n\t\tmgr.addToRoot(shortcutsNode);\n\t\tmgr.addToRoot(new FontSizeFieldEditor(FONT_SIZE, \"Font size\",\n\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "              if (m_Owner.CheckSequence())\n                {\n                    m_Owner.Target(m_Owner.Caster.Location);\n                }\n                base.OnTargetFinish(from);\n            }\n        }\n        private class InternalTarget : Target\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "# The following code is used to implement the \"identity map\" behavior of the\n# Session, which is a mechanism for ensuring that all instances of an ORM-mapped\n# class are represented by a single instance within the Session.  This is\n# important for maintaining consistency when multiple instances of the same", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getName();\n\t\t\tfinal List<IField> fieldsWithSameName = name2Field.get(name);\n\t\t\tif (fieldsWithSameName != null) {\n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "====================\n\nclass UIModule(object):\n    \"\"\"\n    A UIModule is a RequestHandler subclass that can be used to build a\n    web application.  It is a subclass of RequestHandler and provides\n    additional features for building web applications.\n\n    A UIModule is a", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n//\n// Generated by Novell PowerPack Studio 2003 for .NET\n//\n// Your code changes will be lost when rebuilding the package.\n// To make permanent changes, replace this file", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "if __name__ == '__main__':\n    args = parser.parse_args()\n    downloader = WigleDownloader( args.user, args.password, args.coordfile, args.outpath )\n    downloader.run()", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "              if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Poss", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "      builds += [{'os': 'Windows', 'os_pretty': 'Windows',\n                    'arch': 'x86', 'arch_pretty': '32-bit',\n                    'download_link': make_download_link(\n                        product='firefox',", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateID = StatusBL.getByProjectTypeIssueType(projectID, issueTypeID, objectID);\n\t\t\tif (stateID==null) {\n\t\t\t\treturn false;", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "          foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if ( argumentSyntax.Expression is IdentifierNameSyntax identifierNameSyntax && memberList.Any( x => x.Identifier.Text == identifierNameSyntax.Identifier.Text ) ) {\n                    var memberDeclaration = memberList.", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "      split_test = self._update_partition_id(0)\n        # Verify that the children are the correct verticals for the first group configuration.\n        self._assert_children(split_test, 2)\n        # Set to second group configuration.\n        split_test = self", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "          //if (vertical) {\n            //    PdfIndirectObject cmap = new PdfIndirectObject(writer, new PdfName(fileName + \"_CMap.afm\"));\n            //    writer.DirectObject();\n            //    writer.BeginText();\n            //   ", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the top-level cell that contains this cell\n\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "      task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      try (InputStream is = context.getResources().openRawResource(model.getSprite())) {\n        return BitmapFactory.decode", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "              if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "# TODO: Add NodeEditTagsForm and NodeManagePoliciesForm to the NodeView class\n# TODO: Add NodeEditTagsForm and NodeManagePoliciesForm to the NodeCollection class\n# TODO: Add NodeEditTagsForm and NodeManagePoliciesForm to the NodeDetailsView class\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles, sequences);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "              if (Enabled)\n                    ImageUrl = EnabledImageUrl;\n                else\n                    ImageUrl = DisabledImageUrl;\n            }\n            base.Render(writer);\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "sharpness = compound.getInteger(\"sharpness\");\n\t}\n\t\n\t@Override\n\tpublic NBTTagCompound writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "      return getId() + \" [\" + getProbability() + \"]\";\n    }\n}\n/**\n * The scope of an effect.\n */\nclass Scope {\n    /**\n     * The scope type.\n     */\n    public enum Type {\n        /**\n        ", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "# allow admin to access any group\nt2 = store.store.tokens.create(\n    username='admin',\n    groups=['everyone'],\n    read=True,\n    write=True,\n    admin=True\n)\nassert t2\n# test admin can access any group", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "# Test that the delta is empty when nothing has changed\nself.assertEqual(person.delta(), {})\n# Test that the delta is correct when the owner has changed\nperson.owner = Person(name=\"new_owner\")\nself.save(person)\nself.assertEqual(person.delta(), {'", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "=====================\n\ndef save_figures(product, output_dir):\n    \"\"\"\n    Save all figures to the given output directory.\n    \"\"\"\n    for name, fig in product.figures.items():\n        fig.savefig(os.path.join(output_dir", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "              if (!ignored.Contains(path) && !toScan.Contains(path))\n                {\n                    toScan.Add(path);\n                    _ = Task.Run(() => ScanMediaFiles(path, rootFolder));\n                }\n            }\n            foreach", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E merge(K key, E value, BiFunction<? super E, ? super E, ? extends E> remappingFunction) {\n\t\tI internalValue = internalMap.get(key);\n\t\t", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "      cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) > 0:\n            contobj = resbrains[0].getObject()\n            objcomments = p", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tpublic int Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z = value; }\n\t\t}\n\t\tpublic int X\n\t\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    // get channel_uri: check whether we have a channel for this parcel\n                    if (null == scene.LandChannel)\n                    {\n                        // create a new channel for this parcel\n                        scene.LandChannel = new RegionChannel(scene, scene.RegionSettings", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart=textDateStart.DateTime;\n\t\t\tPayPeriodCur.DateStop=textDateStop.DateTime;\n\t\t\tPayPeriodCur.DatePaycheck=textDatePaycheck.DateTime;", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "      lat, lon = _build_lat_lon_for_NAMEII_timeseries(column_headings)\n        # Convert the X and Y columns to lists.\n        x = [float(x) for x in column_headings['X']]\n        y = [float(", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "# This function is used by the group_member_create function to check if the user\n# is allowed to add a new member to the group.\ndef _check_group_member_auth(context, data_dict):\n    group = context['group']\n    user = context['user']", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tString label = example.getLabel(predictionAttribute.getName());\n\t\t\t\tint childIndex = Integer.parseInt(label);\n\t\t\t\tNode childNode = node.getChildren().get(childIndex);\n\t\t\t\t// setting outcome\n\t\t\t", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "          return this.SearchSegments(settings, segments, null);\n        }\n        /// <summary>\n        /// Performs a search for an array of segments and returns the corresponding <see cref=\"TranslationUnit\"/>s.\n        /// </summary>\n        /// <param name=\"settings\">The", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "          codePoint = string.charAt(offset++) << 10\n                      | string.charAt(offset++) & 0x3FF;\n         }\n         if (_range != null && _range.contains(codePoint)) {\n            return offset;\n         }\n         return", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\tObservationDAO observationDAO = new ObservationDAO();\n\t\tObservation observation = observationDAO.getObservationByAccessionNumber(accessionNumber);\n\t\tif (observation != null) {\n\t\t\tString studyFormNameFromDB = observation.get", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.ModVersion < ModVersion.Minimum)\n", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif (beans == null)\n\t\t\treturn coll;\n\t\tfor (int i = 0; i < beans.length; i++)\n\t\t\tcoll.add(beans[i].buildVo());\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify()\n#-------------------\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "          int [] ret = new int[A.Dimensions.NumberOfDimensions];\n            A.GetValueIndex(seqindex, ref ret);\n            return ret;\n        }\n    }\n}", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "pD[ 'plotName' ] = pD[ 'plotName' ].replace( ' ', '_' )\n  pD[ 'plotName' ] = pD[ 'plotName' ].replace( '/', '_' )\n  pD[ 'plotName' ] =", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (playerPower < playerPowerTarget)\n\t\t\t{\n\t\t\t\tvar powerProducer = world.ActorsWithinRange(GetRandomBaseCenter(),\n\t\t\t\t\tInfo.Construction.MaxRange,\n\t\t\t\t\tactor => actor.", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "      // Save the compiled plan to the catalog\n        // This will also save the plan to the file system\n        // and update the plan hash in the database metadata\n        db.compileStatement(catalogStmt);\n        // Save the plan to a file\n        String planFileName = \"plan_\" +", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(221, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte) parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = (byte) stop_bits;\n\t", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "  page = self.get_page(self.user.get_profile_url(), login_as=admin)\n    self.assertEquals(page.cobrand, cobrand)\n\n# This test is not working as expected.  The user's profile page should\n# redirect to the", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "  _keep_tempdir = parser.parse_args().keep_tempdir\n    unittest.main()\nif __name__ == '__main__':\n    main()\n# vim: set fileencoding=utf-8 :\n# Local Variables:\n# mode: python\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\tself[\"list\"].setList(self.newAPList)\n\t\tself[\"list\"].setCurrent(self.currentListIndex)\n\t\tself.currentListIndex = None\n\t\tself.oldlist = {}\n\t\tself.oldAPList = self.newAPList", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "              int barWidth = (int)Math.Ceiling(x * (BAR_WIDTH + INTER_BAR_WIDTH));\n                int barHeight = (int)Math.Ceiling(y * (BAR_HEIGHT + INTER_BAR_HEIGHT", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "  return results;\n  }\n}\n\n// The following code is for testing purposes only.\npublic static void main(String[] args) {\n  Properties props = new Properties();\n  props.setProperty(\"foo\", \"bar\");\n  props.setProperty(\"foo.bar\", \"", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "#        y_points = np.arange(-89.5, +89.5, 1.23)\n        y_points = np.arange(-89.5, +89.5, 1.23)\n        x_points, y_", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "          if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrent", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "# build_songs_dataset()\n# build_songs_dataset()\n# build_songs_dataset()\n# build_songs_dataset()\n# build_songs_dataset()\n# build_songs_dataset()\n# build_songs_dataset()\n#", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "          set { _numValues = value; }\n        }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "          this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(261, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n    def nullFunction( self, name, dll=None, resultType=None, argTypes=(), doc=None, argNames=(), extension=None, deprecated=False ):\n        \"\"\"\n        Create a null function object.\n\n        :param name: The name of the function", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "          baos.write(emptyStreams.toByteArray());\n            writeUint64(header, baos.size());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileNames(final DataOutputStream header, final List<S", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    alphaLevel -= 5;\n                    if (alphaLevel <= 0)\n                    {\n                        inRamp = true;\n                        try {\n                            Thread.sleep(rampDelay);\n                        } catch (InterruptedException e) {\n                            e", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "          item.CanBeRemoved = true;\n            item.CanMove = true;\n            item.CanRename = true;\n            item.CanPause = true;\n            item.CanForceStop = true;\n            item.CanDelete = true;\n            item.CanMove", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "          if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n            }\n            if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken,", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "#        f.writelines(['F) ', str(c.image_size), '\t\t# Image size (pixels)\\n'])\n#        f.writelines(['G) ', str(c.image_size), '\t\t# Image size (pixels)\\n'])\n#       ", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    i =", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "  @property\n    def _course_key(self):\n        \"\"\"\n        Return the CourseKey for the course.\n        \"\"\"\n        if self._course_key is None:\n            self._course_key = CourseKey.from_string(\n                u'edX+{", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tString chanceString = splitNumber[1].replace(\"%\", \"\");\n\t\t\tchance = Float.parseFloat(chanceString);\n\t\t}\n\t\treturn (int) (Math.random() * chance", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "# main\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            state=dict(choices=[\"present\", \"absent\"]),\n        ),\n        supports_check_mode=True,\n", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "          this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 12);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "```\n        for plugname, plug in self.loaded_plugins:\n            try:\n                self.ui_log.info(_(\" Running plugin %s ...\") % plugname)\n                plugruncount += 1\n                plug.run()\n            except Keyboard", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class IConferenceFossil(IConference):\n    def __init__(self, conference):\n        self.conference = conference\n        self.id = conference.getId()\n        self.name = conference.getName()\n        self.startDate = conference.getStartDate()\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(new File(fileTextField.getText()), messageWriter, subfoldersCheckBox.isSelected());\n            } else {\n                result", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getNumber(\"value\").intValue();\n\t\t       \t\t} else if (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t} else if (", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "      if (currentSession != null && currentSession.isOpened()) {\n            Bundle parameters = new Bundle();\n            parameters.putString(FIELDS_NAME, REQUEST_FIELDS);\n            Request request = new Request(currentSession, \"/me\", parameters, null", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) sum += emotion.chance;\n\t\tfor (Emotion emotion : emotions) emotion.chance /= sum;\n\t}\n}\nThe code above is a Java implementation of an emotions controller. It uses a list of emotions, each with a", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "#                    'property1': 2, 'property2': 3}\n                    'property1': 2, 'property2': 3}\n            }],\n            self.build.to_list()\n        )\n    def test_to_xml(self):\n       ", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "  Long = (x/k0 + (1/2)*(NorthernHemisphere*(1-eccSquared)*sin(phi1Rad)*cos(phi1Rad)*cos(LongOrigin*_deg2rad)\n                       + NorthernHemisphere*(3", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n    form = ReportUserForm(request.POST)\n    if form.is_valid():\n        report = form.save(commit=False)\n        report.user = request.user\n        report.save()\n        messages.success(request, \"User reported successfully.\")\n        return", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddStepOne(Step):\n    \"\"\"A step for the ProductAdd form to set the product name.\"\"\"\n    form = ProductAddForm\n    @property\n    def title(self):\n        return self.context.title\nclass ProductAddStepTwo(Step):\n    \"\"\"A step", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "              temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "=====================\n    config = _Config()\n    define_defaults(config)\n    define_constants(config)\n    define_post_processors(config)\n    config.parse_args()\n    config.initialize_isa()\n    return config\n# This is a stub for", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "              return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override bool IsSubclassOf (Type type)\n            {\n                return false;\n            }", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "# class OBD_PID_XX(OBD_Packet):\n#     name = \"PID_XX\"\n#     fields_desc = [\n#         # Add fields here\n#     ]\n#     # Add any specific methods here\n#     # For example, to parse a", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.connection = bus.get_connection()\n\t\tself.connection.add_filter(self.handle_method_call)\n\t\tself.connection.add_filter(self.handle_signal)\n\t\tself.connection.add_filter(self.handle_error", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "          }\n            else\n            {\n                AddSpell( typeof( FireballSpell ), (RegType)0x40, new RegEntry[] { RegType.BlackPearl, RegType.BatWing, RegType.Bloodmoss, RegType.DaemonT", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    self._app_ctx = top\n    if self._preserved:\n        self._app_ctx.pop(self._preserved_exc)\n    top = _request_ctx_stack.pop()\n    self._app_ctx = None\n    self._preserved = False", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "  response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name == topic_name)\n    return response\n# #############################################################################################################################\n# This", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "          if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "dx = (angles[:, np.newaxis] - min_rot_angle) / alen\nelse:\n    # Find projection of axis on detector\n    axis_proj = np.cross(ray_trafo.geometry.detector_axis,\n                        ray_trafo.geometry", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\nclass ProxylessNZB(NZBGet):\n    def __init__(self, name='ProxylessNZB'):\n        super(ProxylessNZB, self).__init__(name)\n        self.enabled = False\n        self.provider = None\n        self", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (type == FontSize.AsText)\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\treturn font_size_names [(int) type];\n\t\t}\n\t\t\n\t\t[SecurityPermission (SecurityAction.LinkDemand, Flags", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"Blocklengths too large for decryption.\\n\");\n\t\t\t\t}", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerObj = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerObj.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(innerObj.Properties[1].Key, Is.", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "              for (int w = 0; w < width; w++) {\n                    int index = h * width + w;\n                    if (w < width - 1) {\n                        edges.add(T2(w+\"-\"+h, w+\"-\"+(h", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "=====================\n\ni1 = iso.Isoelastics(ds, lut_identifier=\"test-LE-2D-rtdc-analytical\",\n                     channel_width=30, flow_rate=0.16,\n                     viscosity=", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "      final File file1 = new File(\"data/test1.db\");\n        final File file2 = new File(\"data/test2.db\");\n\n        final LocalTripleStore db1 = new LocalTripleStore(file1);\n        final LocalTripleStore db2 = new", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "if __name__ == '__main__':\n    unittest.main()\n\nThis code is a test script for the alert module. It imports the unittest module, defines a test class AlertTest, and sets up some test data. The test methods test_check_alert and test_low", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallation(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.vao);\n\t\t\tOpenGL.glDeleteTextures(1, ref OpenGL.texture0);\n\t\t\tOpenGL.glDeleteTextures(1, ref OpenGL.texture1);\n\t", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "  @property\n    def total_cov_mat(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the total *xy* covariance matrix.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return np.vstack((self.x", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "      return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation of this object\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁  noCanonicalIdAccounts.add(owningAccount.getAccountNumber());\n                  noCanonicalIdAccounts.add(owningAccount.getAccountName());\n                  noCanonicalIdAccounts.add(owningAccount.getAlias());\n                  noCanonical", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "          add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public IFolder SelectedFolder\n        {\n            get { return _selectedTreeNode == null ? null : _selectedTreeNode.Folder; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "      ImportVmTemplateCommand command = new ImportVmTemplateCommand();\n        command.setImportVmTemplateParameters(new ImportVmTemplateParameters());\n        command.getImportVmTemplateParameters().setImportAsNewEntity(isImportAsNewEntity);\n        command.getImportVm", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.LeftAttach = ((uint)(5));\n\t\t\tw10.TopAttach = ((uint)(1));\n\t\t\tw10.RightAttach = ((uint)(5));\n\t\t\tw10.BottomAttach = ((uint", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "# ==============================================================================\n# Set up the scripting environment\n# ==============================================================================\n# This is where you would set up the scripting environment.  This is where you\n# would set up the scripting environment variables, and where you would set up\n# the", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callingConv, Type returnType, Type[] parameterTypes, Type[] genericParameterTypes, Type[][] requiredCustomModifiers, Type", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "    return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Naming\", \"CA1810:IdentifiersShouldHaveCorrectSuffix\")]\n    public static global::bnet.channel", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Returns the index of the first vertex of quad i.\n     *\n     * @", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "      if (showDateData.equals(\"false\")) {\n            result.add(COLUMN_NAME_DATECREATED);\n            result.add(COLUMN_NAME_DATEMODIFIED);\n        }\n        return result;\n    }\n    /**\n     * Returns the page type", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}\n//  This script is part of the MaterialUI package, which can be found at http://www.assetstore.unity3d.com/#!/content", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "      Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    #endregion\n  }\n}\n\n//--------------------------------------------------------------------------------------------------\n//\n//  mRemoteNG - Manage Remote Desktops\n//  Copyright (C", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n               ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "          // Check if all required discounts are set\n            if (CriteriaCodesUsed.Count < 3)\n            {\n                ValidationColumn = DiscountTable.Columns[\"DiscountCriteriaCode\"];\n                VerificationResult = new TValidationResult(\n                    this,\n                   ", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "              stream.Read (buffer, 0, (int) stream.Length);\n                // Adding file content as blob/byte[]\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __len__(self):\n        \"\"\"Number of requirements\"\"\"\n        return sum(len(v) for v in self._reqs.values())\n\n    def __iter__(self):\n        \"\"\"Iterator over requirements\"\"\"\n        return itertools.chain(*self._reqs.values", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && !CopyRange; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (_customRange != value)\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string ConfigurationDirectory {\n\t\t\tget { return confDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\n\t\t\tget { return cacheDir; }\n\t\t}\n\t\tpublic", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "          if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation lineAnnotation = (SourceLineAnnotation) bugAnnotation;\n                if (lineAnnotation.getLineNumber() < 0) {\n                    throw new IllegalStateException(\"Invalid line number: \" + lineAnnotation);\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "}\nThis code is a base class for food items in Ultima Online. It includes properties for a Mobile that is eating the food, the amount of satiety the food provides, and the poison and mana regeneration properties. The class also includes methods for eating the food and applying the effects to the Mobile.", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.Item(\"Q\").GetValue<bool>() && Q.IsReady() &&\n", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraints with default values for all parameters\n\t * @return\n\t */\n\tpublic static GridBag", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "# ----------------------------------------------------------------------\n# This is the main function which is called by the SmartHome System\n# ----------------------------------------------------------------------\ndef main(sh):\n    logger.info('Starting DWD plugin')\n    dwd = DWD(sh)\n    dwd.run", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "  self.assertEquals(field_model_def, field_def)\n\nif __name__ == '__main__':\n    run_tests(TestParser)\n\n# vim:ft=python:et:sw=4:ts=4:sts=4:tw=78", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new object[] {10, \"E1\"});\n                // widen to string\n                var stmtText = \"create index idx_widen_string_int primary key LongPrimitive as select cast(LongPrimitive as string) as TheString, LongPrimitive from SupportBean\";", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        clibrebound.clibrebound_particle_truediv(c,", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n\nI'm trying to create a new model that inherits from ir.ui.view and overrides the save method to add some", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "          value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n        c.putClientProperty(documentBaseKey, null);\n    }\n    /**\n     * The key used to store the HTML renderer in a", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "s = create(filename, content)\nassert s.content_is_testharness\nassert s.manifest_items == [\n    (\"testharness\", \"/resources/testharness.js\"),\n]\nassert s.manifest_items_url == [\n    (\"testh", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmNamedSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.AddNamedQuery(namedQueryReference, mapDoc.GetNamedQuery(namedQueryReference));\n\t\t}\n\t\tpublic void Column(string columnName,", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer );\n\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "      invocationQueue.pop();\n    }\n    private void moveForward() {\n        if (currentGraph().isLast()) {\n            popGraph();\n            popInvocation();\n            if (currentGraph().isLast()) {\n                processNextInvoke();\n            }\n        }", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "# self.pytest_command = pytest\n\nI'm assuming that the code above is incomplete and you want to set the pytest_command variable based on the 'pytest' value from the pr_metadata. Here's the corrected code:\n\nself.pytest_command =", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "              if (phi) {\n                    ValueStamp stamp = ValueStamp.forNode(value);\n                    PhiNode phiNode = getCachedPhi(key, stamp);\n                    mergePhi(phiNode, value, stamp);\n                }\n            }\n", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "      if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException e) {\n                // Ignore\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraEvent", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonMapGump(from));\n\t\t\t}\n\t\t}\n\t\tpublic EodonMapGump(Mobile from)\n\t\t{\n\t\t\t_ = new EodonMapGump(from);\n", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "=====================\n\nThe code above defines two classes: `Record` and `RecordMetadata`. The `Record`\nclass represents a record in the database, while the `RecordMetadata` class is\nused to store JSON metadata for a record. The code also defines a number of\nauxiliary classes for st", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "  def __getitem__(self, key):\n        \"\"\"Django cache backend.\"\"\"\n        return self.module[key]\n\n    def __setitem__(self, key, value):\n        \"\"\"Django cache backend.\"\"\"\n        self.module[key] = value\n\n    def __", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n    def __init__(self, msgid, msgstr, fuzzy=False, obsolete=False,\n                 comments=None, encoding=None):\n        \"\"\"\n        Constructor.\n        **Keyword arguments**:\n          - *msgid*: string, the msgid.\n         ", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "#############################################################################################################################################\n# This is the entry point for the agent\n#############################################################################################################################################\ndef main():\n  \"\"\"\n  \"\"\"\n  agent = ValidateOutputDataAgent()\n  result = agent.execute()\n  Operations.", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif (action.startsWith(PLUGINS_PREFIX) || action.startsWith(PLUGINS_PREFIX + \"/\")) {\n\t\t\t\t// Plugins are allowed to do anything, but they must be loaded from the plugins directory\n\t\t\t\treturn action;\n\t", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "      gsp = yield self.setupGerritStatusPush()\n        result = yield self.run_fake_single_build(gsp, buildResult, verifiedScore)\n        self.assertEqual(result, 'Builder-name: Builder-name\\n'\n                                 'Result: %", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "  self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'test'\n    self.category.label = 'label'\n    self.category.scheme = 'scheme'\n    self.category.schemeURI = '", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "Map<String, AnnotationMirror> r2) {\n            if (r1 == null) return r2;\n            if (r2 == null) return r1;\n            for (Map.Entry<String, AnnotationMirror> e1 : r1.entrySet()) {", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "# Register classes\nbpy.utils.register_class(MATERIAL_PT_options)\nbpy.utils.register_class(MATERIAL_PT_specular_options)\nbpy.utils.register_class(MATERIAL_PT_diffuse_options)\n", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "          if (_engine.Memory.Mapper.MapperNo == 16)\n            {\n                var mapper16 = (Mapper16) _engine.Memory.Mapper;\n                mapper16_chr_bank = mapper16.chr_bank;\n               ", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "          JMenuItem oMenuItem = new JMenuItem(\"Open Document\");\n            oMenuItem.addActionListener(oActionListener);\n            oMenuItem.setMnemonic('O');\n            oMenuItem.setAcceleratorKeyStroke(KeyEvent.VK_O, Event.CTRL_", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Black Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Green Bears]\n\t\tAdd(\"Party Quest\",", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = MeasuredHeight;\n\t\t\tint newHeight = 0;\n\t\t\tfor (int i = 0; i < ChildCount; i++) {\n\t\t\t\tView child = GetChildAt (i);\n\t\t\t\tint childHeight", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "=====================\n\n# AnnouncementTwitterCrossPublicationManager\nclass AnnouncementTwitterCrossPublicationManager(models.Manager):\n    \"\"\"\n    Custom manager for AnnouncementTwitterCrossPublication model.\n    \"\"\"\n    def get_by_twitter_id(self", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "#lexers.register_lexer(name='php', filename='*.php', lexer=PhpLexer)\n# Enable highlighting for PHP code not between <?php ... ?> by default\n#lexers.register_lexer(name='inline_php', lexer=", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "# This is where I need help\n# I need to find the start time of the next group and the end time of the current group\n# and then calculate the duration of the flight\n# I then need to insert the start time, end time and duration into the flights table\n# I also need to insert", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "# TODO: implement this function\ndef db_get_last_snapshot(project_id):\n    \"\"\"\n    This function will connect to the database and return the last snapshot timestamp for the\n    given project_id.\n    \"\"\"\n    conn = rethinkdb_connection()\n    # Do", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tMsg(\"I'm not involved in any kind of conspiracy.<br/>I don't know what you're talking about.\");\n\t\t\tbreak;\n\t\t\tcase \"sheep\":\n\t\t\t\tMsg(\"I don't have any sheep.<br/>I don", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "responses = {\n    'login': LoginResponse,\n    'logout': LogoutResponse,\n    'anime': AnimeResponse,\n    'anime_list': AnimeListResponse,\n    'anime_list_add': AnimeListAddResponse,\n    '", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n    def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nclass HostData:\n    \"\"\"\n    Data about a single host's execution of a task.\n    \"\"\"\n    def __init__(self", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "              Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n            finish();\n        }\n    }\n}\nThis code is a part of an Android app that unshortens URLs. The code is", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "# TODO: Add step for checking that primary in \"path\" has only packages with given names\n# TODO: Add step for checking that primary in \"path\" has only packages with given versions\n# TODO: Add step for checking that primary in \"path\" has only packages with given archs\n# TODO:", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\n    def copy_tree (self, src, dest):\n        \"\"\"Copy a tree of files from 'src' to 'dest'.\"\"\"\n        if os.path.isfile(src):\n            shutil.copyfile(src, dest)\n        elif os.path.isdir(", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyProperties.Length; j++)\n\t\t\t{\n\t\t\t\tif (lazyProperties[j].Name.Equals(fieldName))\n\t\t\t\t{\n\t\t\t\t\tobject propValue = disassembled", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "#\n# @param job_id\n# @return job_data\ndef get_job_data(job_id):\n    q = db.query('SELECT * FROM jobs WHERE job_id=%s', [job_id])\n    return q[0] if q else None\n#", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "          return View(\"Form\", new DelegateViewModel());\n        }\n        // Display the form for creating a new Delegate\n        public ActionResult Create()\n        {\n            return View(\"Form\", new DelegateViewModel());\n        }\n        // Display the form for editing", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        return string.Format(\"{0} - {1} - {2} - {3}\", ((Circle) obj).Center.X, ((Circle) obj).Center.Y, ((Circle) obj).Radius, ((Circle) obj).Color);\n                    }\n                ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    def handlePremium(self):\n        premium_url = self.getURL(self.URL(self.pyfile.url, \"premium\"), \"premium\")\n        self.logDebug(\"premium_url: %s\" % premium_url)\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path != null && path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\tCPos GetSearchFromLocation(Actor self)\n\t\t{\n\t\t\t// If we have a previous", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "      return True\n\n    def clean_dhcp(self):\n        \"\"\"\n        This function is used to clean the dhcp files.\n        \"\"\"\n        if self.settings.manage_dhcp:\n            dhcp_dir = self.settings.dhcp_dir\n", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "      return Event.newBuilder().setSource(source).setSeqNo(seqNo.getAndIncrement());\n    }\n}\nThe code above is an abstract class named AbstractEventProducer. It has methods for sending different severity level events with a message and a type. It also has a", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "          for (PpmContext currentContext = context; currentContext != PpmContext.Zero; currentContext = currentContext.Suffix)\n            {\n                if (currentContext.NumberStatistics > 0)\n                {\n                    PpmState currentState = currentContext.Statistics[", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "              return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// Sequence VR\n        /// </summary>\n        public static readonly DicomVr Sq = new DicomVr(\"SQ\", false, 0", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[3]);\n\t\t\t//if(SqlitePersonSession.IsPersonInSession(sessionID, oldPersonID))\n\t\t\t//\tcontinue;\n\t\t\t//if(SqlitePersonSession.Is", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n    def test_delete_bytes_empty(self):\n        o = self.file(b'')\n        delete_bytes(o, 0, 0)\n        self.assertEquals(b'', self.read(o))\n\n    def test_delete_bytes_one", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n<td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X</td>\n    <", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "# TODO: plot the results\nif __name__ == '__main__':\n    args = argparse.ArgumentParser()\n    args.add_argument('--app', required=True)\n    args.add_argument('--test', required=False)\n    args.add_argument", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "if __name__ == '__main__':\n    unittest.main()", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRoundRect(x + 1, y + 1, controlSize - 2, controlSize - 2, 2, 2);\n\t\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "def simulateKMoreThanOne(self, k):\n    \"\"\"Test the KNN classifier with k > 1\"\"\"\n    failures = \"\"\n    patterns = []\n    classes = []\n    for i in range(10):\n      pattern = numpy.random.rand(1", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "      mirror.writeElement(elementKind, offset, value);\n    }\n    @HOSTED_ONLY\n    public static Layout getLayout(Kind elementKind, MaxLayout maxLayout) {\n        return new OhmArrayLayout(elementKind);\n    }\n}", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "          if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = FileUtils.Combine(ParentDirectory, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n            }\n           ", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\ndef url_parse(url):\n    \"\"\"\n    Parses a URL into its components.\n    \"\"\"\n    try:\n        result = urllib.parse.urlparse(url)\n    except:\n        # Python 2 compatibility\n        import urllib\n        result =", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "    }\n    }\n  }\n}\nThe code above is incomplete. The next line of code should be:\ni20 = i18 + i25;\nThis line of code is missing in the code above.\nTherefore, the corrected code should look like this:\n", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"  \" + s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "              });\n            #endregion\n            #region Lux\n            SpellSlot luxQ = SpellSlot.Q;\n            SpellSlot luxW = SpellSlot.W;\n            SpellSlot luxE = SpellSlot.E;\n            SpellSlot luxR = Spell", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.user@example.com\", \"test.user\"));\n\t}\n\tprotected void mockSecurityContextForUser(EmfUser user) {\n\t\twhen(securityContext.getCurrent", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "  @testlib.with_context\n    def test_popen_raises_error_on_non_existent_executable(self, context):\n        context.setup_error_codes()\n        context.add_error_code(errno.ENOENT, 'No such file", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (string.IsNullOrEmpty(configDirectory)) {\n\t\t\t\tconfigDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);\n\t\t\t\tconfigDirectory = Path.Combine(configDirectory, applicationName);\n\t\t\t}\n\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//\n\t\t// This method is called when the constraint is added to a DataTable.\n\t\t// It should be overridden in derived classes to perform any initialization\n\t\t// that is required when the constraint is added to a DataTable.\n\t\t//\n\t\tprotected virtual", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n        Dialog.setTabOrder(self.zoomby_label, self.fontsize_spinbox)\n        Dialog.setTabOrder(self.fontsize_spin", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "              return true;\n            }\n            String stationId = wxs.getString( 0 );\n            String name = wxs.getString( 1 );\n            String city = wxs.getString( 2 );\n            String country = wxs.getString( 3 );\n            String", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring queryString = \"from Continent c join fetch c.countries\";\n\t\t\t\tint count = s.CreateQuery(queryString).List().Count;\n\t\t\t\tAssert.IsTrue(stats.QueryStatistics.ContainsKey(queryString), \"QueryStatistics", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "              uiCRCITTSum = (uiCRCITTSum >> 8) ^ crc_it_table[(uiCRCITTSum & 0xFF) ^ uiByteValue];\n            }\n            return (ushort)uiCRCITTSum;\n        }", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn hasSpeedModule() ? 10 : 5;\n\t}\n\t/**\n\t * Returns the block below that affects the sentry's movement.\n\t * @return The block below that affects the sentry's movement\n\t */\n\tprivate BlockPos getBlockPos", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "          return new IHyperlinkDetector[] {};\n        }\n        IHyperlinkDetector[] detectors = \n                new IHyperlinkDetector[] {\n                        new CeylonHyperlinkDetector(editor),\n                        new JavaHyperlinkDetector", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "# Create the Object3DAspect widget\nself.object3DAspect = Object3DAspect(self)\n# Create the Object3DScale widget\nself.object3DScale = Object3DScale(self)\n# Create the Object3DPrivateInterface widget\nself.object", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set X\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( info.X, m_Mobile.Location.Y );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁     for (Object valueChoice : valueChoices)\n                     {\n                        String label = selectConverter.convert(valueChoice);\n                        if (Strings.equalsIgnoreCase(label, Strings.toString(value)))\n                        {\n                           chosenObj = valueChoice;", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tfor (int k=0; k<maxChangesRecorded; k++)\n\t\t\t\tsb.append(\"\"+k+\"\\t\"+totalWithChange[i][j][k]+\"\\t\"+fractionWithChange[i][j][k]+\"\\n\");\n", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order that contains the unpriced line\n                                int orderIndex = unpricedLine.Key;\n                               ", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\tpublic void ApplyClientBehavior<TBehavior> () where TBehavior : IClientBehavior\n\t\t{\n\t\t\tparent.ApplyBehavior<TBehavior> (this);\n\t\t}\n\t\tpublic", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "      final SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager, ownerId, ownerGroupId, mode);\n        expect(mockSecurityManager.getUser(ownerId)).andReturn(new User(ownerId, \"owner\"));\n        expect(mockSecurityManager.getGroup(", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X / viewport.Width, v.Y / viewport.Height);\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn new Vector3 (", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats_key(XDREnum):\n    PORT_STATS = 0\n    MAC_STATS = 1\n    __members__ = (\n        ('PORT_STATS', PORT_STATS),\n        ('MAC_STATS', MAC_STATS),\n", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    Console.WriteLine(\"Client disconnected: \" + i);\n\t\t\t\t    RemoveClient(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Sends a message to a specific", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "          if(type == Portal.RequestType.Step) {\n                List<StepBucket> list2 = convertToStepBuckets(list);\n                notifyStepsReceived(requestId, list2);\n            } else if(type == Portal.RequestType.Activity) {\n", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "# Generate the single use callback class\n  GenerateSingleUseCallback(bind_count, exec_count, is_method)\n\n# Generate the single use callback class\ndef GenerateSingleUseCallback(bind_count, exec_count, is_method):\n  \"\"\"Generate the single use callback class", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\"\"\"\nresponse = HttpResponse(content_type='application/json')\njson_data = []\nfor item in items:\n    json_data.append(range_item_dict(item))\njson_string = json.dumps(json_data)\nresponse.write(json_", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "              new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(new ServiceNode(\n                        new ConstantNode(TermId.mkTermId(\n                                TermId.SEARCH_SERVICE_URI)),\n                       ", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n    def dispatch(self, request, *args, **kwargs):\n        self.object = None\n        try:\n            self.object = self.get_object(queryset=self.model.objects.all())\n        except self.model.DoesNotExist:\n            #", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "    get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "          // tfqmr_iter(A, b, x, &tol, &max_it, &converged, &iter, &precond, &M, &z, &p, &q, &r, &tau, &tau_old, &uodd, &ueven", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] { sortedNumbers[left] };\n\t\t} else {\n\t\t\treturn new Apfloat[] { sortedNumbers[left], sortedNumbers[right] };\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the mean of", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "          if reference_set_map[v] != -1:\n                A[i, reference_set_map[v]] += 1\n                L[i] += 1\n            v = parent[v]\n        parent[edge.child] = edge.parent\n       ", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "  def test_backend(self):\n        self.connector = self.__class__.__name__\n        self.ocean_index = self.connector + \"_ocean\"\n        self.enrich_index = self.connector + \"_enrich\"\n        self.ocean_alias =", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam && slot.Value.Team != null)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(new AddBotOrder(", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" : \" + _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "# TODO: Implement DataFrame\nclass DataFrame(Frame):\n    def __init__(self, stream_id, flags=None, data=b''):\n        super().__init__()\n        self.stream_id = stream_id\n        self.flags = flags or set()\n", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "#endif\n            foreach (var node in cluster.Nodes) {\n                if (node.Cluster != cluster) {\n                    throw new Exception(\"Node \" + node + \" is not in cluster \" + cluster);\n                }\n                if (!cluster.BoundaryCurve.Contains(", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos (m_maxSlopeRadians);\n}\nvoid btKinematicCharacterController::setMaxSlopeCosine(double slopeCosine)\n{\n\tm_maxSlopeCosine = slopeCosine;", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "      for (ExpressionTree initializer : initializers) {\n            if (isInUniqueConstructor(initializer)) {\n                checker.report(initializer,\n                        CompilerMessages.UNIQUE_CONSTRUCTOR_NEW_ARRAY,\n                        atype);\n            }", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tN", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t\t_type = typeAttribute.Value;\n\t\t\t}\n\t\t}\n\t\t//--------------------------------------------------------------------------------------------------\n\t\t/// <summary>\n\t\t/// Creates the return type of the function.", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Size = new Size(100, 50);\n\t\t\t\tmyTrackBar.Orientation =", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\n\t\t\twhen(classType.isAnnotationType()).thenReturn(true);\n\t\t\twhen(classType.isInterfaceType()).thenReturn(false);\n\t\t\tdoReturn(Collections.singleton(", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.postdominators != other.postdominators)\n\t\t\treturn false;\n\t\tif (this.pathFlags != other.pathFlags)\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\t\n\t@Override\n\tpublic int", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "          int min2 = wideLExtent[start][r.leftChild];\n            int min = (min1 > min2) ? min2 : min1;\n            if (min > narrowL) {\n              continue;\n            }\n            int max1 = wideRExtent[", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "              'rsync',\n                '--archive',\n                '--compress',\n                '--delete',\n                '--exclude={\"pg_hba.conf\", \"pg_stat.conf\", \"pg_clog/*\",\n                 \"pg_xlog/*", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "writer.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n}", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null ) {\n\t\t\t return false;\n\t\t}\n\t\tif ( !( aThat instanceof Contact ) ) {\n\t\t\t return false;\n\t\t}\n\t\tfinal Contact that = (Contact)aThat;\n\t\treturn ( (", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "  if total_rej > 10:\n      print('Total number of rejected timesteps = %s' %total_rej)\n      break\n\nThe code is a multi-body simulation using LAMMPS. The simulation is performed for multiple structures, and the output is saved", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "      idx = node.op.idx_list\n\n        # This is a slice of the form `x[i:j]`\n        if len(idx) == 2 and isinstance(idx[0], int) and isinstance(idx[1], int):\n            # Check if the slice", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "=====================\n\ndef save_community_form_data(request, form):\n    \"\"\"\n    Save the data from the form to the database.\n    \"\"\"\n    if form.is_valid():\n        community = form.save(commit=False)\n        # Add user to", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "```python\nreturn query\n```\n# This is the end of the code. The code above is for defining and setting up an ORM event system, specifically for the SQLAlchemy ORM. The events include 'Instrumentation', 'InstanceEvents', 'InstanceEvents.InstanceEvent', '", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "# Register the descriptor class with the system.\n# This is necessary for the system to be able to create instances of the class.\n# The system will automatically register the module class when it is imported.\n# However, the descriptor class is not automatically registered.\n# You must explicitly register it.\n#", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "=====================\n\nThe code seems to be incomplete and missing some context. Here's a possible completion based on the given code:\n\n```python\n# ...\n\nNext line of code:\n=====================\n\ndef translate_changes(self, data_model_changes):\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && (Method == null && Field == null && Sig == null))\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"ldtoken: 'class' attribute must be combined with either 'method', 'field'", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description:\";\n\t\t\t//\n", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "      c = self.getNoPrefix(\"mail/syncmail.tag.20030101T000000Z\")\n        self.assertEqual(c.branch, \"tags/20030101\")\n        self.assertEqual(set(c", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "      if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n\n        for (Map.Entry<String, String> datum : csvData.entrySet", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(BotaniaAPI.manaHandler.addMana(player, this, getValueForWand())) {\n\t\t\tsync();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic int getValueForWand() {", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "          intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCommunity(Community", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "if __name__ == \"__main__\":\n    do_upgrade = True\n    if do_upgrade:\n        do_upgrade()\n    else:\n        print(\"Skipping upgrade\")", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.Close();\n\t\t\tcomputerMgmt=null;\n\t\t\t\n\t\t\t//this.Close();\n\t\t\t//Application.Exit();\n\t\t}\n\t\tprivate void importProcesses(string filename)\n\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "  for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Converts a iCal4J Period to a Datable.", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.Bind( DataSource, SourceEventName );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAndDont", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "          ISwitchManager switchManager = (ISwitchManager) ServiceManager.getService(ISwitchManager.class, container);\n            SpanPortJsonBean spanPortJsonBean = new ObjectMapper().readValue(jsonData, SpanPortJsonBean.class);\n            Status result = switchManager", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAlert = new ImageHelper(1000001, \"/ims/images/alert.gif\", new Integer(1", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "      return rnd.nextInt(size);\n    }\n}", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "  def make_assertion(self, subject, predicate, object, project_uuid):\n        \"\"\"\n        Make an assertion in a project\n        \"\"\"\n        # Create a new assertion\n        assertion = Assertion()\n        assertion.project = Project.objects.get(", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "          buffer.Append(\"          .shrink    = \")\n                .Append(StringUtil.ToHexString(Shrink)).Append(\"\\n\");\n            buffer.Append(\"          .mergedcell= \")\n                .Append(StringUtil.ToHexString(MergedCell)).", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katana\n\t\t\t\tbytes [posn++] = (byte) (ch - 0x30;\n\t\t\t} else {\n\t\t\t\t// Unknown character.\n\t\t\t\tthrow new ArgumentException (\"Invalid character\");\n", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n# ----------------------------------------------------------------------------------------------------------------------\n# Define a function to load a word from a register into a register\n# ----------------------------------------------------------------------------------------------------------------------\n@ispec(\"\"\"\n    IS_REGISTER(src)\n    IS_REGISTER(dst)\n\"\"\")", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties properties = new Properties();\n\t\t\tstream = location.openStream();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap map = new JRPropertiesMap();\n\t\t\tmap.setBase(map);\n\t\t\tfor (Enumer", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "          return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n         *", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.PurgeDefault();\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t\tAssert.AreEqual (0, csd.SystemAcl.Count);\n\t\t}\n\t\t[Test]", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "# Here we go!\n# Start the lookup thread and submit the results to it\n# The lookup thread will process the results and emit the\n# results as signals.\n# We connect to the signals and print the results.\n# The lookup thread will also stop itself when all\n# results have been processed", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "      // ----------------------------------------------------------------------------\n        // Add your custom RPCs here.\n        // ----------------------------------------------------------------------------\n        // The following RPCs are added by default:\n        // ----------------------------------------------------------------------------\n        // RPCs for the PhotonView component\n       ", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "      return rootLayout;\n    }\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n        if (Config.getBoolean(\"use_global_transport\", false)) {\n", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "      # Transform wave function to IBZ\n        psit_G = np.dot(psit_G, self.symmetry.op_scc[s])\n        if time_reversal:\n            psit_G = np.dot(psit_G, self", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "      CreateUtkastRequest utkastRequest = buildCreateUtkastRequest(PATIENT_PERSONNUMMER, \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\",", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body) {\n\t\t\t\t\tILBasicBlock childAsBB = child as ILBasicBlock;\n\t\t\t\t\tif(childAsBB != null) {\n\t\t\t\t\t\tif(prevChildAsBB != null", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    //if we're not a ragdoll then we'll need to set all of our parts to be ragdolls\n\t    if (!IsRagdoll) {\n\t", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class FractureLayer(GeoLayer):\n\nThis is a subclass of GeoLayer. It is used to represent a fracture layer in the geological model. The main difference between a FractureLayer and a GeoLayer is that a FractureLayer has additional properties related to fract", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "      out[outOff + 3] = (byte) ((num >>> 24) & 0xff);\n        out[outOff + 2] = (byte) ((num >>> 16) & 0xff);\n        out[outOff + 1] = (byte", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "          super( source );\n            this.objectVariables = objectVariables;\n        }\n        public FilteredPatternFinder( Iterable<PatternMatch> source,\n            final Map<String, PatternNode> objectVariables,\n            final Map<String, PatternNode> labelToNode )\n        {", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "def transform_values_holder_to_json(values_holder, format = None):\n    \"\"\"\n    Transform a values holder to a JSON object.\n    \"\"\"\n    if not values_holder:\n        return {}\n    if isinstance(values_holder, list):\n        return [", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "          frame.setSelected(true);\n            frame.toFront();\n          }\n        }\n      });\n      btn.addActionListener(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n          frame.setSelected(true);\n          frame.to", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "# This is where you would put your code to use the functions above.\n# For example, you might call getRandLC() to get a random LC file,\n# and then call getIDList() to get a list of all the LC files.\n# You might then call getLC", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "  for (int z = 0; z < p.getRasterDepth(); z++)\n    {\n      for (int y = 0; y < p.getRasterHeight(); y++)\n      {\n        for (int x = 0; x < p.getRaster", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    ContentValues values = new ContentValues();\n                    values.put(Db.Table1._ID, newId);\n                    values.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, values,", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "              m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n        #endregion\n        public IntPtr Ptr\n        {\n            get", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tif (queue[0].RemainingCost > 0)\n\t\t\t\t{\n\t\t\t\t\tplayerResources.Give(queue[", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    infoText += \" file\" if numberOfFiles==1 else \" files\"\n    infoText += \"<br>\"\n\n    if numberOfHiddenFiles>0:\n        infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \"\n        infoText += \"file\"", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "      code = code.replace('%', '%%')\n        # replace all variables with their values\n        for var in self.env.vars:\n            code = code.replace('@%s@' % var, self.env.get(var, ''))\n        # write the result", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "if __name__ == '__main__':\n    rospy.init_node('PlanningServer')\n    planning_server = PlanningServer()\n    rospy.spin()\n    rospy.loginfo(\"PlanningServer is shutting down.\")\n    rospy.", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] - h[ 0 ], 2 );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExtent ] +", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "              if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tif (qs.Execute().ReturnValue < 0)\n\t\t\t\treturn false;\n\t\t\tentity.cti_id = Convert.ToInt32(qs.GetParameterValue(\"@cti_id\"));\n\t\t\treturn true;\n\t\t}", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic int PropertyCount\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic string PropertyNames\n\t\t{\n\t\t\tget { throw new NotImplement", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "#\n# Main function\n#\ndef main():\n    \"\"\"Main function\"\"\"\n    argument_spec = dict(\n        key_id=dict(type='int', required=True),\n        password=dict(type='str', no_log=True),\n        authentication=dict(type", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "          component = self.store.update(component, self.user_id, fields=['display_name'])\n            # Verify that the component was updated\n            self.assertEqual(component.display_name, 'test_vertical')\n            self.assertEqual(component.edited_by, self", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "      digest.update((byte) (TEXT_CODE & 0xff));\n        updateWith(ch, start, length);\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {\n        digest.update((byte) ((PRO", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "#def mkrange(data):\n#    record = AEDesc.getdesc(data)\n#    min = record.getvalue('min')\n#    max = record.getvalue('max')\n#    return min, max\n#\n#def mkcomparison(data):\n", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "          Type type = api.ActionDescriptor.GetParameters()[0].ParameterType;\n            if (api.ActionDescriptor.ReturnType == typeof(HttpResponseMessage))\n            {\n                type = typeof(HttpResponseMessage);\n            }\n            // ...\n            // Resolve the type based", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "      elif event.keyval == gtk.keys.Return:\n            self.set_value()\n            return True\n\n        elif event.keyval == gtk.keys.Escape:\n            self.set_cursor_position(self.get_cursor(), 0)\n           ", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "          beanProperties.addPropertyValue(\"locations\", newLocationList);\n        }\n        // Return the bean's property values, which now include the global-properties bean and the new locations\n        return beanProperties;\n    }\n    /**\n     * The order of this bean definition is important", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "          lines = f.readlines()\n        finally:\n            f.close()\n    if lines:\n        for line in lines:\n            if len(line.strip()) == 0:\n                module.fail_json(msg=\"Password file contains blank lines\")\n    if state", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "      [In, MarshalAs(UnmanagedType.Interface)] IntPtr pUnkEvent\n            );\n        [PreserveSig]\n        int QueueEventParamUnkVar(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.Interface)]", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "      authorizations.addAuthorization(\n                Principals.getCurrentPrincipal(),\n                directedAclKeys.getTargetPrincipal(),\n                directedAclKeys.getPermission() );\n        return null;\n    }\n}", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "      for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element matches what is expected.\"\"\"\n        full_tag = self.expected_data.", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "=====================\n\n# Document implementation\nclass Document:\n    def __init__(self, ownerDocument, implementation):\n        self.ownerDocument = ownerDocument\n        self.implementation = implementation\n        self.documentElement = None\n        self.documentType = None\n        self.doct", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostics, context);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\n\t/**\n\t* Validate that the", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset)) {\n\t\t\t\tkeyLocator.setKeyData(decoder.readBlobTlv(TlvTypeCodes.KeyLocatorDigest, endOffset));\n\t", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "      for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update();\n        }\n        \n        //Updates the camera\n        updateCamera();\n        \n        //Updates the HUD\n        display.", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "      action.setColor( color );\n        GameEngine.model().getGame().addJoin( action );\n        hide();\n      }\n    } );\n    m_btnOk = m_btnOk == null ? m_btnOk = new Button( Messages.join() ) : m", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "# Raise an error if the response status code is not 200\nif r.status != 200:\n    err = json.loads(r.data.decode(\"utf-8\"))\n    if \"status\" in err and err[\"status\"] == False:\n        ms", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = response.FailureReason;\n\t\t\t}\n\t\t\tcatch (Exception ex)", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "def _find_carbon_elements(reaction):\n    \"\"\"Return carbon elements in a reaction.\"\"\"\n    return [met.id for met in reaction.metabolites.values() if \"C\" in met.id]\ndef _find_carbon_elements(reaction):\n   ", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "class Unit(CachedTreeItem, models.Model):\n    \"\"\"A unit is a single translation of a source string.\n    \"\"\"\n    #: The source string.\n    source = models.CharField(max_length=255, db_index=True)\n    #:", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n        migrations.AddField(\n            model_name='city',\n            name='state',\n            field=models.ForeignKey(to='events.State'),\n        ),\n\n        migrations.AddField(\n            model_name='academic',\n            name='city',\n", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "# Add the OpenFlow controller to the switch\ncontroller = load_controller(dpid_to_str(self.dpid), port=ofp.OFPP_CONTROLLER, protocols=[\"OFPROTO_ARP\"])\ncontroller.addListener(self)\n# Add the switch", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "  if (m_RecentItems.size() >= m_MaxItems) {\n      m_RecentItems.remove(m_RecentItems.size() - 1);\n    }\n    m_RecentItems.add(item);\n    updateMenu();\n  }\n", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "          if (src.FightMode == FightMode.Aggressor || src.FightMode == FightMode.PassiveAggressor)\n                return true;\n            return false;\n        }\n    }\n}\nI'm not sure what the next line of code", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "      if (halfTradePeriodDate == null && takeOfferDate != null) {\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod() / 2);\n        }\n        return half", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void Compile() {\n\t\tint i;\n\t\tNode p;\n\t\tBitArray b;\n\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteAsync(buff);\n\t\t\tBeginAsyncRead(mReadBuffer, 0, mReadBuffer.Length);\n\t\t\t// Wait for the read to complete\n\t\t\twhile (!IsAsyncReadComplete)\n\t\t\t{\n\t\t\t\tThread.S", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(order);\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tif(o1 == null && o2 == null)\n\t\t\t", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "          for (int j = 0; j < N_INDEXES; j++)\n            {\n                _units2Indx[j] = j;\n            }\n        }\n    }\n}\n// UPGRADE_NOTE: The following 'using' directives were", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "# Create a new compute rate\nrates = ChargebackRates()\nnew_rate = rates.ComputeRate(description='TestComputeRate',\n                            fields={'Used CPU': {'per hour': 0.01, 'per GB': 0.001}})\nnew_", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.WriteData( offset, length, src, discardWholeBuffer );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tOpenTK.Graphics.ES", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.scan_sat = self.scan_sat or []\n\t\tself.scan_sat.append(self.scan_sat_S2)\n\t\tself.scan_sat_S2 = None\n\t\tself.scan_sat_S2 = SatScanS2", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "          else if (filterStr.isEmpty()) {\n                throw new IllegalArgumentException(\"empty filter string\");\n            }\n            else {\n                String[] filters = filterStr.split(\";\");\n                for (String filter : filters) {\n                    String[] parts = filter.split", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "              // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerPixel);\n                \n                // Copy the decoded row to the previous row\n                Array.Copy(curr, 0, prior, 0, bytesPerPixel", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "      s = lowlevel.SignalMessage(interface='org.freedesktop.DBus',\n                                   member='NameOwnerChanged')\n        self.assertEqual(s.get_interface(), 'org.freedesktop.DBus')\n        self.assertTrue(s.has_", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def __str__(self):\n        return \"MASS object\"\n\nI'm trying to add a method to this class that computes the Massey product of two elements in the first cohomology group.  The method I've written, p_operator, takes an element and", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "          AssertParseError(\n                \"1:1: Message \\\"protobuf_unittest.TestMessage\\\" has no field \" +\n                \"\\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n        }\n    }\n}\n//#endregion", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal Map oldMap = this.map;\n\t\t\tfor ( Object entry : m.entry", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch ( Exception ex )\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"Error in WriteReturnItem : {0}\", ex.Message );\n\t\t", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\nclass HrAttendance(models.Model):\n    _inherit = 'hr.attendance'\n\n    def attendance_action_change(self):\n        \"\"\"\n        This method is used to change the attendance of the employee.\n        \"\"\"\n        self.ensure_one()\n       ", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = null;\n\t\tfor (int i = 0; i < form.grdResults().getRows().size(); i++)\n\t\t{\n\t\t\tgrdResultsRow row = (grdResultsRow) form.grdResults().get", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "              pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.X, pt.Y);\n            }\n        }\n        /// <summary>\n        /// Sets the position of the item.", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "      terminal = maker.new_terminal(self, cwd, profile, debugtab)\n        self.add_terminal(terminal)\n        self.show_all()\n        self.terminal_focus(terminal)\n        self.terminal_activate(terminal)", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    toReturn.Add(new StructFieldInfo(nameArraySizeFragment, managedType, marshalAttribute));\n                }\n            }\n            return toReturn;\n        }\n    }\n    public class StructFieldInfo\n    {\n        public StructFieldInfo(string name, Type", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type == null || base_type.IsValueType;\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsByRef {\n\t\t\tget { return attributes.GetMask (Attributes.IsByRef) != 0; }\n\t\t", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "              throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}\n//This is the code that needs to be completed.\n//The code is for a simple rule engine.\n//The engine uses a dictionary to store", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n    self.context = OpenSSL.SSL.Context(\n        _openssl_versions[protocol],\n        self._get_verify_locations(),\n        self._get_ciphers(),\n    )\n    self.context.set_options(OpenSSL.SSL.OP_", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.Visible = true;\n\t\t\t// Container child hbox3.Gtk.Box+BoxChild\n\t", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "# headbook.connect(\"page-reordered\", page_reordered)\n\n# The following code is for the \"show_tabs\" function\ndef show_tabs (show):\n    for notebook in notebooks.values():\n        notebook.set_tab_pos(gtk.POS_", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "  \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-next\": QKeySequence(Qt.CTRL + Qt.Key_PageDown),\n    \"Move-Tab-to-previous", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [name=\" + this.persistenceUnitName + \", provider=\" +\n\t\t\t\tthis.persistenceProviderClassName + \", transactions=\" + this.transactionType +\n\t\t\t\t\", dataSource=\" + this.dataSource + \", properties=\" + this.properties", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "  IEditorInput editorInput = getEditorInput();\n    if (editorInput instanceof IFileEditorInput)\n    {\n      IFileEditorInput fileEditorInput = (IFileEditorInput)editorInput;\n      return fileEditorInput.exists() && !fileEditorInput.isSaveLocal();", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(625, 12);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(10", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "      if (sb != null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n}\n\nThe code above is incomplete, and I need to complete it. The missing part is the last line of code", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512 RFC2104 Legacy\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void HMACSHA512_Test ()\n\t\t{\n\t\t\tbyte[] data = Enc", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(EnumSwitcher.option_1) {\n\t        case option_1_1:\n\t            current_sum += 4;\n\t            break;\n\t        case option_1_2:\n\t            current_sum += 4;\n\t            break;\n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "      return null;\n      String javaHome = java.GetStringValue(\"JavaHome\");\n      if (javaHome == null)\n        return null;\n      return javaHome;\n    }\n    private static String GetJavaHome()\n    {\n      String javaHome = Environment.GetEnvironmentVariable", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "  comment = l[len(self.ansible):]\n    if comment == name:\n        return [l, self.lines.index(l)]\n        # attempt to find job by name\n    elif re.match(r'^(\\d|[0-5][0-9", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# MeshModifierData\n# --------------\n#\n# This class is responsible for storing the data of a mesh modifier.\n#\n# It is used to store the data of a mesh modifier in a JSON file.\n#\n# The class should be able to convert the data to and", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "          double[] likelihoods = new double[totalBuckets];\n            for(int i = 0; i < totalBuckets; ++i)\n            {\n                double rankBucket = mScoreRankBuckets.get(i);\n                double rankCount = rankCount", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "      for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n       ", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\nif __name__ == \"__main__\":\n    p = Packet()\n    p.show()\n\nWhat I want to do is to make the script accept command line arguments and then inspect the packet based on the argument.\n\nFor example, if I run the script with the argument \"1", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "          this.rptComboBox.Location = new System.Drawing.Point(12, 12);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(200, ", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "          'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),\n            'document': ('main.Document', []),\n            'id': ('django.db.models", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "              // If the type is not defined in the schema, and we're not processing all types,\n                // then we don't need to process it.\n                return false;\n            }\n        }\n        return false;\n    }\n    private void processGlobalElement(", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "      self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_refuse(self, cr, uid, ids, context=None):\n        self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "          set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets the name of the column that is currently selected\n        /// </summary>\n        string IBOColSelector.CurrentColumnName\n        {\n            get { return this.Columns[this.Current", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "          return String.Format(\"{0} ({1}) [{2}] {3}\", Name, TargetName, ComponentTypeToString(ComponentType), Channels > 0 ? String.Format(\"{0} channels\", Channels) : \"\");\n        }\n        private static string ComponentTypeToString(Mixer", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = valueObject.getCareContext().getDomainObject();\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\tdomainObject.setCustomID(valueObject.getCustomID());\n\t\treturn domainObject;\n\t}", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "          [\"cargo\", \"run\", \"--\", \"--features\", \"servo\", \"--features\", \"gecko\", \"--features\", \"gecko-headless\"] + opts,\n            cwd=self.servo_dir(),\n            env=env,\n            stdout=subprocess", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double[] { 0, estN }, false));\n\t\t}\n\t}\n\t/**\n", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "              Stashed.SetStashDiffs(gitStash.Name, gitItemStatuses);\n            }\n            Loading.Visible = false;\n            Loading.IsBusy = false;\n            Stashes.Enabled = true;\n            refreshToolStripButton.Enabled = true", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "# print out the addresses of the beam monitors\nst_ARCH_STATUS_t status = job.status\nif status == st_ARCH_STATUS_SUCCESS:\n    st_ARCH_BEAM_ELEMENTS_BUFFER_t beam_elements_buffer = \\\n        job.get_", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "      if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.match(that) > 0;\n    }\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(\"AddInt\", asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += PanelDatenQuellen.TAB;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "# Load the index\narchive_index = load_archive_index(args.index_file)\n# Run the action\nargs.func(archive_index, args)\n# Exit\nsys.exit(0)\nif __name__ == '__main__':\n    main()", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "      self.miso_bits = miso\n        self.ss, self.es = ss, es\n        self.samplenum += 1\n        # TODO: Handle the 'DATA' packet.\n        # The 'DATA' packet is sent by the card in response to a command.", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "        cursor = limit - v_3;\n          if (cursor < I_limit) {\n            break lab0;\n          }\n          cursor--;\n        } while (false);\n        // gopast, line 201\n        cursor = limit - v_3;\n       ", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "              o = cls.newInstance();\n                dins.readFully(o);\n                if (cd != null) {\n                    cd.last_received = System.nanoTime();\n                    cd.nreceived++;\n                    cd.last_size", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "  def _get_key_usage(self):\n        try:\n            return [\n                crypto_utils.X509_EXTENSION_NAMES[name] for name in self.cert.get_extension(X509.NID_KEY_USAGE).", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (i != s.end());\n\t\t\t}\n\t\t\tif (still_there) {\n\"\"\", file=f)\n        if not v:\n            print(\"\\t\\t\\t/* Call the slot */\\n\\t", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "# interval_1word, interval_2words = get_contigous_intervals(X)\n# return [interval_1word.begin, interval_2words[0].begin]\n\ninterval_1word, interval_2words = get_contigous_intervals(X", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\t// tabulate attributes\n\t\t\t// (if any)\n\t\t\tif (sym.attrPos == null) {\n\t\t\t\tsym.attrPos = new PositionList();\n\t\t\t}\n\t\t\tsym.attrPos.Add(new Position(la", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n#\n#    OpenERP, the Open Source Enterprise Resource Planning software.\n#    Copyright (C) 2002", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS+\"/ssl\");\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\",", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "              permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testGetPermissions()\n    {\n        List<PermissionEntry", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "# Here you can add your test cases for the Enumerator class\n# or any other class you want to test.\n# For example:\n#\n# class TestEnumerator(object):\n#     def test_match_subsystem(self, context):\n#         devices = context.list", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "# Create a device object\ndevice = Device(deviceToken)\n# Login\nuser = device.newUser(loginId, password).login()\n# Check inspection\ndata = device.check_inspection()\nprint data\n# Save exploration data\n# user.exploration.save()\n#", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "# This is the main part of the script.\nargs = sys.argv\ndataset = None\ncalibrator = None\ncalibrator_name = None\ncalibrator_frequency = None\ncalibrator_position = None\ncalibrator_epoch = None\ncalibrator_array", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "          if (m_Keys.Count > 0)\n                ItemID = 0x1011 + (m_Keys.Count * 10);\n            else\n                ItemID = 0x1011;\n        }\n        private class InternalTarget :", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "      for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String deviceName = iter.next();\n            String ipAddress = ipAddressMap.get(deviceName);\n            int model = liveModelMap.get(deviceName);\n            Tuner tun", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "  if (lastSeenVersion < Version.USER_NOTIFICATIONS) {\n      jobs.put(Version.USER_NOTIFICATIONS, new UserNotificationsMigrationJob());\n    }\n    if (lastSeenVersion < Version.USER_NOTIFICATIONS_2) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "    List<Pattern> regex = new ArrayList<>();\n      for (String regexString : split[0].split(\"\\\\s+\")) {\n        regex.add(Pattern.compile(regexString, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE));\n      }\n      String", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "      for p in path:\n            try:\n                node = self.fs.Find(os.path.join(p, n),\n                                   self.env,\n                                   self.env[self.env_variables[include[0]]])\n                if node:", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "# Mapnik Python bindings are not thread safe.\n# If you need to use Mapnik in a multithreaded environment,\n# you should use the C++ API instead.\n#\n# The following code is a convenience wrapper around the C++ API\n# for Python developers.\n#\n", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "# Initialize the F5 module\nargument_spec = __salt__['f5.common.argument_spec']()\nargument_spec.update(\n    ip=dict(type='str', required=False),\n    port=dict(type='int', required=False),\n    interval", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "=====================\nclass MethodAddView(AutomateBase):\n    # ...\n    @NavigateTo\n    def go_to_method_add(self):\n        self.browser.link(text='Automate').click()\n        self.browser.link(text='Methods').click", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "          throw new Exception(\"ActionFactory: getActionObject: \"\n                    + \"Action class \" + className + \" not found.\");\n        }\n        return result;\n    }\n    public void onEvent(EventObject event) {\n        // TODO: implement event handling\n        //System.", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "=====================\n\nclass TestCreateThread(TestCase):\n    \"\"\"Tests for creating a thread.\"\"\"\n\n    def setUp(self):\n        super(TestCreateThread, self).setUp()\n        self.client = Client()\n        self.course_key = \"course-v1", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "# if msvc_exists(env, 'link'):\n#     embedManifestDllAction(target, source, env)\n#     return 1\n# else:\n#     raise SCons.Errors.BuildError(\"MSVC linker not found\")\n# endif\n# return", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "          IStructuredSelection selection = (IStructuredSelection) getSelectionWrapper().getSelection();\n            if (selection.isEmpty()) {\n                return;\n            }\n            final List resources = new ArrayList(selection.size());\n            for (Iterator i = selection.iterator(); i", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t// Allocate output fields\n\t\tdata.values=new Object[meta.getFieldnrs().length];\n\t\tdata.counts=new long[meta.getFieldnrs().length];\n\t\tdata.fieldnrs=meta.getFieldnrs();\n\t", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "```python\nassert f(last_rounded_fwd, d(2014,1,31, 15,30)) == (last_rounded_fwd, d(2014,1,31, 15,30))\n", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "          else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //Walking Range\n            int walkingrange = 0;\n            if (swalkingrange != \"\")\n                walkingrange = Utility", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "def get_vm_info(vm):\n    \"\"\"\n    Get the information of a running VM.\n\n    :param vm: QEMU/KVM virtual machine object\n    :return: dict: A dictionary containing the following keys:\n        - name: The name of the VM\n       ", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "      service.submit(pub);\n        service.shutdown();\n        service.awaitTermination(30, TimeUnit.SECONDS);\n        int received = rc.get();\n        System.out.printf(\"Received %d messages from SUB%n\", received);\n        service.", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "          if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(r, destination);\n            }\n            this.owner.getDecorator().onSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\t// Write the length of the compressed data\n\t\t\t// (this is the size of the IVT blob in bytes)\n\t\t\t// followed by the compressed data itself\n\t\t\t// (the compressed data is the IVT blob with all bytes compressed using the", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "      self.fm.env.run_command('arj', 'x', au_flags, cwd, self.callback(refresh))\n        self.fm.env.run_command('arj', 'x', au_flags, cwd, self.callback(refresh))\n        self", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringString_ConstructorFlag ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (typeof (COMTest), new string[] { \"MonoTests.System.ActivatorTestInternal.COMTest, \" +", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "  def testOneOldAndOtherNew(self):\n        da = Locale.objects.get(code='da')\n        de = Locale.objects.get(code='de')\n        repo = self._setup(da, Action.PENDING, Action.ACCEPTED)\n       ", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "          self.Log.debug(\"Sending userstate to server\")\n            self.send_message(mumble_pb.UserState(session=userstate.session,\n                                                mute=userstate.mute,\n                                                self_mute=userstate.", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "      PlayerGroup group = player.getPlayerGroup();\n        if (group != null) {\n            group.setLeader(player);\n        }\n    }\n    public static PlayerGroup getGroup(Player player) {\n        return player.getPlayerGroup();\n    }\n    public", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\ndef test_table():\n    t = vltable()\n    t.add_row([\"1\", \"foo\", \"bar\"])\n    t.add_row([\"2\", \"baz\", \"qux\"])\n    t.add_column(\"col1\", 10", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "  def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t}\n\twhile (parent instanceof Grid);\n\t((Grid) parent).addColumn(column);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "              Image = new Bitmap(ConvertHelper.ParseInt(ReadElement(element, \"Image\"), 0));\n            } catch (Exception ex) {\n                throw new Exception(\"Error loading creature \" + GUID + \":\\n\" + ex.Message);\n            }\n        }", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\t\tm_key[i] = new PeerlessActivation( m_Peerless );\n\t\t\t\t\tfrom.AddToBackpack", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(ims.careuk.vo.beans.ChangeOfServiceVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(bean.buildVo());\n\t\t}\n\t\treturn coll", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "Version(7, new int[]{1, 1, 1, 1}, new ECBlocks(1, new ECBlocks(1, new ECBlocks(1, new ECBlocks(1, new ECBlocks(1, new ECBlocks(1, new ECBlocks(1, new ECBlocks(", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pbDerived = kdf.DeriveBytes(pbKey, pbsSalt, pdwIterations,\n\t\t\t\tpParam, pbsOutput);\n\t\t\tif(!MemUtil.ArraysEqual(pbDerived, pbExpc))\n\t\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Requests mana from the given stack, if the stack is not a tool, this method will do nothing.\n\t * @param stack The stack to check for mana.\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Add your custom middleware classes here.\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.Cs", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but this queue has {1})\", NextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t\t/// <summary>", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "      if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList != null))\n                return false;\n        } else if (!this.actionTraceList.equals(other.actionTraceList))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "          dc.number = PhoneNumberUtils.parse(p.readString(), null);\n            dc.type = p.readInt();\n            dc.isRinging = p.readInt() != 0;\n            dc.isHeld = p.readInt() != 0;\n", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "          for (int x = 0; x < xSizeP; x++)\n            {\n                int index = y * xSizeP + x;\n                newVertices[index] = new Vector3(x + leftBottomCorner.x, y + leftBottomCorner.", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_METHOD_NAME_ADD, testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tresult = ((Integer) rawResult).intValue();\n\t\t\t\t\n", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void addSelection", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "          out.writeBoolean(false);\n            out.writeUTF(\"Object not found\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeInt(found.identifier);\n        }\n        out.flush();\n        out.close();\n        in", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        16 + (~stactics_barrier_level[i] & 0x0f),\n                        16,\n                        bitmap,\n                        Machine.gfx[5],\n                        i,\n                        0,\n                        0,\n                        D", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                    .Distance(position) <= spell.Width)\n                                {\n                                    result.Add(target);\n                                }\n                            }\n                            break;\n                        case Collisionable.YasuoWall:\n                            var wallPrediction =\n", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "      return existsInducingPath(x, y, graph, new HashSet<>());\n    }\n    /**\n     * Returns true if there is a path from x to y in the graph, such that all nodes on the path are in the set\n     * except for x and y.\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if (pop[i] is Drawable)\n                        plcs.Push(pop[i] as Drawable);\n                }\n            }\n            return null;\n        }\n        #region IDisposable Members\n        bool _disposed = false;\n        protected", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "      if (this.attachmentId != null && other.attachmentId != null && this.attachmentId.equals(other.attachmentId)) {\n            return true;\n        }\n        return false;\n    }\n    public void setAttachmentId(Long attachmentId) {\n        this.attachment", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (m_Item.GetDamage(mobiles[i]) > 0)\n                            m_Item.OnMovement(m_Item.Location, mobiles[i].Location);\n                    }\n                    m_Item.Next = this;\n                }", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t\t{\n\t\t\t\t\tHistory.Last().Value = null;\n\t\t\t\t\tHistory.Last().Key.", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "  return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public List<ComponentInstLight> getAvailComponentInstLights(String userId, String componentName,\n          String spaceId) {\n    return mock.getAv", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog2 = ZipFilesDialog.newInstance(files);\n                    dialog2.show(ActionModeController.this.mFragment", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "      if (this.channel != null && this.channel.isOpen()) {\n            this.channel.close();\n        }\n    }\n    public void close(IChatBaseComponent ichatbasecomponent) {\n        if (this.channel != null && this.channel.isOpen())", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "              z_arr[p_index, kk, :] = z_dict[z_key][per][:]\n                z_err_arr[p_index, kk, :] = z_dict[z_key][per][3:]\n            for t", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "    return context.getString(resourceOne, name);\n    }\n    String names = String.join(\", \", recipients.stream().map(Recipient::toShortString).toArray(String[]::new));\n    return context.getString(resourceMany, names);\n  }\n}", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "      env[\"PATH\"] = os.pathsep.join(env[\"PATH\"] + extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = os.pathsep.join(env[\"LD_LIBRARY_PATH\"] + extra_lib)", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "def load_manifest(manifest_file):\n    with open(manifest_file) as f:\n        manifest_json = json.load(f)\n        manifest = Manifest()\n        manifest.update(manifest_json)\n        return manifest\n\ndef update(self", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "      if (compiledScript != null) {\n            compiledScript.dispose();\n            compiledScript = null;\n        }\n    }\n    private Binding createBinding() {\n        final Binding binding = new Binding();\n        binding.setVariable(\"this\", compiledScript);\n", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "          throw new NotImplementedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether a timeout can be set for a wrapped client\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\nclass AtomicTransformer(Transformer):\n  \"\"\"\n  Transforms a dataset by applying a transformation to the atomic positions.\n  \"\"\"\n  def __init__(self, transformer):\n    super(AtomicTransformer, self).__init__(transformer=transformer)\n\n", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo) obj;\n\t\tif (this.id == null && other.id != null)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tif (this.", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "      assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n    @Test\n    public void shouldFindStacksByNames() throws Exception {\n        final String name1 = \"name1\";\n        final String name2 = \"name2\";\n        final", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "      Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterCode(\"DEPTH\");\n        depthParameter.setParameterFamily(pf);\n        depthParameter.setValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION_REGEXP\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// [$identifier]\n\t\t\tif (pattern.Calls(S.Dollar))\n\t\t\t{\n\t\t\t\tSymbol identifier = pattern.GetArg(0);\n\t\t\t\tif (candidate.Name == identifier)\n\t\t\t\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "              if (colisionList.Any())\n                {\n                    extendedFarmLocation = colisionList.First().Position;\n                    extendedWillHit = 1;\n                    break;\n                }\n                }\n                if (extendedWillHit > ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(contextMenus);\n\t\t// Controls\n\t\tsuper.addControl(new ctnContracts(this, new Object[] { control, new Integer(1), new Integer(1), new Integer(1), new Integer(1), new Integer(", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "@task\ndef python_prerequisites():\n    \"\"\"\n    Install Python prerequisites.\n    \"\"\"\n    if sys.version_info < (3, 5):\n        raise BuildError(\n            \"Python version 3.5 or later is required to build Open", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "          'sub_ids': [(6, 0, [self.env.ref('test_testing_utilities.sub1').id])]\n        })\n        f = Form(r, view='test_testing_utilities.parent_m2o_readonly')\n       ", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "  assert simplify(Sum(x**2, (x, a, b)).change_index((a, b, x))) == \\\n        Sum(x**2, (x, b, a))\ndef test_change_index_issue_1123():\n    assert simpl", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tUnityEngine.WWW www = new UnityEngine.WWW(string);\n\t\t\tpushValue(l,true);\n\t\t\tsetvalue(l,\"_obj\",www);\n\t\t\treturn 1;\n\t\t}\n\t\tcatch(Exception e) {\n", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "              this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeRemove(action, changedItems, startingIndex);\n            }\n        }\n        private void InitializeAdd(NotifyCollectionChangedAction action, IList newItems,", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "          String xml = writer.toString();\n            InputSource inputSource = new InputSource(new StringReader(xml));\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setNamespaceAware(true);\n            factory.setValidating(true);\n            factory.", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.CampusType = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  Width: {0}\", ide.width);\nConsole.WriteLine (\"  Height: {0}\", ide.height);\nConsole.WriteLine (\"  ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"  Planes: {0}\", ide.planes", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "              // adds a JSR instruction to the successor of the RET instruction\n                // in the subroutine\n                if (l.status & Label.TARGET) {\n                    Label ret = l.successors[0];\n                    ret.successors[0] = J", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "          ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method, __mStack);\n            UnityEngine.Ray __instance = (", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.setText(position.toString());\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {\n\t\t\tString labelPosition = comboLabelPosition.getText();\n\t\t\treturn Position.fromString(labelPosition);\n\t\t}\n\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "      currImageValue = self.getImageValue()\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue\n        print \"newImageValue=\", currImageValue\n        self.assertEqual(currImageValue, lastImageValue-1)\n\n# This is", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "=====================\n\n# This is the end of the KexGSS module.\n# The following lines are for the test suite.\n# They should not be included in the distribution.\n\nif __name__ == '__main__':\n    import unittest\n    import paramiko\n   ", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "          FileSystemTree tree = (FileSystemTree) this.tree;\n            FSTreeNode folderNode = tree.getFileSystemNodeManager().getOrCreateFolderNode(\n                    overallNodeName, connectionData, disableTreeSelection);\n            if (folderNode != null) {\n              ", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "              (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                if res:\n                    return res[0], res[1]\n                else:\n                    return 0, 0", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "  mvir = np.linspace(1e10, 1e15, 1000) #Mpc/h\n    mvir_arr = MvirToMvir(mvir) #Mpc^3/h^3\n    mvir_arr = np", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "      d.height = font.getSize() + getSettings().getDiagram().getFontMetrics(font)\n                .getHeight() + getSettings().getDiagram().getFontMetrics(font)\n                .getDescent();\n        d.width = getPreferredSize().", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "#self.cal_p2()\n#self.all_in_one(theta,phi,flag)\n#self.print_path(print_path)\n#self.print_result()\n#self.print_xyz()\n#self.print_xyz_os()", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void SecuritiesButton_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "=====================\n\nclass _Hist3D(Graph):\n    def __init__(self, *args, **kwargs):\n        Object.__init__(self, *args, **kwargs)\n        self.SetDirectory(ROOT.gDirectory)\n        self.SetName(self.__class__", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "          Roster roster = protocol.getRoster();\n            roster.addMessageArchive(contact, query.getStart(), query.getEnd(), query.getAllMessagesCount());\n        }\n    }\n}\n\n// The code above is incomplete, and the missing line of", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "      im1L = im1.convert(\"L\", rgb2I)\n    else:\n        im1L = im1\n    h1 = im1L.histogram()\nelse:\n    h1 = im1.histogram()\n\n#compute transform\nif im0", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tif (tag.canSelectFileByName(\"LOG\")) {\n\t\t\t\tfinal Iso7816.Response[] files = tag.selectFilesByName(\"LOG\");\n\t\t\t\tfor (final Iso7816.Response file : files) {\n\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "=====================\n\n# Create the parser\nparser = Parser()\nparser.register(\"ACE\", ACEParser)\nparser.open(\"test.ace\")\n# Process the archive\nfor block in parser:\n    print block.description\nparser.close()\n\n# EOF", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter.removeCommListener(this);\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "\n        path = environ['PATH_INFO']\n        for prefix, app in self.apps:\n            if path.startswith(prefix):\n                return app(environ, start_response)\n        raise NotFoundError(path)\n\n# vim: set et sw=4", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.train( sys.argv[ 2 ] , sys.argv[ 3 ] )\n\t\tmodel.savemodel( sys.argv[ 3 ] )\n\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "          if (Utility.RandomDouble() < (double)chance / 100.0)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n\nI'm trying to", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "\n        entries[entry_name] = entry_value\n\n        if displayname:\n            self.assign_property(\n                self.get_type_from_name(type_name),\n                entry_name,\n                \"name\",\n                displayname\n           ", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    MessageBox.Show(\"Unable to locate any modules to configure.\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Unable to locate the FOG Service DLLs.\");\n                this.Close();\n            }", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "              object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "              if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(this.textureArray[textureHash] != null)\n                {\n                    if(!this.textureArray[textureHash].getImage().isSelected())\n                       ", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "@login_required\n@json_view\n@handle_api_errors\n@handle_api_exceptions\n@handle_api_throttling\n@handle_api_throttling_exceptions\n@handle_api_throttling_exceptions_with_retry\n@handle", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Driver driver = idlePool.Dequeue();\n                    if (driver.Connection.State != ConnectionState.Closed)\n                        driver.Close();\n                    oldDrivers.Add(driver);\n                }\n            }\n            return oldDrivers;", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "  return [var,]\n\n    # List-like format.\n    elif isinstance(var, list):\n        if len(var) != 2:\n            raise ValueError('{} must be a list of length 2'.format(name))\n        return var\n\n    # Other format", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "# Register the quest in the system.\n# This is done by adding new lines in the following file:\n# data/config/config-quest.xml\n# Add <chain name=\"[QUEST_NAME]\" quests=\"[QUEST_NUMBER]\"/>\n# Add <quest id=\"", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60 * 60 - (double)num1 * 60) % 60);\n\t\t\t\t\tempty = string.Format(\"{", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "          // Initialize OpenGL state\n            GL.ClearColor(Color4.CornflowerBlue);\n            GL.Enable(EnableCap.DepthTest);\n            GL.Enable(EnableCap.CullFace);\n            GL.CullFace(CullFaceMode.Back);\n           ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\n    def add_metabolite(self, metabolite):\n        \"\"\"Add a metabolite to the model\"\"\"\n        self.metabolites.append(metabolite)\n        metabolite._model = self\n        self._trimmed = False\n\n# This is the", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (Object bean : beans)\n\t\t{\n\t\t\tims.clinical.vo.TumourGroupListVo vo = new ims.clinical.vo.TumourGroupListVo();\n\t\t\tvo.setBean((ims.clinical", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent = lines[selectedLine];\n\t\t\t\twhile(foundBottom){\n\t\t\t\t\tfoundBottom = false;\n\t\t\t\t\tfor(int i=selected.size()-1; i>=0; i--){\n\t\t\t\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "      new LayoutAnimationController(set, 0.2f);\n        mListView.setLayoutAnimation(controller);\n    }\n\t\n\t/**\n\t * Fill the list with data.\n\t */\n\tprivate void fillData() {\n\t\tListAdapter adapter = new Weave", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "              if (PartnerInterestRow.RowState != DataRowState.Deleted)\n                {\n                    if (PartnerInterestRow.FieldKey > HighestNumber)\n                    {\n                        HighestNumber = PartnerInterestRow.FieldKey;\n                    }", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\tfor (int i = 0; i < length; ++i)\n\t\t\t{\n\t\t\t\tif (Mappings.ssToInt(protein.getStructure()[i]) != Mappings.indexUnknown)\n\t\t\t\t{\n\t\t\t\t\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
