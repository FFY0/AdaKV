{"pred": "  private final transient KademliaRoutingTable routingTable;\n    private final transient JKademliaRoutingTable jRoutingTable;\n    private final transient KademliaRoutingTableListener routingTableListener;\n    private final transient KadConfiguration config;\n    private final transient", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "      mEffects.add(new NoEffect());\n        mEffects.add(new KernelBlurEffect());\n        mEffects.add(new KernelEdgeDetectionEffect());\n        mEffects.add(new KernelEmbossEffect());\n        mEffects.add(new KernelSh", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class MyCipher1(Cipher):  # noqa: E701\n    key_schedule = KeySchedule1\n    encryption = MyFunction\n\n\n# 2nd cipher: linear key schedule and encryption with XOR and rotates\n\nclass MyFunction2(BvFunction", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "  private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n\n    public EffectManager(Activity activity, ViewGroup parameterListView, SpectaculumView spectaculumView) {\n        mActivity = activity;\n        mParameterListView = parameterListView;\n        mSpectac", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "              new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "  private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务监听器\n     */\n    private TaskListener taskListener;\n\n    /**\n     * 任务监听器线程池\n     */\n    private ExecutorService executorService;", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tSet<Problem> problems = integrityCheck.check(args.path(), passphrase, args.checkFileIntegrity()).stream()\n\t\t\t\t\t.filter(problem -> problem.severity() >= args.minSeverity())\n\t\t\t\t\t.", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "          //save private and public Key to storage\n            rsa.saveRSAKeys(userId);\n            Log.d(this.getClass().getSimpleName(), \"Device registered with id: \" + deviceId);\n            Log.d(this.getClass().getSimpleName(), \"Device registered with", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "  U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(new U2fSignRequest(ACCOUNT_NAME, APP_ID_SIGN, SERVER_CHALLENGE_SIGN,", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "          self.acctA = RadiusAccount(self.uaA, self.uaO, self.global_config)\n        self.state = CCStateARComplete\n        if self.uaA.state == UaStateIdle:\n            self.uaA.state = Ua", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "\nclass URI(Signature):\n    __typeid__ = 1\n    __typeid_str__ = \"URI\"\n\n    uri = None\n\n    def __init__(self, uri):\n        self.uri = uri\n\n    def __repr__(self):\n        return", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "=====================\n\ndef convert_ast_constraint(ast_node):\n  \"\"\"\n    Converts the given AST node to a constraint.\n  \"\"\"\n  if ast_node is None:\n    return None\n\n  if isinstance(ast_node, Tree):\n    return convert", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "              intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void playVideoIntern(TDActivity activity, Bundle args) {\n        if (activity != null) {\n            activity.", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "      String city = getCity(latitude, longitude);\n        String country = getCountry(latitude, longitude);\n        String timeZone = getTimeZone(latitude, longitude);\n        String ipAddress = getIPAddress();\n        String userAgent = getUserAgent();\n", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "```python\nnetwork = Network('net1.json')\n```\nThis line of code creates a new Network instance from the JSON file named 'net1.json'.\n\nThe Network class is defined in the 'nn_dataflow/core/network.py' file. It is responsible for", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "```python\nclass BaseModel:\n    def __init_subclass__(cls, **kwargs):\n        if not hasattr(cls, \"__init__\"):\n            init_called = True\n            super().__init_subclass__(**kwargs)\n```\n\n```python\n", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "```python\n@method(infix=True, bp=100, lhs=XPathFunction, rhs=XPathFunction)\ndef map(self, context):\n    \"\"\"\n    map(XPathFunction, XPathFunction) as sequence()\n    \"\"\"\n    if", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KuwaharaTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapTransformation(),\n                    new MarbleTransformation(),", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n    @Inject MovieInfoPresenter presenter;\n    @Inject MovieInfoComponent component;\n    @Inject MovieInfoComponent.Factory factory;\n    @Inject MovieInfoViewBinder viewBinder;\n    @Inject MovieTrailersComponent trailersComponent;\n    @Inject SimilarMovies", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "              writeResponse(instance.getObjectName(), correlationId);\n\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e.getMessage(), correlationId);\n            } catch (MBeanRegistrationException e) {\n                writeResponse(e.getMessage(), correlation", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "=====================\n\n        wild.set_message(wild_report)\n        wild.monitor_task = wild.monitor_status(wild_report)\n\n\n    @cmd_wild.command(name=\"list\")\n    async def cmd_wild_list(self", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "```python\ndata = SNLIData(\n    part=\"train\",\n    path=\"data/snli_1.0/snli_1.0_train.jsonl\",\n    reader_type=\"jsonl\",\n    reader_kwargs={\"encoding\": \"utf-8", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.c0 == -1.6666666666666666e-05\n  assert doppler", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "              Intent intent = new Intent(getActivity(), ParticipantDetailActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivity(intent);\n\n            } else if (raffle.isValidSex() && !isMan) {", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "=====================\n\ndef test_extend(self):\n    assert not self.redlock.locked()\n    with self.assertRaises(ExtendUnlockedLock):\n        self.redlock.extend()\n    self.redlock.acquire()\n    for extension_num in", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "class Sound(FmodObject):\n    \"\"\"A Sound is a container for a single sound file.\n\n    :ivar str filename: The name of the file that was loaded.\n    :ivar int length_ms: The length of the sound in milliseconds.\n    :ivar int", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "\n    @calg.register(CompressionAlgorithm)\n    def calg_int(self, val):\n        self._calg = CompressionAlgorithm(val)\n\n    @sdproperty\n    def data(self):\n        return self._data\n\n    @data.register(", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n\n        # intensity and size measurements\n        findCellIntensityAndSize(imgshape, centers, verbose = verbose, out = out, **parameter);\n    \n    # intensity and size measurements", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "          Assets.perfectTapSound.play();\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play();\n        } else if (accuracy == Accuracy.NICE) {\n            Assets", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "          while (transactionIterator.hasNext()) {\r\n                Transaction transaction = transactionIterator.next();\r\n                printer.print(transaction);\r\n                println(printer.getPrintBuffer());\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\n```\n", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "              //return pgm;\n            }\n        }\n        return pgm;\n    }\n\n    /**\n     * This method is used to execute a query.\n     *\n     * @param sqlQuery\n     *            The query to be executed.\n     * @param named", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    UsageEncryption.OSYS,\n                    OperationMode.ENCRYPT,\n                    EncryptionAlgorithmCoded.NULL,\n                    AlgorithmParameterName.IV,\n                    AlgorithmParameterValue=random.getrandbits(128).to_bytes", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            if (env.combExpCheck[i] == 0) {\n                                env.combExpCheck[i] = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "=====================\n\napp_urls = [\n    url(r'^$', include('dashboard.urls')),\n    url(r'^api/', include('api.urls')),\n]\n\nurlpatterns = [\n    url(r'^', include('dashboard.", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tpublic ResourceData (Resources res) {\n\t\t\tmeter = Meter.getInstance ();\n\t\t\ttags = new EnumMap<SRSLevel, String> (SRSLevel.class);\n\t\t\tcolors = new EnumMap<SRSLevel, Integer> (SRSLevel", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "  def set_storage_type(self, storage_type):\n        if storage_type in STORAGE_TYPES:\n            self._storage_type = storage_type\n        else:\n            raise PyOrienteDBError(\n                \"Invalid storage type: %s\"", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "  public GivenWhenSteps<$SystemUnderTest, $Argument> when($Function<$SystemUnderTest, $Argument> step) {\n        return new GivenWhenSteps<>(preparation, step);\n    }\n}\n\npublic class GivenTwoArgumentsWhenSteps<$SystemUnder", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "  CommandResult result = null;\n    try {\n      result = process.await();\n    } catch (CommandFailureException e) {\n      throw new IosDeviceException(\n          this, \"Command failed: \" + e.getMessage(), e.getCommand().toString());\n    } catch", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\ttextColor = Themer.getColor(contextRef, R.color.text_color);\n\t}\n\tprivate void setTextSize() {\n\t\ttextSize = Themer.getDimension(contextRef, R.dimen.text_size);\n\t}\n\tprivate", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = XmlUtil.fromXml(xml, Message.class);\n\t\tif (message instanceof ReceivedMessage) {\n\t\t\tReceivedMessage receivedMessage = (ReceivedMessage) message;\n\t\t\tString text = receivedMessage.getText();\n\t\t\tString userId =", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "# 获取 apk 文件的 md5 值，用于文件名和目录名\napp_info = get_app_info(file_path)\n# 获取 apk 文件的 manifest 文件，用于获取包名等信息\nmanifest", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "  @command(pass_context=True, name='raid-city', category='Bot Info', aliases=[\"rc\"])\n    @checks.is_raid_party_owner()\n    async def cmd_raidcity(self, ctx):\n        \"\"\"\n        **!raid-city", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "      self.assertEqual(date_string_to_date(\"25/12/2016\"), datetime(2016, 12, 25))\n\n    def test_date_strings_with_slashes_get_converted_to_dates(self", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "      config_actor = ConfigActor(config_file, work_dir='/tmp')\n        config_actor.start()\n\n        # startup session database\n        database_actor = DatabaseActor(clear_sessions=False, delay_sessions=False, delay_bait=False,", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            ShareUtil.sharePicture(mActivity, picUrl, \"分享图片\", picture.getUrl());\n                            break;\n                        case 1:\n                            ShareUtil.shareText(mActivity, \"分享图片地址：\" + picture.getUrl", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\tfor j in range(num_contrasts):\n\t\t\t\t\t\tsaveauto(positive_data[j], \"pFWER_%s_%d.mgh\" % (opts.tmifile[0], j), affine=affine)", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "              ResponseSyncAdapter.class,\n                SurveyActivity.class,\n                SurveyPromptAdapter.class,\n                SurveyPromptAdapter.PromptFragment.class,\n                SurveyPromptAdapter.Loader.class,\n                SurveyPromptAdapter.Loader.OnContent", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "=====================\n\nclass SignatureV4(Signature):\n    \"\"\"\n    A version 4 signature packet.\n\n    :ivar int sig_version: The signature packet version number.\n    :ivar int sig_class: The signature packet class.\n    :ivar int sig", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "```python\n@method(nullary='..')\ndef select_ancestors(self, context):\n    \"\"\"\n    Selects the ancestors of the current node.\n    \"\"\"\n    if context is None:\n        raise self.missing_context()\n\n    if context.item", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "=====================\n\n    'no_members': Counter,\n    }\n\n    def __init__(self):\n      self._VARZ['size'].Set(0)\n      self._VARZ['no_members'].Set(0)\n      self._VARZ['no_members", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "      message = {'message': 'foo', 'version': self.version}\n        nc._send_message_with_protocol(message, protocol)\n        self.assertEqual(message, protocol.message)\n\n    def test_send_message_with_protocol_raises_error(", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "      assertEquals(\"SELECT * FROM users WHERE id = ?\", qe.getQuery());\n        assertEquals(1, qe.getParameters().size());\n        assertEquals(Types.INTEGER, qe.getParameters().get(0).getType());\n        assertEquals(1, qe.getParameters", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "      Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n        Assert.assertThat(ds, executions(0, is(not(success()))));\n        Assert.assertThat(ds,", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "              continue\n\n            # Send the ADR request\n            log.info(\"Sending ADR request for device {}\".format(device.mac))\n            message = self._createADRRequest(device)\n            yield self.loraserver.send(message)\n\n            # Update", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "=====================\n                    function = FmllrRescoreFunction(args)\n                    p = mp.Process(target=function.run)\n                    p.start()\n                    procs.append(p)\n                    p.join()\n                    for result in function", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n# IEEE 802.15.4 MAC frame format\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "      ObservableRegistry.register(this);\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRetainInstance(true);\n        setHasOptionsMenu(true);\n        chat = (Chat", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "=====================\n\nclass HITANS6(HITANSBase):\n    parameter = DataElementField(type=ParameterTwostepTAN6)\n\n\nclass HITANS(FinTS3Segment):\n    \"\"\"Parameter for two-step TAN generation\"\"\"\n\n", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "      ref_time = self.img_handle.getReferenceTime()\n\n        # Convert to datetime\n        ref_time_dt = datetime.datetime.utcfromtimestamp(ref_time)\n\n        # Convert to JD\n        ref_time_jd = datetime.datetime.to", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "      if (mPublicRoomsListList != null) {\n            mPublicRoomsListList.clear();\n        }\n\n        mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n\n        for (String homeserver : mHomeServerNames) {\n           ", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "```python\n@group(name=\"bingo\", invoke_without_command=True)\nasync def bingo(ctx):\n    await ctx.send(\"Welcome to the Bingo Game!\")\n    await ctx.send(\"Please use the following commands to play the game:\")\n   ", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "```python\n        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)\n```\n    #inferring adjacencies\n    infer_adj = AdjacencyInferer(raw_bp_graphs", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "      plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    initMiPush();}\n                stopGCM();\n                stopHwPush();\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HwPush\":\n                stopGCM();\n              ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "      registry.put((byte) (QUERY_MBEANS ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectInstance>>(\n                SET_OBJECT_INSTANCE));\n        registry.put((byte) (QUERY_MBEANS_WITH_TYPE", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "  public PersonalVulnsWindow() {\n        initComponents();\n        initListeners();\n        initTree();\n        initTreeListeners();\n        initTreeCellRenderer();\n        initTreeModel();\n        initTreeData();\n        initTreeSorting();\n        initTreeSearching();\n", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "  private void createAllCharts() {\n        datasetGenerator = new DatasetGenerator();\n        for (int metric : DatasetGenerator.METRICS) {\n            createMetricChartPanel(metric);\n            if (DatasetGenerator.isBreakdown(metric)) {\n                if (Dataset", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "      if (packet.getType() == PacketType.OPEN) {\n            if (transport instanceof PollingTransport) {\n                PollingTransport pollingTransport = (PollingTransport) transport;\n                pollingTransport.setAckManager(ackManager);\n                polling", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "      videoSource = factory.createVideoSource(videoCapturer,\n            appRtcClient.videoConstraints());\n      } else {\n        videoSource = factory.createVideoSource(videoCapturer, null);\n      }\n      videoSource.addTrack(factory.createVideoTrack(\"video", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "          contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 0);\n\n            return contentValues;\n        }\n\n        protected void onCreate(SQLiteDatabase db) {\n            db.execSQL(JobStorage.CREATE_TABLE);\n            ContentValues contentValues", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "  private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "=====================\n\n# create a publisher\npublisher = Publisher()\n\n# create a snapshot timer\nsnapshot_timer = SnapshotTimer()\n\n# create a snapshot thread\nsnapshot_thread = threading.Thread(target=snapshot_timer.run)\nsnapshot_thread.start()", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "=====================\n\n        self.setup_docker_config_extra(docker_config)\n        self.setup_docker_config_ide(docker_config)\n        self.setup_docker_config_web(docker_config)\n        self.setup_", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "  Observable<List<Board>> boards = Observable.fromIterable(Arrays.asList(SectionNames))\n        .flatMap(new Function<String, ObservableSource<List<Board>>>() {\n          @Override public ObservableSource<List<Board>> apply(@NonNull String sectionName) throws Exception", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "      Log.d(\"SearchContactFragment\", \"onStart()\");\n        //ObservableRegistry.register(this);\n        //ObservableRegistry.register(this, Fragment.class);\n        //ObservableRegistry.register(this, Fragment.class, Fragment.class);\n       ", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tString testClassName = model.getTestClassName();\r\n\tICompilationUnit testCu = null;\r\n\tICompilationUnit baseCu = null;\r\n\tICompilationUnit testCuToDelete = null;\r\n\tICompilationUnit baseCuToDelete = null;\r\n", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "      simulator_data_client = SimulatorDataClient()\n        simulator_data_listener = MockSimulatorDataListener()\n        simulator_data_client.add_simulator_data_listener(simulator_data_listener)\n        simulator_data_client.start_", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "          String response = new String(httpMessage.getRes().getResponse());\n            String request = new String(httpMessage.getReq().getRequest());\n            String comment = httpMessage.getComment();\n            String comment2 = httpMessage.getComment2();\n            String comment3 = http", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "\ndef test_simple_status_with_gsi(description):\n    status = simple_status(description)\n    assert status == expected_status\n\n\ndef test_simple_status_with_gsi_busy():\n    description = {\"TableStatus\": \"ACTIVE\", \"Global", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "=====================\n\nclass IffID3(ID3):\n    \"\"\"ID3v2 tag in an IFF file\"\"\"\n\n    def __init__(self, filename, load_frames=True, **kwargs):\n        self._filename = filename\n        self._load_frames = load", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "    visitCheckForBooleanOp(new VisitCheckForBooleanOp(n, op));\r\n\r\n      return null;\r\n    }\r\n\r\n    visitCheckForProxOp(new VisitCheckForProxOp(n, op));\r\n\r\n    return null;\r\n  }\r\n\r\n", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new EdgeDetectTransformation(),\n                    new EdgeDetectTransformation().setEdgeColor(Color.RED),\n                    new EdgeDetectTransformation().setEdgeColor(Color.GREEN),\n", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "```python\n            if self._header[1] == 1:\n                exception_class = PyOrientCommandException\n            elif self._header[1] == 2:\n                exception_class = PyOrientConnectionException\n            elif self._header[1] == 3:", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "=====================\n\napi = DERBMDATA(args.api_key)\n\nargs_get_datetime(args)\n\nif get_check_data(api, args) is False:\n    return None\n\n# TODO: Add code to print the data\n\nreturn api", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum();\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage();\n\t\t\t}\n\t\t\titem.copyFrom( proxy );\n\t\t\titems.add( item );\n\t\t}\n\t\treturn items", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "  user_key = dump_key(engine, user)\n\n\ndef test_load_key():\n    user = User(id=\"foo\")\n    user_key = {\"id\": {\"S\": \"foo\"}}\n    user_from_key = User.load(user_key", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "      new TaskName()),\n        StaticString.CONDITIONAL_WHITESPACE,\n        new Spinner(Spinner.SPINNER_DASHES),\n        StaticString.CONDITIONAL_WHITESPACE,\n        new ProgressBar(50,", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "public static Iframe iframe(Attribute... attributes) {\n\t\treturn new Iframe(attributes);\n\t}\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\tpublic static H2 h2(Attribute...", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "=====================\n\nevents.append(Event(e))\nreturn events\n\n# Adding a new method to the Packet class to create a new IP address\ndef create_ip_address(self, cidr, facility=None, organization=None, tags=None):\n    params", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "  Matcher<? super BatchParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    //////////////////////////////////////////////////////////////////////////////\n    // PreparedStatementHolderAssertions\n    //////////////////////////////////////////////////////////////////////////////", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "          if (mWallpaper != null) {\r\n                WallpaperManagerCompat.getInstance(this).setWallpaper(mWallpaper);\r\n                if (mWallpaper != null && mWallpaper.getBitmap() != null) {\r\n                    mImageView.setImageBitmap(m", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "\n  private static final Map<Operator, Class<? extends Query>> OP_TO_QUERY_CLASS = new HashMap<Operator, Class<? extends Query>>() {{\n    { put(Operator.AND, BooleanQuery.class); put(Operator.OR, BooleanQuery.class); put(Operator.", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\n\t\tif len(args.genotype)==0:\n\t\t\tprint 'ERROR: You should define genotype path!'\n\t\t\texit()\n\n\t\tif len(args.phenotype)==0:\n\t\t\tprint 'ERROR: You should define phenotype", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "=====================\n        self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n        # Get the video file info\n        self.fps = self.vid.img_width * self.vid.img_height / self.vid.img_size\n       ", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "# 3. create image\nimg = models.Image(shape=(128, 128), dtype=np.float32)\n\n# 4. apply ilm\nilm = ilms.LegacyILM(\n    ilmvals=np.array([IL", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tFoodGroupRegistry.sync(player);\n\t}\n\n\tpublic static void setInStone()\n\t{\n\t\tFoodGroupRegistry.setInStone();\n\t}\n\n\tpublic static void clear()\n\t{\n\t\tFoodGroupRegistry.clear", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "=====================\n\ndef calculate_post_rank(request):\n    posts = Post.objects.all()\n    if request.GET.get('sort_by'):\n        sort_by = request.GET.get('sort_by')\n        if sort_by == 'new':\n", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tISingleCellSelection selection = (ISingleCellSelection) selectionLayer.getSelectionModel().getSelection();\n\t\t\t\t\t\tif (selection != null) {\n\t\t\t\t\t\t\tISingleCellSelection newSelection = (ISingleCellSelection) selected", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "  @keyclass.register(RevocationKeyClass)\n    def keyclass_revocationkeyclass(self, val):\n        self._keyclass = val\n\n    @sdproperty\n    def keyalg(self):\n        return self._keyalg\n\n    @keyalg.register", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "```python\n        if item is None:\n            yield context.root\n        elif is_processing_instruction_node(item):\n            if self.arg:\n                if item.target != self.arg:\n                    continue\n            yield item\n```\n\n\n###", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "\ndef handlePuffles(client):\r\n    puffles = client.data.get('puffles', [])\r\n    if not puffles:\r\n        puffles = []\r\n\r\n    puffles_as2 = getAS2PuffleString(client,", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "\nfig, ax = interaction.make_figure(size=(10,10), title='Test')\n\n# Create a state for the simulation\ns = interaction.State(\n    name='Test',\n    components=[\n        ('image', interaction.ImageComponent(im=im, field", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "```python\n        with mp_context(num_processes=self.num_processes):\n            results = run_mp(compile_information_arguments, jobs)\n        self.compile_information_dict = results\n```\nThis code uses the `run_mp` function from", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "=====================\n\n# Recompute the rotation wrt horizon\nplatepar.rotation_from_horizon = RMS.Astrometry.rotationWrtHorizon(platepar)\n\n# Update the pointing solution\nplatepar.updatePointingSolution()\n\n#", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "      contentValues.put(JobStorage.COLUMN_INTERVAL_MS, validInterval ? 30_000L : 0L);\n        contentValues.put(JobStorage.COLUMN_BACKOFF_MS, 5_000L);\n        contentValues.", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "      FragmentObservable.getObservable(ChatSettingsRemove.class).register(this);\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRetainInstance(true);\n        set", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "class ProgressFilter(django_filters.FilterSet):\n    indicator = django_filters.ModelChoiceFilter(\n        name='component__indicators', queryset=Indicator.objects.all())\n    target = django_filters.ModelChoiceFilter(name='component__target',\n                                           ", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "          presenter.getProduceData().setUpdateDate(new History(produces, presenter.getProduceData().getDefaultDate(), presenter.getProduceData().getDefaultMarket()));\n            presenter.getProduceData().updateBookmark(produces);\n            presenter.", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "          @Override\n            protected void onSuccess(final Channel channel) {\n                reconnecting.onSuccess();\n            }\n        }).then(deferred.promise());\n\n        return deferred.promise();\n    }\n\n    @Override\n    public Promise<Void>", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "              new RegistrationParam(success, email, password, message));\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "  private final Router router;\n\n    /**\n     * Constructor for the {@link Matcher} filter.\n     *\n     * @param map {@link RoadMap} object for the map to be matched against\n     * @param router {@link Router} object for routing between {@", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "  private List<FilterType> filterTypes;\n    private HashMap<String, Integer> filterTypeMap;\n    private FilterUrl filterUrl;\n\n    public DropMenuAdapter(Context context, String[] titles, List<FilterType> filterTypes, OnFilterDoneListener onFilterDoneListener) {", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "message = args.gps_sv[0].getMessage()\n  assert isinstance(message, ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "=====================\n\n        with self.temp_matrix():\n            self.transform(self.style.transform)\n            self.display_list = DisplayList(self, self.outlines, self.triangles, self.style)\n            self.display_list.render()\n\n", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"AppData\")) {\n\t\t\t\t\ta = new AppData(data.substring(5));\n\t\t\t\t\tapps.add(a);\n\t\t\t\t} else if (data.startsWith(\"ShortcutData\")) {", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "              if (AppInfoAction.isShow && AppInfoAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppInfoAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "      self.beg_alt, self.beg_az = raDec2AltAz(self.beg_vect[0], self.beg_vect[1], self.lon, self.lat)\n        self.end_alt, self.end_az = ra", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.add(m);\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "public boolean enter(Node node) {\n    return true;\n}\n}\n\n/**\n * Visitors that need to traverse the entire tree, but don't need to filter nodes,\n * implement this interface.\n */\npublic interface NodeTraversalVisitor extends NodeNavigationVisitor {\n", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n    public OpenAPIProcessor() {\n        parserFactories.add(new SpringParserFactory());\n    }\n\n    @Override\n    public Set<String> getSupportedAnnotationTypes() {\n        return new HashSet<>(Arrays.asList(Path.class.getName()));\n    }\n", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "      bind(GerritSettings.class).toInstance(new GerritSettings());\n\n        install(new GerritUiModule());\n        install(new GerritDiffModule());\n        install(new GerritRestModule());\n        install(new UtilsModule());\n       ", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    File snapshot = snapshots.get(i);\r\n                    long zxid = getZxidFromSnapshot(snapshot);\r\n                    if (zxid >= zxidLong) {\r\n                        snapFile = snapshot;\r\n                        break;\r\n                    }\r\n                   ", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "=====================\n        entries = [e for e in entries if txn_matches(e, query)]\n        if filter_type is not None:\n            entries = [e for e in entries if filter_matches(e, filter_type)]\n        self._account2visibleentries[account", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "  def __init__(self, marker, data=None, **kwargs):\n        super(segment, self).__init__(**kwargs)\n        self.Marker = Int(marker, 'Marker', 'marker')\n        self.Data = Str(data, 'Data', 'data')\n\n", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t}\n\t\t\t\t\treturn Api.search(query)\n\t\t\t\t\t\t\t.map(HistoricalSearch::getQuery())\n\t\t\t\t\t\t\t.map(query1 ->", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "# 2. create a random background\n# 2.1. create a random background image\n# 2.1.1. create a random background image with a given size\n# 2.1.1.1. create a random background image with a given size and shape\n# 2", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "=====================\nif len(left.values) != len(right.values):\n    raise ValueError('Both columns must have the same length.')\n\nresult, index = apply_fast_and(left.values, right.values)\nreturn Column(result, index)\n\ndef", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request != null) {\r\n                        stringBuilder.append(\"\\n\\nApp: \")\r\n                                .append(request.getName())\r\n                                .append(\"\\nPackage: \"", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "====================\n\nclass AbstractDateTime(AbstractAtomicValue, metaclass=AtomicTypeMeta):\n    \"\"\"\n    An abstract base class for all atomic date-time types.\n\n    :ivar year: The year of the date-time value.\n    :ivar month: The", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "          return SearchMenuPage()\n        if pageletId == 'Mediathek':\n            return Mediathek()\n        if pageletId == 'Player':\n            return PlayVideo(PlayerStore(self.log, self.settings), self.settings.disableSubtitles)\n", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "          if not checkFileExistence(pattern.get(\"DataFile\")):\n                errmsg += \"Pattern: %s, DataFile: %s, does not exist.\\n\" % (pattern.getName(), pattern.get(\"DataFile\"))\n\n            # 2.2 data file format", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "=====================\n    serializer_class = PlanSerializer\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\n    filter_class = GoalFilter\n    ordering_fields = ('code', 'name", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "private RepoService repoService;\nprivate RepoItem repoItem;\nprivate StarItem starItem;\nprivate StarItemAdapter starItemAdapter;\nprivate List<StarItem> starItemList = new ArrayList<StarItem>();\nprivate CommitItemAdapter commitItemAdapter;\nprivate List<CommitItem>", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(ddiService, preprocessors, postprocessors);\n\t\t\n\t\tGenerationService generationService = new GenerationService(ddiService, preprocessors, postprocessors);\n\t\t\n\t\tFile inputFile = new File(base", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        new UserLoginTask(user, this, this.getClass().getName())\n                                .execute(emailTmp, \"\");\n                    }\n                });\n\n        // Set the message text\n        alert.setMessage(getString(R.string.request_mail_message));", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "\nurl(r'^$', PackageSettingsView.as_view(), name=\"package-settings\"),\n\nThe above code is for the home page of the package settings.\n\nThe following code is for the package details page:\n\nurl(r'^(?P<pk>\\d+", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "```python\nencoder = GPSL1L2BitEncoder(NormalRateConfig)\n```\n\nThis line of code initializes an instance of the `GPSL1L2BitEncoder` class with the `NormalRateConfig` configuration object as an argument. The `GPSL1L", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "class TestSave(unittest.TestCase):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "```python\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    p.start()\n                    procs.append(p)\n```\nThis code creates a new KaldiProcessWorker for each job and starts", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "          dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NfS')\n        dataset", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "  void set(FixTag tag, Object value) throws InvalidValueException;\n}\n\npublic interface TagValueConsumer {\n    void acceptBoolean(BooleanTag tag, boolean value);\n    void acceptChar(CharTag tag, char value);\n    void acceptDecimal(DecimalTag tag, Decimal", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "====================\n\nyield self.get_chunk(n_samples, chunk_idx)\n\n# The following code is not executed in the current context.\n# It is just a part of the `get_chunks` method.\n\n# def get_chunk(self, n_samples", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tresult.setQueryNode(anyQueryNode.getQueryNode());\n\t\t\tList<Match> matches", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator = new SchemaValidatorImpl();\n\t}\n\n", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "      registry.put((byte) (ADD_NOTIFICATION_LISTENER), new AddNotificationListenerHandler());\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n       ", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        String language = languageDetection(content, lang);\n                        String id = tweet.getId();\n                        String filename = id + \"_\" + language + \".txt\";\n                        String hash = id.substring(0, 10);\n                        File file = new File", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "=====================\n\n        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{} {}'.format(indent, descriptor.__class__.__name__, descriptor.name))\n            lines.extend(self._render_descriptor_helper(descriptor.operands[0], indent + '", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "\n    group.add_argument(\n        \"--delay\",\n        dest=\"latency_time\",\n        help=\"\"\"network latency [{}].\n        valid range: 0ms to 60 minutes.\n        \"\"\".format(hr.Time.get_text_unit(hr", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "      try:\n            contact = Contact.objects.get(phone_number=self.phone_number)\n        except Contact.DoesNotExist:\n            contact = None\n        except MultipleObjectsReturned:\n            contact = Contact.objects.get(phone_number=self.phone", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "  pipeline.apply(\"Read live projects\", new LiveProjectSource(org));\n\n    // Extract the state of each project.\n    PCollection<KV<GCPResource, GCPResourceState>> liveProjectStates = liveProjects.apply(\n        \"Extract live project state\", Par", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "      self.generator = SimilarPathGenerator()\n\n    def test_get_pattern_for_directory(self):\n        self.assertEqual(self.generator.get_pattern(\"/test/\"), \"/test/\")\n\n    def test_get_pattern_for_file(self):\n       ", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "      ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ff", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "      conditions.append(AndCondition(*[condition_for(op) for op in operations if op]))\n    if \"or\" in operations:\n        conditions.append(OrCondition(*[condition_for(op) for op in operations if op]))\n    if \"not\" in operations:\n", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "      assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 1\n        assert get_square_idx(0, 2) == 2\n        assert get_square_idx(1, 0)", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "  private final IType testType;\n\n    private final IJavaProject javaProject;\n\n    private final GeneratorModel model;\n\n    private final Group testGroup;\n\n    private final Group baseGroup;\n\n    private final Group baseClassGroup;\n\n    private final Group base", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "=====================\n\nself.next_sink.SetVarz(self, 'timeout_sink')\nself.next_sink.SetVarz(self, 'timeout_sink.endpoint', self.endpoint)\nself.next_sink.SetVarz(self,", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate static final String[] imageFileExtensions = { \"png\" };\n\n\tprivate static final String[] imageFileExtensions2 = { \"pdf\" };\n\n\tprivate static final String[] imageFileExtensions3 = { \"jpg\" };\n\n\tprivate static final String[] imageFileExtensions4 =", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "      () -> StaticFiles.of(sourcePath, docerConf.moduleSourcePath(), docerConf.moduleDependencyPath())\n            .map(Files::newJavaFile)\n            .map(suppress(File::toPath))\n            .collect(Collectors.toList()));\n", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "  return RespostaSAT()\n\n    return RespostaSAT.comunicar_certificado_icpbrasil(retorno)\n\n    return RespostaSAT.comunicar_certificado_icpbrasil(retorno)\n\n    return", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "      registerCallAction(new DummyAction(this), DummyAction.DUMMY_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "=====================\n\n    command = getattr(self, name, None)\n    if command is None:\n      error_msg = 'repo: command not found: %s' % name\n      print(error_msg)\n      git_trace2_event_log.Error(error", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "  Gson provideGson() {\n        return new Gson();\n    }\n\n    @Provides @Singleton\n    Ion provideIon(Application app) {\n        return Ion.getDefault(app);\n    }\n\n    @Provides @Singleton\n    Ch", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "      Assert.assertThat(ds, totalCount(5));\n\n        // expected:\n        // 5 selects\n        // 0 inserts\n        // 0 updates\n        // 0 other queries\n        // 5 queries in total\n    }\n\n    @Test\n   ", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "      return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inherit", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "      VerifierProperty validSchema = new ValidSchemaVerifier();\n        RemoteFilesVerifier remoteFiles = new RemoteFilesVerifier();\n        LocalFilesVerifier localFiles = new LocalFilesVerifier();\n\n        // add the verifiers to the batch\n        batchAddVerifier(validSchema);", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "          // Show an error message\n            emailView.setError(getString(R.string.error_invalid_email));\n            passwordView.setError(getString(R.string.error_invalid_password));\n            loginStatusMessageView.setText(R.string.login_status_sign", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "  DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * returns the currently logged in user (via user.load)\n     * @return a DrupalUser object, or null if there's no currently logged in user.\n     *", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "=====================\n\ndef testQuirks(self):\n    quirks = self.testquirks()\n    quirklist = []\n    for quirk in quirks:\n        if quirk[\"type\"] == \"prefix\":\n            quirklist.append(quirk", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "          (r'/problemlist', ProblemListHandler),\n            (r'/problemlist/(\\d+)', ProblemListHandler),\n            (r'/problemlist/(\\d+)/(\\d+)', ProblemListHandler),\n            (r'/proble", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "              throw new ProtTestException(\"Invalid criterion\");\n        }\n\n        return informationCriterion.getSelection();\n    }\n\n    /**\n     * Computes the information criterion for the given model and criterion.\n     *\n     * @param model The model", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "  return Pair(e1, ty1, ty2)\n\n\n@with_info(st_term)\ndef app(expr1, expr2):\n    \"\"\"Apply a function to an argument.\n    The function must be a term, and the argument\n    can be a term", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "\n    void inject(Class<?> clazz);\n\n    void inject(Context context);\n\n    void inject(EventBus eventBus);\n\n    void inject(Resources resources);\n\n    void inject(Resources resources, Context context);\n\n    void inject(Application application);\n\n    void", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "  private List<Slice> slices;\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_chart_category", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "  response = Response()\n    response.content_type = None\n    with pytest.raises(ResponseValidationError):\n        validate_response(response, None)\n\n\ndef test_response_content_type_json_validates():\n    response = Response()\n    response.", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t/**\n\t * \n\t */\n\tprivate final DocumentGraphEditor editor;\n\n\t/**\n\t * @param editor\n\t */\n\tCommandExecutor(AtomicalConsole atomicalConsole, DocumentGraphEditor editor) {\n\t\tthis.atomicalConsole = atomicalConsole;\n", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "=====================\n\n    except TextGridParseError as e:\n        self.return_dict[\"parse_error_files\"].append(e)\n\n    except Exception as e:\n        self.return_dict[\"unknown_error_files\"].append(\n            (file_name, trace", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "```python\nAccelerometerResource, \"/accelerometer\",\n```\nshould be:\n```python\nAccelerometerResource, \"/sensors/accelerometer\",\n```\napi.add\\_resource(AccelerometerResource, \"/accelerometer\",\n                ", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "      self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueKnots())\n\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n\n\nclass Vel", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "\n    '--no, --names-only Retrieve only the object keys (names) of the instances.',\n\ntests/unit/test_instance_associators.py\ndef test_instance_associators_no_names_only(mocker, test_namespace):\n    \"\"\"\n   ", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate CountryServices countryServices;\n\t\n\t/**\n\t * 后台首页\n\t * @return\n\t */\n\t@RequestMapping(\"/admin\")\n\tpublic String index(){\n\t\treturn \"admin/index\";\n\t}\n\t\n\t/**\n\t * 用", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            logError(title, t);\n                            presenter.showErrorMessage(title, t.getMessage());\n                        } else if(exceptionClass.equals(InvalidOperationException.class)){\n                            logWarning(title, t);\n                            presenter.showWarningMessage(title", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "  def test_full_e2e_flow_for_language(self):\n        self.test_full_e2e_flow_for_language(language=\"English\")\n\n    def test_full_e2e_flow_for_language(self, language):\n       ", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "protected Location lastLocation;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequesterGingerbread;\n  protected LocationUpdateRequester locationUpdateRequesterFroyo;\n  protected LocationUpdateRequester locationUpdateRequesterHoneycomb;\n", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "# connect(toolsdir)\n\ndef main(file_path):\n    print \"\\n[INFO] Starting MobSF Analysis\"\n    print \"\\n[INFO] Loading APK file: \" + file_path\n\n    # connect(toolsdir)\n    toolsdir = Dynamic", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Layer):\r\n    def __init__(self):\r\n        self.Layer = [\r\n            # 44018, section 10.1.1\n            # RRC header fields\n            # 1 octet: message type\n            # 1", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\tadj_lh = Create_adjacency_set(v_lh, faces_lh, opts.adjacency, opts.adjacency_threshold, opts.adjacency_method)\n\t\t\tadj_rh = Create_adjacency_set(", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "      result.append(\" \").append(exp.getOperator().getValue());\n    } else {\n      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "      CacheList newList = new CacheList();\n        newList.setName(listName);\n        cacheService.storeCacheList(newList);\n      }\n    }\n  }\n\n  private boolean hasValue(Optional<String> optional) {\n    return optional.isPresent", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "  'Call CP_DATA, CP_ACK, CP_ERROR, TI_dict, CPCause_dict, \\\r\n        SMSCP_dict, PD_dict, TS_dict, TI_dict, TI_dict, \\\r\n        TI_dict,", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        new TimeEntryOvertimeAggregation()));\n\n        dateFrom.setValue(new Date());\n        dateTo.setValue(new Date());\n\n        dateFrom.addValueChangeListener(e -> {\n            if (dateFrom.getValue() != null && dateTo.getValue() != null", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "=====================\n\n    (True, PubKeyAlgorithm.DSA): DSAPub,\n    (True, PubKeyAlgorithm.ElGamal): ElGPub,\n    (True, PubKeyAlgorithm.ECDH): ECDSAPub,\n    (True, PubKey", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "\n    def get_expansion_info(self):\n        expansion_info = ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                                       self._expansion_num, 0)\n        self._expansion_type = ExpansionInfo", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "=====================\n\nclass StrongRefProperty(Property):\n    def __init__(self, parent, pid, format, version):\n        super(StrongRefProperty, self).__init__(parent, pid, format, version)\n        self.set_name(\"StrongRefProperty\")\n", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "=====================\nuser = create_inactive_user(email, full_name)\n\n            # Send email to user\n            subject = _('Invitation to join Connect')\n            send_connect_invitation_email(site, user, full_name, email)\n\n            messages", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "```python\n        draft = await self.draft_interface.load_draft(ctx.guild.id, ctx.channel.name)\n```\n\nThis line of code is trying to load a draft from the database using the guild id and channel name. The `draft_interface`", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "          ex = Hitbtc('BCC_BTC')\n        elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n            ex = Hitbtc('BCC_ETH')\n        elif name == \"%s_BTC_CAD\" %", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "```python\n            if item is not None:\n                self.add_item(item)\n                yield item\n```\nThis code block is used to add the current item to the expression stack and yield it as the result. It is typically used when the expression is expected to return a", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "  helpTestIteratorNormal(10, 5);\n  }\n\n  @Test\n  public void testDataParanoid() {\n    helpTestIteratorParanoid(10, 5);\n  }\n\n  @Test\n  public void testDataBatch() {\n", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t\tindex.setExpander(textExpander);\n\t\t}\n\t\tif (elt.hasAttribute(AlvisIRConstants.XML_SEARCH_EXPANDER_CLASS)) {", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    initMiPush();\n                    //Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"Huawei\":\n                if(shouldInit()) {\n                    HMSInit();\n                    //", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "  private final KadConfiguration config;\n    private int attempts;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "=====================\n\n    output.append(tabulate(rows, headers=headers, tablefmt=tablefmt,\n                           numalign=numalign, stralign=stralign))\n\n    if show_header:\n        output.append('')\n\n    return output\n\n\ndef", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "=====================\n    return words_api(wordnik_api, token)\n\nif __name__ == '__main__':\n    create_app().run()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@Inject\n\tprivate Connector connector;\n\t@Inject\n\tprivate Connector connector;\n\t@Inject\n\tprivate Connector connector;\n\t@Inject\n\tprivate Connector connector;\n\t@Inject\n\tprivate Connector", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "  def test_create_event_invalid_handle(self):\n        with patch(\"pywintypes.HANDLE\", new_callable(int)):\n            with patch(\"pywintypes.SECURITY_ATTRIBUTES\"):\n                with patch(\"pywintypes.SECUR", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "      this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n        this", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    return parserHolder.getParser().parse(elementUtils.getElement(annotation)).stream();\n                })\n                .filter(parsedPath -> parsedPath.getAnnotatedElement().getKind() == ElementKind.METHOD)\n                .map(parsedPath -> {\n                ", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "  protected PageParser pageParser;\n\n    protected DuplicateStrategy duplicateStrategy;\n\n    protected CountDownLatch latch = new CountDownLatch(getThreadCount());\n\n    protected ExecutorService executorService;\n\n    protected CountDownLatch fetchLatch = new CountDown", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "          actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteValueAction(this));\n            actionPopupGroup", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "  private GuiButton addChannel;\n\n    public GuiSettingsChannel() {\n        super(new TextComponent(new TextComponent(new TextComponent(new TextComponent(new TextComponent(\n                new TextComponent(new TextComponent(new TextComponent(new TextComponent(new TextComponent", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "              return new BtnQuickNotice();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new BtnClearBackground();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenShot();\n", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "      createWebAppSection(form);\r\n        createWebAppTable(form);\r\n        createWebAppButtons(form);\r\n        form.setSize(500, 400);\r\n        setControl(form);\r\n    }\r\n\r\n    protected void createWebAppSection(Com", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "      type = Type()\n        type.name = \"string\"\n        type.format = TypeFormat()\n        type.format.pretty = \"string\"\n\n        self.assertEqual(\"\", type.get_sample())\n\n    def test_type_get_sample__return_default", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "              new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(Next line of code:\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "self._cluster_type = _cluster_type\n\nThis line sets the value of the instance variable '_cluster_type' to the value passed as an argument '_cluster_type'.\n\nThe '_cluster_type' variable is used to store the type of the data cluster to be added. It can be", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "=====================\n\ndef complete_flickr(request):\n    try:\n        frob = request.GET['frob']\n    except KeyError:\n        raise ValueError(\"Redirect back from Flickr did not include a frob\")\n\n    # Now we need to exchange the", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t} catch(InterruptedException e) {\n\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "    op, arg = bytecode[k][2], bytecode[k][3]\n      if op == COMPARE_OP:\n        cmp_op = opcode_name(op)\n        cmp_kind = arg\n        condition_bytecode.insert(0, bytecode", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "  List<CreditCard> creditCards = null;\n    List<CreditCard> creditCardsWithExpenses = null;\n    List<CreditCard> creditCardsWithoutExpenses = null;\n    List<CreditCard> creditCardsWithExpensesAndLimits", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "=====================\n\nclass PlatformAdminForm(forms.ModelForm):\n    api_key = forms.CharField(label=\"API Key\", max_length=255)\n\n    class Meta:\n        model = Platform\n        fields = ['api_key']\n\nclass PlatformAdmin", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\tprivate void openCustomList(CustomList customList) {\n\t\tstartActivity(CustomListActivity.start(this, customList));\n\t}\n\n\tprivate void openCustomList(CustomList customList) {\n\t\tstartActivity(CustomListActivity.start(this, customList", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "=====================\n\ndef parse(self, ping_result: Union[str, bytes, PingResult, PingStats]) -> PingStats:\n    \"\"\"\n    Parse ping result.\n\n    Args:\n        ping_result (Union[str, bytes, Ping", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "          chat = DatabaseManager.INSTANCE.getChatDAO().get(chatId);\r\n            //trying to get chat with chatId from server\r\n            try {\r\n                chat = DatabaseManager.INSTANCE.getChatDAO().get(chatId);\r\n                // Assuming that the", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic void setLevel(Level par1Level) {\n\t\tthis.level = par1Level;\n\t\tthis.level.init(this);\n\t\tthis.levelRenderer = new LevelRenderer(this.level);\n\t\tthis.levelRenderer.init();\n\t\tthis", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "account = account_for_facebook_user(fb_user, person=person)\n\ndef account_for_facebook_user(fb_user, person=None):\n    try:\n        account = Account.objects.get(service=\"facebook\", user_id=fb_user[\"id", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "      assertThat(qe, is(statement()));\n        assertThat(qe, is(batchStatement()));\n        assertThat(qe, is(isStatement()));\n        assertThat(qe, is(isBatchStatement()));\n        assertThat(qe, is(is(statement())));\n        assertThat", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "  } else if (Utils.getXmlNodeValue(doc, TAG_ERROR) != null) {\n      String errorMessage = Utils.getXmlNodeValue(doc, TAG_ERROR);\n      log(\"server response is: error \" + errorMessage, null);\n      cancelUpload", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "====================\n\nassembly_points = merge_assembly_points(assembly_points_by_sources)\n====================\n\nThe code above merges assembly points from different sources into a set of unique ones. It uses a dictionary `assembly_points_by_sources` where keys are the origins of assembly", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/ther", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "```python\nfields={ key:value for key, value in config.items()}, msg_color=discord.Color.gold(), inline=True)\n```\nThis line of code creates a dictionary comprehension of the `config` dictionary, where the keys and values are assigned to the variables", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tgd.levelsManager.downloadLevel(level.getApiUrl(), new LevelDownloader.LevelDownloadListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onLevelDownloaded(Level level) {\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "  private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /**\n     * The currently selected item.\n     */\n    protected CalendarItem selectedItem = null;\n\n    /**\n     * The currently selected item's index.\n     */\n    protected int selectedItemIndex =", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "      this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info.info();\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n   ", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "  VerifierProvider rsaLocator = new DefaultPublicKeyLocator();\n\n    VerifierProviders locators = new VerifierProviders();\n    locators.setVerifierProvider(SignatureAlgorithm.HS256, hmacLocator);\n    locators.setVerifierProvider", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "  protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "              } catch (IOException e) {\n                    logger.info(\"Expected 404, got \" + e.getMessage());\n                }\n\n                client.deleteObject(containerName, fileName);\n            }\n\n            client.deleteContainer(containerName);\n\t\t", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();\n                    newTrackHistoryEntry.title = liveInfo.getTitle();\n                    newTrackHistoryEntry.startTime = new Date(System.currentTimeMillis());\n                    newTrackHistoryEntry.endTime = new Date", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "ProjectsFragment.ProjectsFragmentListener, QueuedProjectFragment.QueuedProjectFragmentListener,\nFavoritesFragment.FavoritesFragmentListener, StashFragment.StashFragmentListener,\nProjectsFragment.ProjectsFragmentListener, ProjectsFragment.ProjectsFragmentListener,\nProjectsFragment", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (home.getImage() != null) {\n                            Intent intent = new Intent(mContext, IconActivity.class);\n                            intent.putExtra(\"position\", position);\n                            mContext.startActivity(intent);\n                        }\n                        break;\n              ", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "=====================\n\nconvert_configs = load_convert_config(ctx, app_configs)\n\nmax_workers = ctx.obj.get(Context.MAX_WORKERS, 1)\nconcurrency_limit = ctx.obj.get(Context.CONCURRENCY", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "\n    def items(self):\n        \"\"\"\n        Return a list of items in the playlist.\n\n        :return: list of :class:`Media` or :class:`Playlist` objects\n        \"\"\"\n        if self._items is None:\n            self._items = []\n           ", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "      self.assertEqual(_environment_to_string({u\"i\": u\"j\"}),\n                         u\"i=j\\0\\0\")\n\n    def test_unicode_keys(self):\n        self.assertEqual(_environment_to_string({u\"k\": u\"", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "=====================\n\ndef main():\n  \"\"\"Entry point for repo.\"\"\"\n  SetDefaultColor()\n  try:\n    argv = sys.argv[1:]\n  except IndexError:\n    argv = []\n\n  # Parse command line options.\n  try:\n    opt", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "              // 发送日志\n                TaskRunnerLog taskRunnerLog = new TaskRunnerLog();\n                taskRunnerLog.setTaskData(taskData);\n                taskRunnerLog.setTaskRunner(taskRunner);\n                taskRunnerLog.setTaskRunnerLogLevel(", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "      entry = Entry(request=Request(url=\"http://example.com\"), response=Response(status=200))\n        await r.after_headers(entry)\n        self.assertIsNone(entry.result)\n\n    @async_test()\n    async def test_", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "      //保存用户信息到SharedPreferences\n        BaseApplication.getAppContext().getSharedPreferences(\"userInfo\", Context.MODE_PRIVATE).edit().putString(\"stuXH\", stuXH).commit();\n        BaseApplication.getAppContext().getSharedPreferences(\"", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "\n    self.__device = device\n    self.__ip_version = ip_version\n    self.__logger = logger\n    self.__tc_command_output = tc_command_output\n    self.__export_path = export_path\n    self.__is_parse_filter_id = is", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "      except ActionRefused:\n            state[\"inventory\"] = []\n        else:\n            state[\"inventory\"] = [mudobj_ref(i) for i in inv]\n\n    def add_location_property(self, state: Dict[str, Any], obj:", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "public Query visit(Ord4Search n, Query query) throws ParseException {\r\n    Operator op = n.f0.image;\r\n    if (op != \"BUT\" && op != \"AND\" && op != \"OR\" && op != \"NOT\") {\r\n      throw new ParseException", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = false;\n\t}\n\n\t/**\n\t * @param surveyName\n\t * @param pipeline\n\t * @param parameters\n\t * @return the generated ENO XML file as a byte array", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "\n        try {\r\n            DataDecoder dd = (DataDecoder) Class.forName(dataDecoder).newInstance();\r\n            decoder = dd;\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error while instantiating decoder: \" + e.getMessage", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "```python\nself.listener = self.config.interface.socket(socket.AF_INET, socket.SOCK_DGRAM)\n```\nThis line of code creates a socket object for the UDP protocol on the specified interface. The socket object is assigned to the variable `self", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "      MovieCursor movieCursorById = new MovieCursor(cursorById);\n        // Make sure we get the correct movie out of the cursor\n        Movie movie = movieCursorById.getMovie();\n        assertEquals(movieRowId, movie.getId());\n\n        // Clean up\n        cursorById", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "      DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "      self.assertEqual(list(etree.iter(self.elem)), list(etree.iter(self.elem)))\n\n    def test_node_children_function_with_empty_node(self):\n        self.assertEqual(list(etree.iter(self.elem_", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.main);\r\n\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(false);\r\n\t\tmap", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    mushroom = new MushroomBlue(world, new Vector2(Mushroom.SIZE, Mushroom.SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mushroom = new M", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "=====================\n\nclass Cisco2960SwitchConfiguration(BaseSwitchConfiguration):\n    def __init__(self):\n        super(Cisco2960SwitchConfiguration, self).__init__()\n        self.auto_enabled = False\n        self.auto_enabled_password", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutput", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "=====================\n\n        if '|' in retorno:\n            return RespostaSAT.analisar_retorno_com_mensagens_de_erro(retorno)\n\n        if '|' not in retorno:\n            return RespostaS", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "=====================\n\n    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n\nThis code is part of the ESPEI (ESPResso-based thermodynamic database for Equilibrium in Industry) project,", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "=====================\n\napp = Flask(__name__)\napi = Api(app)\n\nInitialize the simulator and the aircraft\n=========================================\n\nfdm = FDM()\naircraft = Aircraft()\n\nInitialize the Flask application and the API\n===========================================\n", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "=====================\n\n    def __init__(self, corpus_path, dictionary_path, output_directory):\n        self.corpus_path = corpus_path\n        self.dictionary_path = dictionary_path\n        self.output_directory = output_directory\n        self", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "  private static final int MAX_TEXT_LINES = 10;\n\n    // UI elements\n    private TextView mTextViewDetectedText;\n    private TextView mTextViewDetectedText2;\n    private TextView mTextViewDetectedText3;\n    private Text", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tprivate Util() {\n\t\t// empty\n\t}\n\n\tpublic static Util getInstance() {\n\t\treturn", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "      MongoConfiguration mongoConfiguration = MongoConfiguration.getInstance(project);\n        return mongoConfiguration.getServerConfigurations();\n    }\n\n    private void installActions() {\n        JComponent component = this;\n        JComponent treeComponent = mongoTree;\n\n        Action add", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1(\"h1\", \"TodoMVC\")\n\t\t// Input(\"input\", \"text\", \"new-todo\", \"Enter\", \"keyup\",\n\t\t// (e) -> {\n\t\t// controller.addTodo(e.txt());\n\t", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "              new ActionBarDialog(CropActivity.this,R.layout.crop_dialog,new ActionBarDialog.OnClickListener() {\n                    @Override\n                    public void onClick(View v, int id) {\n                        switch (id) {\n                            case R.", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "  @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n        setRetainInstance(true);\n\n        mActivity = (MainActivity) getActivity();\n\n        if (saved", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "  validate_key_condition(query_on, key)\n\n\ndef test_single_hash_key_success_with_index():\n    \"\"\"Single key condition with index\"\"\"\n    query_on = ComplexModel.Meta\n    key = query_on.hash_key == \"value", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "          GCActivitySet gcActivitySet,\n            GCActivity gcActivity) {\n        dataset.add(gcActivity);\n        possiblyRefresh();\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "```python\n            '/properties':                  RestAppPropertys,\n        }\n        \n        # Register the resources\n        for endpoint, resource in self.resources.items():\n            self.api.add_resource(resource, endpoint)\n```\n\n```python\n#", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "=====================\n\nself.project_settings = ProjectSettingsDialog(settings_ini, self._directory, self._df_manager.log_directory)\n\nself.tree_view = tree_view\nself.settings_ini = settings_ini\n\nself.file_tree_model =", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "====================\n\nif __name__ == \"__main__\":\n    parser.parse_args()\n\n    # initialize the traffic control module\n    tc = TrafficControl()\n\n    # set the traffic control parameters\n    tc.set_bandwidth(\n        device=\"eth0\",\n", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "  private final static TexturedModal MODAL_BACKGROUND = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n\n    private final static int WIDTH = 254;\n    private final", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "      void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface ItemClickListener {\n        /**\n         * Triggered when a calendar item was clicked\n         *\n         * @param item\n         *", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "  self._db_type = db_type\n    return self\n\n    def set_user(self, user):\n        self._user = user\n        return self\n\n    def set_password(self, password):\n        self._pass = password\n        return self\n\n    def", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "          client.getBaseClient().getHandshakeData().setUpgrade(true);\n            client.getBaseClient().getHandshakeData().setMaxFrameSize(1024 * 1024);\n            client.getBaseClient().getHandshakeData().setAcceptableProtocol", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "  private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tGenerator[] generators = setGenerators(pipeline.getInFormat());\n\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\tbyte[] parameters = pipeline.getParameters();\n\t\t\n\t\tGenerationService generationService = new GenerationService", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "  PCollection<GCPProject> projects = pipeline.apply(\"Read projects\", new LiveProjectSource(org));\n\n    // Extract the project policies.\n    PCollection<GCPProject> projectsWithPolicies = projects.apply(ParDo.named(\"Extract project policies\")\n        .", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "=====================\n\n@pytest.fixture\ndef my_model(model):\n    \"\"\"Return a new instance of the model with some data\"\"\"\n    return MyModel(id=\"123\", range=\"456\")\n\n\ndef test_model_meta(model, my", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "              self._def_reader = MeanPoolReadDefinitions(def_num_input_words,\n                                                          emb_dim,\n                                                          vocab,\n                                                          def_gating=None,\n                                                          def_reader=None,\n                ", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "\n    public ChatManager(ChatManagerCallback delegate)\n    {\n        _delegate = delegate;\n    }\n\n    public void start()\n    {\n        Contracts.requireNotNull(_delegate, \"delegate\");\n\n        synchronized (_lockObject) {\n            _id = _delegate.", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "  private ProgressDialog progressDialog;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_video_pick);\n        Toolbar toolbar = (Toolbar) findViewById", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "  RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "```python\nif form.is_valid():\n    user = form.save(commit=False)\n    user.is_staff = True\n    user.save()\n    messages.success(request, 'Usuario creado con éxito')\n    return redirect('re", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setColor(fog.getColor().toVector3(Locale.ENGLISH));\n        descriptor.setDensity(fog.getDensity());", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic void close()\n\t{\n\t\tif (this.isOpen())\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis.handle.close();\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "  ActorDetailsComponent plusActorDetailsComponent();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t} catch (final PerfidanceException e) {\n\t\t\tview.displayError(\"Error while registering classes: \"\n\t\t\t\t\t+ e.getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Running the", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "class DashboardView(TemplateView):\n    \"\"\"\n    Dashboard View\n    \"\"\"\n    template_name = 'dashboard/dashboard.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n       ", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo.getMoreSuitableEndpoint(\n\t\t\t\t\tendpointType);\n\t\t\tif (endpoint == null) {\n\t\t\t\tthrow new APIWrapperException(\n\t\t\t\t\t\t\"No endpoint found for the given endpoint", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "      if request.method == \"GET\":\n            planilla = Planilla.objects.filter(zona=request.GET.get('zona'),\n                                              comercio=request.GET.get('comercio')).last()\n            if planilla:\n                return render(", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "# self._cstr = self.tree.to_cstr()\n\nThis line of code is missing, it should be added to finalize the constraint.\n\nThe method to_cstr() is defined in the Tree class, it converts the tree to a\nconstraint string.\n\nSo", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);\n  private ActionSupportHandler<StartRecordingAction>  startRecordingActionSupportHandler  = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "  assert_array_equal(fold([MIN_HASH_VALUE], 1), [0])\n\ndef test_hash_fn():\n    \"\"\"Hash function\"\"\"\n    # Testing hash function\n    assert hash(b'') == MIN_HASH_VALUE\n    assert hash(", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "\n        else:\n            literals, digits = parse_picture(fmt_token)\n            result = format_number(value, literals, digits, lang)\n\n            if fmt_modifier:\n                result = result.rstrip(zero_fill_char) +", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\n\t\tif model_item is None:\n\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel::flags\")\n\t\t\tprint(str(e))\n\t\t\treturn default_flags\n\n\t\tif model_item.", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "=====================\n\n        response = Hydrator(versions, object1).hydrate()\n        response = Hydrator(versions, object2).hydrate()\n        response = Hydrator(versions, object3).hydrate()\n        response = Hydrator(versions", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "       FASTInputByteArray input = new FASTInputByteArray(catBytes);\n         PipeBundle ringBuffers = new PipeBundle(clientConfig.getBytesGap(), clientConfig.getBytesGap()+clientConfig.getBytesGap(), clientConfig.getBytesGap());\n         F", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\n\n  to_map_and_back(AFO, AmplitudeBase.UNITS_AMPL", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "              hasJsonPath(\"$.hits.total.value\", equalTo(mappedRecords.size())));\n    }\n\n    @Test\n    public void store_suggest() throws Exception {\n        Collection<SourceRecord> records = SourceRecordFactory.createRecordsFromFile(\"src/", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "=====================\n\nclass ECCurve(object):\n    def __init__(self, name, q, a, b, g, n, h, seed):\n        self.name = name\n        self.q = q\n        self.a = a\n        self.b =", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tgeoWriter = new GeoWriter();\n\t}\n\n\t/**\n\t * Registers the request services\n\t */\n\tprivate void registerRequestServices() {\n\t\trequestServices", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        res = getResults(context);\n                    } catch (IOException e) {\n                        context.put(\"exit_status\", 1);\n                        context.put(\"message\", e.getMessage());\n                    }\n                    context.put(\"results\", res);\n               ", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "url(r'^users/$', users_list, name='users-list'),\nurl(r'^users/new/$', new_user, name='new_user'),\nurl(r'^users/(?P<pk>\\d+)/$', edit_user, name='edit", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                startMixedActivity();\n                        }\n                    }\n                });\n                dialog.show(getFragmentManager(), \"play_settings\");\n            }\n        }\n    }\n\n    private void startMixedActivity() {\n        Intent intent;\n        if", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "  private DropDownMenu dropDownMenu;\n    private LinearLayoutManager mLayoutManager;\n    private CookBookAdapter mAdapter;\n    private int page=0;\n    private FilterType filterType;\n    private String filterTypeName;\n    private String filterTypeUrl;\n    private", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "      obj.updateBuffImg();\n\n        # initialize block shape\n        obj.blockShape = obj.getBlockShape();\n        obj.blockShape.setParent(obj);\n\n        # initialize block shape's sockets\n        for socket in obj.getBlock().getSockets():", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "=====================\n\n        alpha = Constant(0, DP_WIDTH)\n        beta = Constant(0, DP_WIDTH)\n\n        f = BinaryOperator(BvAdd, [alpha, beta])\n        input_diff = XorDiff(d1, d2)", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformConstantMultiAlternation(MultiConstantNode node);\n\t\tpublic abstract Node transformMultiConstantMultiAlternation(MultiConstantNode node);\n\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the commands\n\t\tgetCommand(\"help\").setExecutor(new CommandHelp());\n\t\tgetCommand(\"create\").setExecutor(new CommandCreate());\n\t\tgetCommand(\"delete\").setExecutor(new CommandDelete", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "      SASLMechanism mechanism = connection.getSASLMechanism();\n        if (mechanism != null) {\n            mechanism.handleChallenge(challengeData);\n        } else {\n            LOGGER.warn(\"No SASL mechanism set, cannot", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "Pi = ChaskeyPi(32)\n\nPi = ChaskeyPi(32)\n\nPi = ChaskeyPi(32)\n\nPi = ChaskeyPi(32)\n\nPi = ChaskeyPi(32)\n\nPi = Chas", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "  private FastScroller mFastScroller;\n\n    private SongListAdapter mAdapter;\n\n    private List<Song> mSongs;\n\n    private boolean mShowToolbar;\n\n    private boolean mShowFastScroller;\n\n    private Toolbar mToolbar;\n\n", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "          effect.init(mSpectaculum.getEffect(0));\n        }\n        mSelectedEffect = effect;\n        mSelectedEffect.addListener(this);\n\n        if (mSelectedEffect instanceof ImmersiveEffect) {\n            ImmersiveEffect immersiveEffect =", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "\nclass ESMInfo(Layer):\n    constructorList = [\n        Bit('EBT', Pt=0, BitLen=4),\n        Bit('PD', Pt=2, BitLen=4),\n        Int('Length', Pt=4, Type='uint16'),", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "          triggerRefresh();\n        }\n    };\n    private AlbumEditorDialog.OnEditionSuccessListener mOnEditionSuccessListener = new AlbumEditorDialog.OnEditionSuccessListener() {\n        @Override\n        public void onEditionSuccess() {\n            triggerRefresh();\n        }\n", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "=====================\n\ndef _load_corpus(self):\n    \"\"\"\n    Loads the corpus from the given directory.\n    \"\"\"\n    self.log_info(f\"Loading corpus from {self.corpus_directory}\")\n    self.no_transcription_files", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user.getUsername(), user.getPassword(),\n\t\t\t\tuser.getCallback(), user.getPlugins(), user.getRoles());\n\t}\n\n\t@GET\n", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "\n    @GET(\"api-info\")\n    Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns the HTTP headers that should be sent with each request.\n     *\n     * @param apiKey account api key\n     */", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "  public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(message.properties());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.name", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "  assert almost_eq(erb(freq), bandwidth)\n\n  @p((\"freq\", \"Hz\"),\n     [(1000,),\n      (2000,),\n      (3000,),\n      (4000,),\n", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "=====================\n\ndef read_sequence_item(fp, encoding=None, offset=0):\n    \"\"\"Read a single dataset from a file.\n\n    This method is used by read_sequence to read each dataset in a sequence.\n    \"\"\"\n    tag = fp.read(2", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "  try {\n      final T context = proxyBuilder.build();\n      CoordinatesWalker walker = new CoordinatesWalker(document, context);\n      walker.run();\n      for (ICommentProcessor commentProcessor : commentProcessors) {\n        commentProcessor.commitChanges(document", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "  protected AbstractRavelryActivity getRavelryActivity() {\n        return this;\n    }\n\n    @Override\n    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatternsRequest(page, prefs, this);", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "=====================\n\n@flags.register(NotationDataFlags)\n@flags.register(int)\ndef flags_int(self, val):\n    self._flags += NotationDataFlags & val\n\n@sdproperty\ndef name(self):\n    return self._name\n\n", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "```python\n        self.addMessage(lm, self.chum)\n```\nThis line of code is used to add a message to the text area, with the given lexmsg and chum object. The chum object is used to determine the color and mood of the message, as", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "====================\n\ndef check_args(args, fn_type, env):\n    \"\"\"\n    Checks arguments against function type.\n    \"\"\"\n    if not fn_type:\n        return args\n\n    args = list(args)\n    arg_types = fn_type.__args", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "```python\nif isinstance(value, GregorianMonthDay):\n    return value\n\ntry:\n    if isinstance(value, (str, int, float)):\n        return GregorianMonthDay.fromstring(value)\n    elif isinstance(value, (list, tuple)):\n", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "=====================\n\nif not _param_present_in_database(dbf, phase_name, comps):\n    _log.warning(f\"{phase_name} not found in database, skipping.\")\n    return {}\n\n# Filter datasets to only include the desired phase\n", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        if (controller.getVpaidWebView() == null) {\n            ExoPlayer exoPlayer = controller", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "          PressureSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 8 || type == 0) {\r\n            ProximitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 9 || type == 0", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "  Call<Suggestions> suggest(@Query(\"query\") String query, @Query(\"limit\") int limit);\n\n    /**\n     * Returns a pack of gifs\n     *\n     * @param packId the pack id\n     * @return {@link Call}<{@link Pack", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "\n    def _compute_table_name(self, model):\n        \"\"\"\n        Computes the table name for the given model.\n        \"\"\"\n        table_name = self._get_table_name_from_meta(model)\n        if not table_name:\n            table_", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    args = parser.parse_args()\n\n    if args.plot:\n        classes = np.unique(data_set.labels)\n        cm = confusion_matrix(y_true=data_set.labels,", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t@", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "=====================\n\n    def __getattr__(self, name):\n        if name in self.registry:\n            return self.registry[name]\n        raise AttributeError(name)\n\n    def __getitem__(self, name):\n        if isinstance(name, str):\n           ", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "=====================\n\n    @scoped_subgraph\n    def decoder(self) -> FeedbackRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN is a feedback RNN, meaning that the decoder's output at time t", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\nclass PlatformAdminForm(forms.ModelForm):\n    class Meta:\n        model = Platform\n        fields = ['engine', 'name', 'api_key', '", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "  public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeRestrictionNode node)", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "      final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Benchmark\");\n        table.addHeader(\"Class\");\n        table.addHeader(\"Method\");\n        table.addHeader(\"Mean\");\n        table.addHeader(\"StdDev\");\n", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "    self.control_flow = ControlFlow(self._graph)\n      self.control_flow.traverse(self.entry_block)\n      self.control_flow.build_cfg()\n      self.control_flow.build_cfg_tree()\n      self.control_flow", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "=====================\n\n# XPath 3.0 functions\n\nXPATH_FUNCTIONS = {\n    'abs': XPathFunction('abs', 1, 1),\n    'base-uri': XPathFunction('base-uri', 1, 1),\n    'ce", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    else if (Event.isEventType(event, Event.EventType.message)) {\n                        Message message = JsonUtils.toMessage(event.content);\n                        if (message.isTypingEvent()) {\n                            mTypingUsers.add(message.sender);", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilter = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate DDIToPoguesXML ddiToPoguesXml = new DDIToPoguesXML();\n\t", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "      DocumentDialog(self, EtatFrais(self)).ShowModal()\n\n    def OnGenerationEtatsFrais(self, _):\n        site = self.GetSelectedSite()\n        date = str2date(self.etats_frais_date.GetValue())\n", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "=====================\n\ndef get_angular_velocity(self):\n    \"\"\"\n    Get the angular velocity of the robot.\n\n    Returns:\n        ndarray: A 3x1 numpy array representing the angular velocity of the robot.\n    \"\"\"\n    return self.rave.", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "      View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n            name.setText(queuedProjectResult.queuedProject.name);\n            author.setText(queuedProjectResult.queuedProject.author);\n", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "              new MigrateCommand(),\n                new RefreshCommand());\n        // Register events\n        // Register listeners\n        // Register hooks\n        // Register services\n        // Register providers\n        // Register injectors\n        // Register injectables\n        // Register components\n        // Register beans\n", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "```python\n        prior_specs = build_prior_specs(prior, symbols)\n```\nThis line of code initializes the prior specs for each symbol based on the given prior. It does this by calling the `build_prior_specs` function and passing", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "    return Const.fromValue(arg[0])\n    elif op == LOAD_NAME:\n      return Ref.fromName(arg[0])\n    elif op == LOAD_ATTR:\n      return Ref.fromName(arg[0])\n    elif op == LOAD_SUB", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Physics physics = new Physics();\n\tprivate final FringeLayer fringeLayer;\n\tprivate final SpriteBatch batch;\n\tprivate final SpriteBatch debugBatch;\n\tprivate final SpriteBatch hudBatch;\n\tprivate final SpriteBatch fringeBatch;\n", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tview = new TempSensorView", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<Author> getAuthorsWithBooks() {\n\t\treturn authorRepository.findAll().stream()\n\t\t\t\t.filter(author -> bookRepository.findByAuthor(author).isPresent())\n\t\t\t\t.map(author -> {\n\t\t\t\t", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(Class<T> rootClass) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass);\n\t\tthis.rootQuery = new SQLQuery(this, null, null);\n\t}\n\n\tpublic SQLQuery getRootQuery() {\n", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "# install_and_run(adb, app_info, download_dir)\n\n        # 自动化测试\n        # auto_app_test(adb, app_info)\n\n        # 下载日志\n        # download_logs_thread(adb", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "  List<Genotype> parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return ancestry reports.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into ancestry reports", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "              Symbol.typed(bar_type, 'bar'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_record_", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "      PreparedStatement pstmt = ds.getConnection().prepareStatement(\"SELECT * FROM users WHERE id = ?\");\n        PreparedExecutionHolder holder = new PreparedExecutionHolder(pstmt);\n        ds.setPreparedStatementHolder(holder);\n\n        PreparedTestDataSource preparedDataSource = (", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "=====================\n\t\t\tif type(selection[0]) is CalculatedObject:\n\t\t\t\tself._viewWidget.on_update_view(selection[0])\n\t\t\t\tself._geometry_dock.on_update_view(selection[0])\n\t", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return new ApiException(cause);\n            }\n        };\n        _config = config;\n        _config.", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t}\r\n\r\n\tprivate void registerRenderer(Class<?> clazz, Renderer<?> renderer) {\r\n\t\trenderer.setEngine(this);\r\n\t\trenderer.setErrorHandler(errorHandler);\r\n\t", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.hasAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_LOWER_CASE)) {\n\t\t\tlabelFactory = new LowerCaseFacet", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "\n    url(r'^new$', staff_member_required(AddPackageCIPipeline.as_view(), login_url=LOGIN_URL), name=\"add-package-ci-pipeline\"),\n\n    url(r'^new/(?P<package_slug>[\\w", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        if (bitmap != null) {\r\n                            intent.putExtra(Extras.EXTRA_IMAGE_WIDTH, bitmap.getWidth());\r\n                            intent.putExtra(Extras.EXTRA_", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "access_token = oauth.Token(access_token_data['oauth_token'], access_token_data['oauth_token_secret'])\n\nThis line of code creates a new OAuth token object using the access token and token secret obtained from the Vimeo server. This token object", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "              pointing, mag = xyRA_PP(platepar, x_mean, y_mean, test_px_sum, platepar.refraction, platepar.extinction_correction)\n\n                # Compute the vignetting loss\n                vignet", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "=====================\ngrid = gen_Grid(data, options)\n\n# Compute likelihood across of parameters defined by grid\nlikelihood = gridLikelihood(data, options, grid)\n\n# Apply prior to likelihood\nprior = apply_prior(options)\nposterior =", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "          UIDialog.show(new DiceDialog(Board.this));}\n      }\n    });\n    rollBtn.setPosition(12, 12);\n    addActor(rollBtn);\n\n    TextButton doubleBtn = new TextButton(\"Double\", ts);\n   ", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "=====================\n\n        self.assertEqual(list(etree.iterpath(root)), [\n            root,\n            root.tag,\n            root.attrib,\n            root.text,\n            root[0],\n            root[0].tag,\n            root[0].", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "      self.runner.add(self.rule, with_child=True)\n\n    @patch(\"hammertime.rules.DetectSoft404.load_kb\")\n    @patch(\"hammertime.rules.DetectSoft404.set_kb\")\n   ", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "```python\ncfe = CFeVenda(\n        chCanc='CFeVe123456789012345678901234567890123456789012", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "  List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a list of ancestries.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a list", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "          EtsiResponse resp = this.client.sendRequest(req);\n            if (resp.getStatus() != EtsiResponse.StatusType.SUCCESS) {\n                System.out.println(\"Signature request failed: \" + resp.getStatus());\n                this.client.", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Analysis:\n\t\t\treturn get_icon(\"analysis\")\n\t\telif type(obj) is Feature:\n\t\t\treturn", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "          RotationVectorSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 13", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<Player> players;\n\t\n\tpublic Team(String teamId) throws TeamNotFoundException {\n\t\ttry {\n\t\t\tTeamSummaryResponse teamSummaryResponse = QueryTeamSummary(teamId);\n\t\t\tteamSummary = teamSummaryResponse.getLeague();\n\t", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "      FeedbackUseCase feedbackUseCase = FeedbackUseCase.Companion.getInstance();\n        feedbackUseCase.sendFeedback(\n                new Function1<Unit, Unit>() {\n                    @Override\n                    public Unit invoke(Unit unit) {\n                        on", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "```python\n            table_index[table_name] = self.session.load_items(\n                self.session.query_items(\n                    table_name,\n                    keys=[key],\n                    consistent_strong=consistent,\n                    index_name=\"", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "              art = draw_art(\n                    key_size=2048,\n                    key_algo='RSA',\n                    key_fpr=fingerprint,\n                    longid=False,\n                    color=True\n                )\n               ", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "=====================\n\n    return RespostaExtrairLogs.analisar(retorno)\n\n    def ativar_sistema(self):\n        \"\"\"\n        :return:\n        \"\"\"\n        retorno = self._comunicar_com_sat(\n", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "```python\ndef test_node_document_uri_function(self):\n    xml_test = '<A xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case DURATION_", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "=====================\n\n    self.logger.info(f\"Training {self.identifier} with {self.num_iterations} iterations...\")\n    self.logger.info(f\"Training {self.identifier} with {self.batch_size} batches...\")\n", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "  private final OAuth2Requester requester;\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "  private final Jobs jobs;\n    private final Vms vms;\n    private final Tasks tasks;\n    private final Errands errands;\n    private final VmsApi vmsApi;\n    private final TasksApi tasksApi;\n    private final ErrandsApi errandsApi", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "public void requestAudiologistInfo() {\n    _chat.requestAudiologistInfo();\n}\n\npublic void requestAudiologistInfo() {\n    _chat.requestAudiologistInfo();\n}\n\npublic void requestAudiologistInfo() {\n    _chat.requestA", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "      return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "  public void onMessage(MessageEvent event) {\n        if (event.getChannel() == this.channel) {\n            this.setStatus(event.getMessage().getSender().getDisplayName());\n        }\n    }\n\n    @Subscribe\n    public void onStatusChange(", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "        DATA[looptest], 1e-6, FiniteDifferenceSchemes.SYMMETRIC_DIFFERENCE);\n        double[] d3Price = BlackFormula2.price_Sensitivity(DATA[looptest][0], DATA[looptest][1], DATA[", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "          VotingModule.class\n    };\n\n    /**\n     * Map of module names to their instances\n     */\n    private static HashMap<String, Module> modules = new HashMap<>();\n\n    /**\n     * Loads all modules\n     * @param plugin the AthenaGM plugin", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "=======================\n\npublic static DownloadQueue newDownloadQueue() {\n    return newDownloadQueue(3);\n}\n\n/**\n * Create a new download queue.\n *\n * @param threadPoolSize the number of threads in the thread pool.\n * @return {@link DownloadQueue}.\n", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "public void init(MutableConfig config) {\n    Log.info(\"Initializing packager plugin\");\n    Profiler.start(\"packager.init\");\n    // Register the packager command\n    config.registerCommand(\"packager\", PackagerCommand::new);\n    Profiler.", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "=======================\nprivate QuerySetConfig parseQuerySetConfigTag(Element element) {\n    Validate.notNull(element, \"context element cannot be null\");\n    QuerySetConfig querySetConfig = new QuerySetConfig();\n    NodeList querySetNodes = getFirstNodeList(element, Q", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "=====================\n\ndef main():\n    ms = MainScanner()\n    ms.Scanner()\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "=====================\n\n        self.robot.left_foot.task = None\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "\n@settings(max_examples=100)\n@given(integers=integers(min_value=MIN_SIZE, max_value=MAX_SIZE))\ndef test_simple_operations(integers):\n    \"\"\"Test the simple operations.\"\"\"\n    a, b", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP13Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew SOF0Segment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew DHTSegment(aJPEG", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "          if (sl != null) {\n                SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();\n                try (SqlSession session = sqlSessionFactory.openSession()) {\n                    LastschriftMapper mapper = session.getMapper(\n                            LastschriftMapper.class", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "====================\n\nclass PretrainedAligner(TopLevelMfaWorker):\n    \"\"\"Class for aligning text to phonemes using a pretrained acoustic model\"\"\"\n\n    def __init__(\n        self,\n        data_directory: str,\n        dictionary_path: str,", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "      Lore lore = LoreLoader.getLore(category, ident);\n\n        if (lore == null) {\n            sender.addChatMessage(new ChatComponentText(\"Could not find lore with category \" + category + \" and ident \" + ident));\n            return;", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "  private final UserService userService;\n    private final BudgetService budgetService;\n    private final TransactionService transactionService;\n    private final CategoryService categoryService;\n    private final AuthService authService;\n    private final PasswordEncoder passwordEncoder;\n    private final UserDAO userDA", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "public static final Util getInstance() {\n\treturn instance;\n}\n\n\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\n\n\tpublic static final Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static final CloudUtil getCloud", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "  FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    RotateInX(FlipInXaxis.class),\n    RotateInY(", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "      problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if verbose_level >= 1:\n        problem.formula_size()\n\n    if verbose_level >= 2:\n        problem.print_formula()\n\n    if verb", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "=====================\n\n    hosts = {\n        'local': [H.h1, H.h2],\n        'local-ssh': [H.h3, H.h4, H.h5],\n    }\n\n    container = HostsContainer(hosts)", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "      return (\n            command.startswith(\"tc\")\n            and command.split()[1] in [\n                TcSubcommand.FILTER.value,\n                TcSubcommand.CLASS.value,\n                TcSubcommand.QDISC.value,\n           ", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "=====================\n\n  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test for 2bit encoder with GLONASS L2 enabled\n  '''\n  enabled", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "  public List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDatabase;\n        Cursor cursor = db.rawQuery(ExpenseManagerContract.Expenses.SELECT_ALL", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "  private TextView monthTitleTextView;\n\n    private TextView monthYearTextView;\n\n    private TextView monthWeekTitleTextView;\n\n    private TextView monthWeekDayTextView;\n\n    private TextView monthWeekDayTitleTextView;\n\n    private TextView monthWeekDayTitleTextView2", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "```python\n    my_stream = white_noise()\n    assert my_stream.take(10).all() == [0, 1, -1, 0, 1, -1, 0, 1, -1, 0]\n```\nThis", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "=====================\n\ndef unify(t1, t2, backref=None):\n    \"\"\"\n    Unify `t1` and `t2` types.\n\n    :param t1: type to be unified\n    :param t2: type to unify `t", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "```python\n        self.auth = Auth(\n            login_data={\n                \"username\": \"your_username\",\n                \"password\": \"your_password\",\n            },\n            no_prompt=True,\n        )\n        self.available = False\n        self", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "=====================\n\n\t\treturn default_flags\n\nclass DocumentModel(QAbstractItemModel):\n\tdef __init__(self, data):\n\t\tsuper().__init__()\n\t\tself._data = data\n\t\tself._root = None\n\t\tself._root =", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "=====================\n\ndef main():\n  # Initialize logging\n  logging.basicConfig(level=logging.INFO)\n\n  # Create a client\n  client = ThriftClient(\n    transport=SocketTransport(\n      host='localhost',\n      port=9090),\n", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "      ProcessBuilder pb = new ProcessBuilder(\"java\", \"-jar\", \"dumplings.jar\", \"threaddump\", \"--in\", \"pipe:\");\n        pb.redirectErrorStream(ProcessBuilder.Redirect.INHERIT);\n        Process p = pb.start();\n        p.get", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "      data.setOperation(DrumOperation.CHECK);\n        return data;\n    }\n\n    private static DrumStoreEntry<String, String> createNewData(Long key, String auxiliaryData, String... val) {\n        InMemoryEntry<String, String> data = new", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "      MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"Total videos: \" + result.getFolders().size() +", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "      RoxanaProperties roxanaProperties = new RoxanaProperties();\n        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();\n        roxanaProperties = builder.withLocale(Locale.US).build();\n        return roxanaProperties;\n    }\n", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "  self._socket.write(self._ping_msg)\n\n  def _CheckPingResponse(self):\n    \"\"\"Checks for a response to the last ping message.\"\"\"\n    self._log.debug('Checking for ping response.')\n    sz = self._socket.", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "    assert almost_eq(freq2lag(freq2lag(v)), v)\n      assert almost_eq(lag2freq(lag2freq(v)), v)\n\n\nclass TestAlmostEq(object):\n  @p(bits=32, tol=1e-", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "          Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "=====================\n\nclass ConfigCog(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.db = self.bot.db\n        self.config = self.bot.config\n        self.config_cache = GlobalConfig", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "  if self.symbol == 'eq':\n        return numeric_equal(*operands)\n    elif self.symbol == 'ne':\n        return numeric_not_equal(*operands)\n    elif self.symbol == 'lt':\n        return numeric_less(*operands)", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "      welcomeString.setText(getResources().getString(R.string.welcome_message, getResources().getString(R.string.app_name)));\n        return header;\n    }\n\n    private void initializeEvents() {\n        // Implementa el evento de click del menu...\n", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "          // Open chat activity\n            try {\n                // Notify the fragment to open the chat activity\n                ((InviteToChatFragment) params[0]).startChat(newChatId);\n            } catch (ClassCastException e) {\n                Log.e(this.getClass", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "      UnifiedOrderResponse response = wxPay(request);\n        LOGGER.info(\"response: {}\", response);\n        String code_url = response.getCode_url();\n        LOGGER.info(\"code_url: {}\", code_url);\n        // 用户扫描二维", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "      MessageMapper messageMapper = mock(MessageMapper.class);\n        when(messageMapper.getParameters()).thenReturn(new ArrayList<>());\n        when(messageMapper.getParameters()).thenReturn(new ArrayList<>());\n\n        MessageMapperEnum messageMapperEnum = mock(MessageMapperEnum.class", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\t\tint d1 = in.read1();\n\t\tint tag = d1 & 0x0F;\n\t\tif (tag == CODEINT4_TAG)\n\t\t\treturn readSmallIntValue(d1);\n\t\telse\n\t\t\tthrow new IOException", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "=====================\n\nfrom troveclient import client as troveclient\n\nThis line imports the Client class from the troveclient package, which is the\nentry point to the Trove client. The Client class provides an interface to the\nTrove API and includes various managers for different resources and actions", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "\n        parser_class_list = (\n            LinuxPingParser,\n            WindowsPingParser,\n            MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "      Main.mainVideoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\r\n        }\r\n\r\n        // set video properties\r\n        if (Integer.parseInt(m.videoSetWidth.getText()) > 0 && Integer.parseInt(m.videoSetHeight.getText", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "          self._probe = probe\n        else:\n            self._probe = load_probe(kwargs.pop('probe_file', None))\n        self._kwargs = kwargs\n        self._logger = logging.getLogger(__name__)\n        self._logger.setLevel(logging.INFO)\n", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "  public final Promise<PingResponse> ping(final TransportContext context) {\n        // TODO: Implement ping functionality.\n        return Promises.newSuccess();\n    }\n\n    @Override\n    public final Promise<ChannelState> open(final TransportContext context, final String channel", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "    self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def analyze(self):\n    \"\"\"\n      Performs the following analysis:\n      1. Control flow graph (CFG)\n      2. Control dependence graph (CDG)\n      3. Cond", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "      FragmentObservable<QRData> observable = ObservableRegistry.getObservable(this.getClass());\n        observable.register(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             B", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "public void visit(final InExp inExp) throws QueryException {\n    final String columnName = inExp.getColumn().getName();\n    result.append(\" \").append(columnName).append(\" \").append(Operator.IN).append(\" (\");\n    final Object[] values = in", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile inputFile = new File(basePath + \"/input/ddi-simple.xml\");\n\t\t\tFile outputFile = new File(basePath + \"/output/ddi-simple.xml\");\n\t\t\tFile xformsFile = new File(basePath + \"/output", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "      self.assertEqual(\n            Normal(mu=0.0, sigma=1.0).draw(10),\n            np.random.normal(loc=0.0, scale=1.0, size=10),\n        )\n\n        self.assertEqual(\n           ", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "      state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpad state\n\n        state = stateFactory.createState(VpadState.class);", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(BooleanTag tag, boolean value) throws InvalidValueException {\n\t\tfinal Validity validity = isValid(tag);\n\t\tif (validity != null && validity.isRequired()) {\n\t\t\tvalidity.validate(tag, value);\n\t", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "=====================\n\n    self.assertEqual(u'\\u0906\\u092a\\u0915\\u093e \\u0936\\u092f\\u0936\\u0941', replace_blank_", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        expect(systemUnderTestMock.failWithParameter(GIVEN_STRING)).andThrow(\n                                new ExpectedException(ExpectedException.none(ExpectedException.class),\n                                        \"Expected failure with message: \" + EXPECTED_FAILURE_MESSAGE));\n                        m", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "\n# Decoder for the rest octets\nclass RestOctets(CSN1):\n    # name for the decoder\n    name = 'RestOctets'\n    # constructor\n    def __init__(self, bit_len):\n        # call the constructor of the parent class\n       ", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "```python\n        # noinspection PyProtectedMember\n        if not model._meta.is_meta:\n            model._meta.prepare()\n\n        # noinspection PyProtectedMember\n        if not model._meta._table:\n            table_name = model._meta.", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "=====================\n\n    return RespostaExtrairLogs(conteudo)\n\n    def _http_post(self, metodo, **kwargs):\n        url = self.url + '/{}'.format(metodo)\n        headers = {\n            'Content-Type", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "```python\nengine.bind(User, skip_table_creation=True)\n```\n\nThis test checks that an error is raised when trying to bind a non-model object to the engine.\n```python\ndef test_bind_non_model(engine):\n    with", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "=====================\n\nu7 = Unit(\"Msun/pc**3\")\nassert u7.dimensions == mass / length**3\nassert u7.base_value == 1.0 / m_per_pc**3\n\n\ndef test_create_from_symbol():\n", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "=====================\n\ntests/unit/test_cli.py\n\ndef test_references_command(cli, mocker):\n    \"\"\"\n    Test the references command.\n    \"\"\"\n    mocker.patch('pywbem.connection.Connection.references')\n    mocker", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "      loadModules();\n        // Register listeners\n        registerListeners();\n        // Register commands\n        registerCommands();\n        // Register the EconomyLite instance\n        economyLite();\n        // Register the EconomyLite instance to the EconomyService\n        EconomyLite.getInstance().setEconomy", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "      tag = TAG()\n        if index >= 0:\n            self._call_func(\"FSOUND_GetTag\", \"FSOUND_TAG*\", byref(tag), self._ptr, index)\n        elif name:\n            self._call_func(\"FSOUND", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    public void startEditAccountActivity(Account account) {\n                        startActivity(EditActivity.getIntent(MainActivity.this, account));\n                    }\n\n                    @Override\n                    public void startEditOrderActivity(Order order) {\n                        startActivity(EditActivity", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurList> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Query(\"page\") int page,\n\t\t\t@Query(\"sort\") String sort );\n\n\t@GET(\"/3/account/{username}/images/ids/{", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "      resource = ThermometerResource(aircraft.sensors.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertIsInstance(thermometer_data, dict)\n        self.assertIn(\"temperature\", thermometer_data)\n       ", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "```python\ndef test_ref_value_path(reference_tracker):\n    \"\"\"has path, value not dumped\"\"\"\n    column = User.age[\"foo\"]\n    value = 3\n    expected_ref = \"User.age.foo\"\n    expected_action =", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "          Platform.runLater(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    Alert alert = new Alert(Alert.AlertType.ERROR);\r\n                    alert.setTitle(\"Error: \");\r\n                    alert.setContent", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "=====================\n        if request.method == 'POST':\n            form = self.form_class(request.POST)\n            if form.is_valid():\n                comment = form.save(commit=False)\n                comment.user = request.user\n                comment.", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "  Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves the trending gifs for the current day\n     *\n     * @param serviceIds a {@link Map} of a {@link String} service", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "          disconnectFromWifi(mWifiManager);\n            of(mConnectionSuccessListener).ifPresent(DisconnectionSuccessListener::error);\n            of(mConnectionSuccessListener).ifPresent(disconnectionSuccessListener -> disconnectionSuccessListener.error(connectionErrorCode));\n            wifiLog(\"", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "          LightSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 6 || type == 0) {\r\n            GravitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 9 || type == 0) {\r", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack.getArchivedCards()) {", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "=====================\n\nclass SegmentVadArguments(BaseArguments):\n    \"\"\"\n    Arguments for the :class:`SegmentVadFunction`\n    \"\"\"\n\n    def __init__(self, acoustic_model, language_model, segmentation_threshold):\n        self.acoustic", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "  private final Deployments deployments;\n    private final Jobs jobs;\n    private final Vms vms;\n    private final Tasks tasks;\n    private final Errands errands;\n\n    public SpringDirectorClient(URI rootUri, RestTemplate restTemplate) {\n       ", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "      self._call_fmod_function(\"FMOD_Sound_GetTag\", index, byref(tag), name)\n        if name:\n            if tag.type != index:\n                raise ValueError(\n                    \"Tag type mismatch, expected %s, got %s\"", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "          self.write_message(bit_writer, bufr_message)\n\n            return bit_writer.get_bytes()\n\n        # TODO: check if the length is correct\n\n        # TODO: check if the message is correct\n\n        # TODO: check if the template is correct", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "=====================\n\nform = ReportAbuseForm(request.POST)\n\nif form.is_valid():\n\n    abuse_report = AbuseReport.objects.create(\n        logged_against=logged_against,\n        logged_by=logged_by,", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "  public void listenToResultSet(final BenchmarkResult paramBenchmarkResult) {\n        final NiceTable table = new NiceTable();\n        table.addHeader(\"Benchmark\", \"Mean\", \"StdDev\", \"Min\", \"Max\");\n\n        final Map<String,", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "      ApplicationGlobals.setMPJ(MPJ_RUN);\n\n        // initializing the ProtTest framework\n        ApplicationGlobals.setMPJ(MPJ_RUN);\n        ApplicationGlobals.setMPJRank(MPJ_ME);\n        ApplicationGlob", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t}\n}\n\n// The following code snippet is the missing part of the code.\n// It records the call and sends the call to a URL.\n// The call is recorded and the recording is sent to the URL.\n\n\t\tDo record = Do.record();\n\t\trecord", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "              Verificar se o aluno já enviou a resposta para a questão) {\n            // TODO: Implementar a verificação de se o aluno já enviou a resposta para a questão\n            // Se sim, retornar erro.\n", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tadapter = new PageAdapter(getSupportFragmentManager(),connector.getResultDoc());\n\t\t\t\tmMenu.setAdapter(adapter);\n\t\t\t}\n\t\t});\n\n", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "  AdInterface adInterface;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    PlayerActivity activity;\n\n    @Mock\n    PlayerComponent playerComponent;\n\n    @Mock\n    Player player;\n\n    @Mock\n    PlayerController", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tPlatform.runLater(new Runnable() {\n\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "  String className = rawTypeToString(type, '$');\n    String injectedClassName = rawTypeToString(type, '.');\n    String adapterClassName = rawTypeToString(type, INJECTED_SUFFIX);\n    String adapterPackageName = packageName + '.' + adapterClassName;\n", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "          new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        public static void enableReceiveNormalMsg(boolean enable) {\r\n            new EnableReceiveNormalMsgApi().enableReceiveNormalMsg(enable);\r\n        }\r\n    }\r\n\r\n", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "=====================\n  assert isinstance(args.gps_sv[0], GPSSatellite)\n  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype3():\n  '''\n ", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "\n    if suffix:\n        return f'{path}/{suffix}'\n    else:\n        return path\n\n@method(function('string-join', nargs=2, nilled=True,\n              sequence_types=('xs:string*', 'xs:string*'),", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "====================\n\ndef last_record(table, fill=False):\n\"\"\"\nReturn the last record of the table\n\n:param table: a Table object\n:param fill: True if empty values should be filled with NaN\n:return: a dictionary with the last record\n\"\"\"\nreturn last", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "              TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n            else if (message.getType() == MessageType.USER_INFO_REQUEST)\n            {\n                if (_pendingAudiologistInfo", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "=====================\n\n\t\tEXOG_A = []\n\t\tEXOG_B = []\n\n\t\tif opts.exogA:\n\t\t\tEXOG_A = []\n\t\t\tfor exogA in opts.exogA:\n\t\t\t\tEX", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "      main.getLock().acquire();\n        pause(100);\n        main.getLock().release();\n        pause(100);\n        main.getLock().acquire();\n        pause(100);\n        main.getLock().release();\n        pause", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "              DatePicker datePicker = new DatePicker(this, new DatePicker.OnDateSetListener() {\n                    @Override\n                    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {\n                        LunarCalendar lunar", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "          GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0)", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "  private SetOtherFragment setOtherFragment;\n\n    private View mContentView;\n    private TabLayout tabLayout;\n    private ViewPager viewPager;\n\n    private List<Fragment> fragments;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "```python\nself.tracerouter = Tracerouter.Tracerouter(self)\n```\n\nThis line creates a new instance of the Tracerouter class and assigns it to the variable `self.tracerouter`. The Tracerouter class is not defined in the provided code,", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "```python\nassert isinstance(deltas.deltas[4].attributes, Thread)\n```\nThis line of code should raise an AssertionError because the `deltas.deltas[4]` object is not an instance of `Thread`. The correct class for the `", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "  @property\n    def outbox(self):\n        return RestfulModelCollection(Message, self, collection_name=\"outbox\")\n\n    @property\n    def inbox(self):\n        return RestfulModelCollection(Message, self, collection_name=\"inbox\")\n\n", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "  activityLightLevelManager = new ActivityLightLevelManager(this, activityLightLevelChanger);\n\n    // Set up the UI\n    setContentView(R.layout.activity_dynamic);\n\n    // Set up the UI\n    skyView = (SkyView) findViewById(R", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "=====================\nnon_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=parameters, context=ctx)\n=====================\n\n        lnlike = np.log(1.0 + np.exp(-", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "          ID(**kwargs), # Identity, 1 to 8 bytes\n            ])\r\n        self._len_gsmrr = self._len_gsmrr + 1\r\n        if with_options:\r\n            self.extend([ \\\n                ID(**kwargs), # Identity", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "```python\n        TcClassParser(self.__con).parse(device, run_tc_show(TcCommand.TCSET, device, self.__tc_command_output))\n```\nThis line of code is used to parse the tc class configuration for a given network device. The", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "=====================\nif type(right) == Column:\n    result, index = apply_fast_eq(left.values, right.values)\n    return Column(result, index)\n\nelse:\n    return Column(np.equal(left.values, right), left.index)", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "```python\n@validation_error(SwaggerMappingError)\ndef validate_request(request, validator_map):\n```\n\nThis line of code is decorating the `validate_request` function with the `validation_error` decorator. The decorator takes an argument, which", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
