{"pred": "  private final transient KademliaRoutingTable routingTable;\n    private final transient JKademliaRoutingTable jRoutingTable;\n    private final transient MessageFactory messageFactory;\n    private final transient OperationQueue operationQueue;\n    private final transient Timer timer;\n   ", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "      mEffects.add(new NoEffect());\n        mEffects.add(new SobelEdgeDetection());\n        mEffects.add(new SobelEdgeDetectionSobel());\n        mEffects.add(new SobelEdgeDetectionPrewitt());\n        m", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class MyCipher1(Cipher):  # noqa: D101\n    key_schedule = KeySchedule1\n    encryption = MyFunction\n\n\n# 2nd cipher: linear key schedule and encryption with ctes\n\nclass MyFunction2(BvFunction):  #", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "  private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n\n    public EffectManager(Activity activity, ViewGroup parameterListView) {\n        mActivity = activity;\n        mParameterListView = parameterListView;\n    }\n\n    public void initialize() {\n        mEffects", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "              new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "  private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务监听器管理器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * 任务配置文件\n     */\n    private TaskProperties taskProperties", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tSet<Problem> problems = integrityCheck.check(args.path(), passphrase.chars(), args.checkFileIntegrity());\n\t\t\tif (problems.isEmpty()) {\n\t\t\t\tprint(\"Integrity check passed.\");\n\t\t\t\treturn;\n", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "          //save private and public Key to storage\n            rsa.saveRSAKeys(userId);\n            Log.d(this.getClass().getSimpleName(), \"Device registered with id: \" + deviceId);\n            Log.d(this.getClass().getSimpleName(), \"Device registered with", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "  U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(new U2fSignRequest(ACCOUNT_NAME, APP_ID_SIGN, SERVER_CHALLENGE_SIGN_", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "          self.acctA = RadiusAccounting(self.uaA, self.uaO, self.global_config, self.pass_headers)\n        self.state = CCStateARComplete\n        self.uaO = self.uaA\n        self.uaA = None\n", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "\nclass URI(Signature):\n    __typeid__ = 11\n\n    def __init__(self, uri):\n        self.uri = uri\n\n    @property\n    def uri_bytes(self):\n        return self.uri.encode('utf-8')\n\n   ", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "=====================\n\ndef convert_ast_constraint(ast_node):\n  \"\"\"\n    Converts an AST node to a constraint.\n  \"\"\"\n  if ast_node is None:\n    return None\n\n  if isinstance(ast_node, ast.UnaryOp):\n", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "              intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    public static void playVideoIntern(TDActivity activity, Bundle args) {\n        if (activity != null) {\n            Log.", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "      String login = AppSettings.getLogin();\n        String message = \"Location updated.\";\n        String email = AppSettings.getEmail();\n        String name = AppSettings.getName();\n        String avatarUrl = AppSettings.getAvatarUrl();\n\n        PostLocationDataBody postLocation", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "```python\nnetwork = Network('net1.xml')\n```\nThis line of code loads a network from an XML file.\n\nThe following tests the pipeline with valid arguments.\n```python\npipeline = InterLayerPipeline(network, 16, Resource(1, 1,", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "```python\nclass BaseModel:\n    def __init_subclass__(cls, **kwargs):\n        if not hasattr(cls, \"__init__\"):\n            init_called = True\n            cls.__init__ = cls.__new__\n```\n\n    user = User(id", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "```python\n@method(infix='!')\ndef select_function_call(self, context):\n    if not self:\n        return []\n\n    if self[0].symbol in ('(name)', '(QName)'):\n        name = self[0].value\n", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n    @Inject MovieInfoPresenter presenter;\n    @Inject MovieInfoAdapter movieInfoAdapter;\n    @Inject SimilarMoviesAdapter similarMoviesAdapter;\n    @Inject MovieTrailersAdapter movieTrailersAdapter;\n    @Inject Context context;\n    @Inject ShowDetailsIn", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "              writeResponse(CREATE_MBEAN, correlationId, instance.getObjectName());\n\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "=====================\n\nawait wild.set_message(wild_report)\nawait wild.insert()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "```python\ndata = SNLIData(\n    part=\"train\",\n    batch_size=c['batch_size'],\n    shuffle=True,\n    seed=c['seed'],\n    get_raw=False,\n    reader_type=\"sentences\",\n    reader", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.amplitude_m == 50.\n  assert doppler.frequency_Hz == 2. * numpy.pi / 3.", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "              Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, Constant.REQUEST_CODE_RAFFLE);\n\n            } else if (", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "=====================\n\ndef test_extend(self):\n    assert not self.redis.exists(self.redlock.key)\n    with self.assertRaises(ExtendUnlockedLock):\n        self.redlock.extend()\n    assert self.redlock.acquire", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "class Sound(FmodObject):\n    \"\"\"Container for sample data that can be played on a\n    :py:class:`Channel <pyfmodex.Channel>`.\n    \"\"\"\n\n    def __init__(self, ptr):\n        \"\"\"Constructor.\n\n        Creates Sound for an F", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "\n    @calg.register(CompressionAlgorithm)\n    def calg_int(self, val):\n        self._calg = CompressionAlgorithm(val)\n\n    @sdproperty\n    def data(self):\n        return self._data\n\n    @data.register(", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n\n        # cell intensity\n        findCellIntensityParameter = getParameter(detectCellShapeParameter, \"findCellIntensityParameter\", findCellIntensityParameter);\n        method = getParameter(findCell", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "          Assets.perfectTapSound.play();\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play();\n        } else if (accuracy == Accuracy.NICE) {\n            Assets", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "          while (transactionIterator.hasNext()) {\r\n                Transaction transaction = transactionIterator.next();\r\n                printer.print(transaction);\r\n                System.out.println(print);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\n/*\r\n * Copyright", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "              //return pgm;\n            }\n        }\n        return pgm;\n    }\n\n    /**\n     * Execute a query and return the result.\n     *\n     * @param sqlQuery\n     * @param namedParams\n     * @param reqHeaders\n    ", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    UsageEncryption.OSY,\n                    OperationMode.ENCRYPT,\n                    EncryptionAlgorithmCoded.TWOKEY3DES,\n                    AlgorithmParameterName.IV,\n                    AlgorithmParameterValue=random.randbytes(8),\n              ", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            if (env.combExpCheck[i] == 0) {\n                                env.combExpCheck[i] = i;\n                                break;\n                            }\n                        }\n                    }\n                    regex.numCombExpCheck = env.numComb", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "=====================\n\nurl(r'^api/', include(api_urls)),\n\n# Documentation\n\nurl(r'^docs/', include_docs_urls(title=\"Translations Dashboard\", public=True)),\n]\n\nurlpatterns = [\n    url", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tpublic ResourceData (Resources res) {\n\t\t\tmeter = MeterSpec.TOTAL_STATS;\n\t\t\ttags = new EnumMap<SRSLevel, String> (SRSLevel.class);\n\t\t\tcolors = new EnumMap<SRSLevel,", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "  def set_storage_type(self, storage_type):\n        if storage_type in STORAGE_TYPES:\n            self._storage_type = storage_type\n        else:\n            raise PyOrientBadRequestException(\n                'Invalid storage type: %s' %", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "  public GivenWhenThenDsl<$SystemUnderTest> when() {\n        return new GivenWhenThenDsl<>(preparation, thenStepFactory);\n    }\n}\n\npackage testasyouthink;\n\nimport java.util.Queue;\nimport java.util.function.", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "  CommandResult result;\n    try {\n      result = process.await();\n    } catch (CommandFailureException e) {\n      throw new IosDeviceException(RealDeviceImpl.this, e.getMessage());\n    } catch (CommandException e) {\n      throw new IosDevice", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\ttextColor = Themer.getColor(contextRef, R.color.text_color);\n\t}\n\tprivate void setTextSize() {\n\t\ttextSize = PreferenceManager.getDefaultSharedPreferences(contextRef).getFloat(Keys.TEXT_SIZE, 14);", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = XmlUtil.fromXml(Message.class, xml);\n\t\tif (message instanceof ReceivedTextMessage) {\n\t\t\tString text = ((ReceivedTextMessage) message).getText();\n\t\t\tString reply = talk(message.getFromUserName(), text", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "# 获取 apk 文件的 md5 值，用于文件名和目录名\napp_info = get_app_info(file_path)\napp_info['file_md5'] = genMD5(file_path)\n# 创建 '该", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "  @command(pass_context=True, name=\"raid-city\", category='Bot Info', aliases=[\"rc\"])\n    @checks.is_wild_raid_party()\n    async def cmd_raidcity(self, ctx):\n        \"\"\"\n        **!raid-", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "      self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25))\n        self.assertEqual(date_string_to_date(\"25-11-2015\"),", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "      config_actor = ConfigActor(config_file, work_dir='/tmp')\n        config_actor.start()\n\n        # startup session database\n        database_actor = DatabaseActor(clear_sessions=False, delay=0, max_sessions=0, max_cl", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            ShareUtil.shareText(mActivity, picture.getComment_key(), picture.getComment_key());\n                            break;\n                        case 1:\n                            ShareUtil.sharePicture(mActivity, picture.getComment_key(), picture.getComment_key());", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\tfor j in range(num_contrasts):\n\t\t\t\t\t\tsaveauto(\"pFWER_%s_con%d.mgh\" % (opts.tmifile[0],j+1),positive_data[j],affine=aff", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "              ResponseSyncAdapter.class,\n                SurveyActivity.class,\n                SurveyPromptLoader.class,\n                InstallDependenciesDialogFragment.class,\n                InstallSurveyDependenciesFragment.class,\n                InstallSurveyDependenciesFragment.InstallSurveyDependencies", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "=====================\n\nclass SignatureV4(Signature):\n    \"\"\"\n    5.2.4. Signature Packet\n\n    The Signature packet contains a single signature, which is a\n    representation of the data being signed, along with the key\n    used to sign it. ", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "```python\n@method(nullary('.'))\ndef select_self(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    elif isinstance(context, XPathSchemaContext):\n        for item in context.iter_self():", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "=====================\n\n    'no_members': Counter,\n    }\n\n    def __init__(self, sink_provider, properties):\n      self.sink_provider = sink_provider\n      self.properties = properties\n      self.heap = []\n      self.downed", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "      message = {'message': 'hello world', 'version': self.version}\n        nc._send_message_with_protocol(message, protocol)\n        protocol.send_string.assert_called_once_with(message['message'])\n\n    def test_send_message_", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "      StatementExecution se = (StatementExecution) qe;\n        assertEquals(\"SELECT * FROM users WHERE id = ?\", se.getQuery());\n        assertEquals(1, se.getParameters().size());\n        assertEquals(Types.INTEGER, se.getParameters().get(0).getType());\n", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "      Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionCount() {\n        ProxyTestDataSource ds = new ProxyTestDataSource", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "              continue\n\n            # Send the ADR request\n            log.info(\"Sending ADR MAC Command\")\n            self._sendMACCommand(device, self._createADRRequest())\n\n            # Update the device last_rx_time\n            yield device.update(last_rx", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "=====================\n                    function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n# IEEE 802.15.4 MAC frame format\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "      ObservableRegistry.getObservableRegistry().register(this);\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRetainInstance(true);\n\n        Bundle args = getArguments();", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "=====================\n\nclass HITANS6(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "      ref_time = self.img_handle.getReferenceTime()\n\n        # Convert to datetime\n        ref_time_dt = jd2Date(ref_time)\n\n        # Save reference time\n        json_dict['ref_time'] = ref_time_dt\n\n", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "      if (mPublicRoomsListList != null) {\n            mPublicRoomsListList.clear();\n        }\n\n        final List<String> homeServerList = MatrixStore.getHomeserversList(this);\n\n        if (homeServerList != null) {\n", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "```python\n@group(name=\"bingo\", invoke_without_command=True)\nasync def bingo(ctx):\n    await ctx.send(\"Welcome to the Bingo Game!\")\n    await ctx.send(\"Please use the following command to generate a new Bingo Card:", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "```python\n        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)\n```\nThis line initializes a ChimeraDetector instance, which is responsible for detecting and resolving chimeric adjacencies in", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "      plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    initMiPush();}\n                stopGCM();\n                stopHwPush();\n                Log.e(MYTAG, \"使用Xiaomi推送\");\n                break;\n            case \"HwPush\":\n                stopGCM();\n              ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "      registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new StringArrayResponseHandler());\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new VoidResponseHandler());\n        registry.", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "  public PersonalVulnsWindow() {\n        initComponents();\n        initListeners();\n        initTree();\n        initTreeListeners();\n        initTreeCellRenderer();\n        initTreeModel();\n        initTreeSorting();\n        initTreeSearching();\n        initTreeMerging();", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "  public Panel() {\n        initComponents();\n        initListeners();\n        initData();\n    }\n\n    private void initData() {\n        datasetGenerator = new DatasetGenerator();\n        gcTraceSet = new GCTraceSet();\n        gcTraceSet.add", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "      if (packet.getType() == PacketType.OPEN) {\n            client.setNamespace(namespacesHub.create(packet.getDataAsString()));\n            client.getNamespace().joinRoom(packet.getDataAsString(), client);\n            ackManager.initAckIndex(client", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "      videoSource = factory.createVideoSource(videoCapturer,\n            appRtcClient.videoConstraints());\n      } else {\n        videoSource = factory.createVideoSource(videoCapturer);\n      }\n      videoSource.addTrack(factory.createVideoTrack(\"videoTrack\",", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "          contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 0);\n\n            return contentValues;\n        }\n\n        protected void onCreateInner(SQLiteDatabase db) {\n            db.execSQL(\"CREATE TABLE IF NOT EXISTS \" + JobStorage.", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "  private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "=====================\n\n# create a publisher to broadcast actions to all connected clients\npublisher = Publisher()\n\n# create a snapshot timer\nsnapshot_timer = SnapshotTimer()\nsnapshot_timer.start()\n\n# create a CopyNet instance\ncopy_net = CopyNet()\ncopy", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "=====================\n\n        self.setup_docker_config.add_extra_flags(\n            self.config.container.docker_extra_flags\n        )\n\n        self.setup_docker_config.add_extra_options(\n            self.config.container.", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "  Observable<List<Board>> boards = Observable.fromIterable(Arrays.asList(SectionNames))\n        .flatMap(new Function<String, ObservableSource<List<Board>>>() {\n          @Override public ObservableSource<List<Board>> apply(@NonNull String sectionName) throws Exception", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "      Log.d(\"SearchContactFragment\", \"onStart\");\n        //ObservableRegistry.register(this);\n        //ObservableRegistry.getObservable(SearchContactFragment.class).register(this);\n        //ObservableRegistry.getObservable(SearchContactFragment.class).register(", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tICompilationUnit cu = null;\r\n\tif (writeTML) {\r\n\t\tcu = JDTUtils.createCompilationUnit(model.getJutElements().getJutProject(),\r\n\t\t\t\tmodel.getTmlTest().getName(), null, monitor);\r\n", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "      simulator_data_client = SimulatorDataClient()\n        simulator_data_listener = MockSimulatorDataListener()\n        simulator_data_client.add_simulator_data_listener(simulator_data_listener)\n\n        simulator_data_datagram =", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "          String response = new String(httpMessage.getRes().getResponse());\n            String request = new String(httpMessage.getReq().getRequest());\n            String comment = httpMessage.getComment();\n            String comment2 = httpMessage.getComment2();\n            String comment3 = http", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "\ndef test_simple_status_with_gsi(description):\n    status = simple_table_status(description)\n    assert status == expected_status\n\n\ndef test_simple_status_with_gsi_busy():\n    description = {\"TableStatus\": \"ACTIVE\",", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "=====================\n\nclass IffID3(ID3):\n    \"\"\"A IFF file with ID3v2 tags\"\"\"\n\n    def __init__(self, fileobj):\n        self._fileobj = fileobj\n        self._header = None\n        self._subchunks =", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "    visitCheckForBoolean(new VisitCheckOp(n.f0), n.f1, n.f2);\r\n      return null;\r\n    }\r\n\r\n    visitCheckForProx(new VisitCheckOp(n.f0), n.f1, n.f2,", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new EqualizeTransformation(),\n                    new SolarizeTransformation()\n                    )),\n    FILTERS(\"Filters\",\n            Arrays.asList(\n                    new ChannelMixTrans", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "```python\n            if self._header[1] == 1:\n                exception_class = PyOrientCommandException\n            elif self._header[1] == 2:\n                exception_class = PyOrientConnectionException\n            elif self._header[1] == 3:", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "=====================\n\napi = DERBMDATA(args.apikey)\n\nif get_check_data(api, args) is False:\n    return None\n\nfmt = StdoutFormatter()\n\nprint(\"BM Data for the period {} to {}\".format(args.", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum();\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\titem.copyFrom( proxy );\n\t\t\t\titems.add( item );\n", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "  user_key = dump_key(engine, user)\n\ndef test_dump_key_missing_key():\n    user = User(id=\"foo\")\n    with pytest.raises(MissingKey):\n        dump_key(engine, user)\n\ndef test_dump", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "      new TaskName()),\n        StaticString.CONDITIONAL_WHITESPACE,\n        new Spinner(Spinner.SPINNER_DASHES),\n        StaticString.CONDITIONAL_WHITESPACE,\n        new Percentage(),\n       ", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "public static Iframe iframe(Attribute... attributes) {\n\t\treturn new Iframe(attributes);\n\t}\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\tpublic static H2 h2(Attribute...", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "=====================\n\nevents.append(Event(e))\n\nreturn events\n\n# Projects\ndef create_project(self, name, organization_id=None, custom_fields=None):\n    params = {\n        \"name\": name,\n        \"organization_id\":", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "  Matcher<? super BatchParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // PreparedStatementHolderAssertions\n    ///////////////////////////////////////////////////////////////////////////", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "          if (mWallpaper != null) {\r\n                WallpaperManagerCompat.setWallpaper(this, mWallpaper);\r\n                if (mWallpaper != null && mWallpaper.getBitmap() != null) {\r\n                    mImageView.setImageBitmap(mWallpaper", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "\n  private static final Map<Operator, Occur> opToOccur = new HashMap<Operator, Occur>();\r\n\r\n  static {\r\n    opToOccur.put(Operator.AND, Occur.MUST);\r\n    opToOccur.put(Operator.OR,", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\n\t\tif len(args.genotype)==0:\n\t\t\tprint 'ERROR: You should define genotype folder for converting'\n\t\t\texit()\n\n\t\tif len(args.phenotype)==0:\n\t\t\tprint 'ERROR: You should", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "=====================\n        self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n        # Get the FPS of the video\n        self.fps = self.vid.ts\n\n        # Get the number of frames in the video\n        self.num_", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "# 3. create image\nimg = models.Image(shape=(128,128), dtype=np.float32)\n\n# 4. apply psf and ilm\nimg = runner.locate_spheres(img, objects, p, ilmvals", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tFoodGroupRegistry.sync(player);\n\t}\n\n\tpublic static void setInStone()\n\t{\n\t\tFoodGroupRegistry.setInStone();\n\t}\n\n\tpublic static void clear()\n\t{\n\t\tFoodGroupRegistry.clear", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "=====================\n\ndef view_post(request, pk, username, slug):\n    post = get_object_or_404(Post, pk=pk, user__username=username, slug=slug)\n    if post.deleted:\n        messages.error", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tISingleCellSelection selection = (ISingleCellSelection) selectionLayer.getSelectionModel().getSelection();\n\t\t\t\t\t\tif (selection != null) {\n\t\t\t\t\t\t\tISingleCellSelection newSelection = (ISingleCellSelection) selected", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "  @keyclass.register(RevocationKeyClass)\n    def keyclass_revocationkeyclass(self, val):\n        self._keyclass = val\n\n    @sdproperty\n    def keyalg(self):\n        return self._keyalg\n\n    @keyalg.register", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "```python\n        if item is None:\n            yield context.root\n        elif is_processing_instruction_node(item):\n            if self.arity == 1:\n                yield item\n            elif self.arity == 2 and self.parser.match(item, self", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "\ndef handlePuffleAdopt(client, puffles):\r\n    puffles_as2 = getAS2PuffleString(client, puffles)\r\n    client.send('s|p|1|{}|{}|{}|{}|{}|{}|{}|{}|", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "\nfig, ax = interaction.make_figure(im, size=(10,10), title='Test')\n\n# Create a state for the image\ns = states.BrownianHardSphereState(im, P, tile, dt=0.01, sigma=1", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "```python\n        with mp.Pool(processes=self.num_cpus) as pool:\n            results = pool.map(compile_information_func, jobs)\n            self.logger.debug(f\"Compiled information for {len(results)} utterances.\")\n            self", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "=====================\n\n# Recompute the rotation wrt horizon\nplatepar.rotation_from_horiz = rotationWrtHorizon(platepar)\n\n# Update the reference time and hour angle\nplatepar.JD = JDFromUT(datetime.datetime.utc", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "      contentValues.put(JobStorage.COLUMN_INTERVAL_MS, validInterval ? 30_000L : 0L);\n        contentValues.put(JobStorage.COLUMN_TAG, \"test\");\n        contentValues.put(JobStorage.COLUMN_", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "      FragmentObservable<ChatSettingsRemove> chatSettingsRemoveObservable = ObservableRegistry.getObservable(ChatSettingsRemove.class);\n        chatSettingsRemoveObservable.register(this);\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n       ", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "class ProgressFilter(django_filters.FilterSet):\n    indicator = django_filters.ModelChoiceFilter(\n        name='component__indicators', queryset=Indicator.objects.all())\n    target = django_filters.ModelChoiceFilter(\n        name='component__targets', query", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "          presenter.getProduceData().updateDatabase(list, presenter.getProduceData().getCategory());\n            GoogleAnalyticsSender.getInstance(getContext()).sendScreenView(\"/MainActivity\");\n            GoogleAnalyticsSender.getInstance(getContext()).sendEvent(\"load_data\", \"success\");", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "          @Override\n            protected void onSuccess(final Channel channel) {\n                reconnecting.setChannel(channel);\n                deferred.setSuccess(null);\n            }\n        });\n\n        return deferred.promise();\n    }\n\n    @Override\n   ", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "              new RegistrationParam(success, email, password, message));\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "  private final Router<Road> router;\n\n    /**\n     * Creates a new {@link Matcher} instance.\n     *\n     * @param map {@link RoadMap} instance for the map to be matched against\n     * @param router {@link Router} instance for the", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "  private FilterUrl filterUrl;\n    private List<FilterType> filterTypes;\n    private List<FilterType> filterTypes_double;\n    private HashMap<String, Integer> filterTypeMap;\n    private HashMap<String, Integer> filterTypeMap_double;\n\n    public Drop", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "message = args.gps_sv[0].getMessage()\n  assert isinstance(message, ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "=====================\n\n        with DisplayListGenerator() as dl:\n            self.display_list = dl\n            self.display_list.push_matrix()\n            self.display_list.translate(self.x, self.y)\n            self.display_list.rotate(self", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"A\")) {\n\t\t\t\t\ta = new AppData(data.substring(1).split(\"\\\\|\"));\n\t\t\t\t} else {\n\t\t\t\t\ta = new ShortcutData(data.substring(1).", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "              if (AppInfoAction.isShow && AppInfoAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppInfoAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "      self.beg_alt, self.beg_az = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.lat, self.lon)\n        self.end_alt, self.end_az = raDec2AltAz", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "public boolean enter(Node node) {\n    return true;\n}\n\npublic boolean visit(Node node) {\n    return true;\n}\n\npublic boolean exit(Node node) {\n    return true;\n}\n\npublic boolean visitInvisible(Node node) {\n    return", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n    public OpenAPIProcessor() {\n        parserFactories.add(new SpringParserFactory());\n    }\n\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnv) {\n        super.init(processingEnv);\n        this.typeUtils = processingEnv.getTypeUtils();", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "      bind(GerritSettings.class).toInstance(new GerritSettings());\n\n        install(new GerritUiModule());\n        install(new GerritDiffModule());\n        install(new GerritActionsModule());\n        install(new GerritRestModule());", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    File snapshot = snapshots.get(i);\r\n                    long zxid = getZxidFromSnapshotName(snapshot.getName());\r\n                    if (zxid >= zxidLong) {\r\n                        snapFile = snapshot;\r\n                        break;\r\n                    }\r", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "=====================\n\ndef _get_visible_entries(self):\n    \"\"\"Return a list of visible entries, which is a subset of the account entries.\n    \"\"\"\n    account = self.account\n    if account is None:\n        return []\n    visible_entries = self._account", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "  def __init__(self, CallName='', ReprName='', **kwargs):\n        super(segment, self).__init__(CallName=CallName, ReprName=ReprName,\n                                     Trans=False, **kwargs)\n\nThis code defines a new class called", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t}\n\t\t\t\t\treturn Api.get().searchBeers(query)\n\t\t\t\t\t\t\t.map(beers -> {\n\t\t\t\t\t\t\t\tif (beers.", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "# 2. background\nbackground = np.zeros((100, 100, 1))\nbackground[10:30, 10:30] = 1\n\n# 3. image\nimg = np.zeros((100, ", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "=====================\nif __name__ == '__main__':\n    a = Column(np.array([1, 2, 3, 4, 5], dtype=np.bool), np.arange(5))\n    b = Column(np.array([True, False", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request != null) {\r\n                        stringBuilder.append(\"\\nRequest: \")\r\n                                .append(request.getName())\r\n                                .append(\" (\")\r\n                              ", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "====================\n\nclass AbstractDateTime(datetime.datetime):\n    \"\"\"\n    An abstract class for representing a date and time.\n    \"\"\"\n\n    def __new__(cls, year: int, month: int, day: int, hour: int, minute: int, second: int, micro", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "          return SearchMenuPage()\n        if pageletId == 'Mediathek':\n            return Mediathek(self.settings)\n        if pageletId == 'Player':\n            return PlayVideo(PlayerStore(self.log), self.settings, self.settings.disableSub", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "          if not checkFileExistence(pattern.get(\"DataFile\")):\n                errmsg += \"Pattern:  %s\\n\" % pattern.getName()\n                errmsg += \"DataFile: %s\\n\" % pattern.get(\"DataFile\")\n                errmsg", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "=====================\n    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "private StarItemAdapter starItemAdapter;\nprivate List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n\n    private Content", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(ddi2fo, preprocessors, postprocessors);\n\t\t\n\t\tString survey = \"test\";\n\t\tString inputPath = basePathDDI2FO + \"/input/\";\n\t\tString outputPath = basePathD", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        new UserLoginTask(user, true, this.getClass().getName())\n                                .execute();\n                    }\n                });\n\n        alert.setNegativeButton(R.string.cancel, null);\n\n        alert.show();\n    }\n\n    public", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "\n    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n\n    url(r'^new$', NewPackageView.as_view(), name=\"package-new\"),\n    url(r'^(?P<pk>\\w+)/", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "```python\nencoder = GPSL1L2BitEncoder(NormalRateConfig)\n```\n\nThis line of code initializes an instance of the `GPSL1L2BitEncoder` class with the `NormalRateConfig` object as an argument. The `GPSL1L2", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "class TestSave(unittest.TestCase):\n    def setUp(self):\n        self.inputTg = textgrid.openTextgrid(\"test_data/test_textgrid.TextGrid\")\n        self.outputTg = textgrid.Textgrid()\n\n    def test_", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "```python\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                    old_utts = p.utts\n                    pbar.update", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "          dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NFS')\n        dataset =", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "  void set(FixTag tag, Object value) throws InvalidValueException;\n}\n\npublic interface TagValueConsumer {\n    void acceptBoolean(FixTag tag, boolean value);\n    void acceptChar(FixTag tag, char value);\n    void acceptDecimal(FixTag tag, Decimal", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "=====================\n\nyield self.get_spikes(n_samples=n_samples, chunk_idx=chunk_idx)\n\n# -------------------------------------------------------------------------\n\n    def get_spikes(self, n_samples, chunk_idx):\n        \"\"\"Get spikes", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\treturn new ExpansionResult(new AlvisIRAnyQueryNode(), Collections.emptyList());\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator = new SchemaValidatorImpl();\n\t}\n\n", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "      registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectName>(ObjectName.class));\n        registry.put((byte) (DELETE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<Object", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        String language = languageDetect(content, lang);\n                        String id = tweet.getId();\n                        String hash = tweet.getHashTag();\n                        String user = tweet.getUser().getScreenName();\n                        String dateTime = tweet.get", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "=====================\n\n        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{} {}'.format(indent, descriptor, self._render_descriptor(descriptor.operand)))\n\n        elif isinstance(descriptor, AssociatedDescriptor):\n            lines.append('{}{} {} {}", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "\n    group.add_argument(\n        \"--delay\",\n        dest=\"latency_time\",\n        help=\"\"\"network latency [milliseconds].\n        the minimum latency is 0 milliseconds.\n        e.g. tcset eth0 --delay 10ms\n       ", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "      try:\n            contact = Contact.objects.get(phone_number=self.phone_number)\n        except Contact.DoesNotExist:\n            contact = None\n        except MultipleObjectsReturned:\n            contact = Contact.objects.get(phone_number=self.phone", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "  pipeline.apply(\"Read live projects\", new LiveProjectSource(org));\n\n    // Extract the state of each project.\n    PCollection<KV<GCPResource, GCPResourceState>> liveProjectStates = liveProjects.apply(\n        \"Extract project state\", ParDo", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "      self.generator = SimilarPathGenerator()\n\n    def test_get_pattern_for_directory(self):\n        self.assertEqual(self.generator.get_pattern(\"/test/\"), \"/{}/\")\n\n    def test_get_pattern_for_filename(self):\n       ", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "      ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ff", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "      conditions.append(AndCondition(*[condition_for(op) for op in operations if op]))\n    if \"or\" in operations:\n        conditions.append(OrCondition(*[condition_for(op) for op in operations if op]))\n    if \"not\" in operations:\n", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "      assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 1\n        assert get_square_idx(0, 2) == 2\n        assert get_square_idx(1, 0)", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "  private final IType testType;\n\n    private final IJavaProject javaProject;\n\n    private final GeneratorModel model;\n\n    private final GeneratorWizardMainPage mainPage;\n\n    private final GroupMethodSelectionCtrl groupSelectionCtrl;\n\n    private final Vector<Method", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "=====================\n\nself.next_sink.SetVarz(self, 'timeouts')\nself.next_sink.SetVarz(self, 'endpoint')\nself.next_sink.SetVarz(self, sink_properties)\nself.next_sink", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate static final String[] imageFileExtensions = { \"png\" };\n\n\tprivate static final String[] imageFileExtensionsForReport = { \"png\" };\n\n\tprivate static final String[] imageFileExtensionsForPage = { \"png\" };\n\n\tprivate static final String[] imageFileExtensions", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "      () -> Stable.stream(sourcePath.stream().filter(path -> !path.endsWith(\".java\")))\n            .map(path -> layout.toAbsolutePath(path).map(Path::toFile).orElseThrow())\n            .collect(Collectors.toList()));", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "  return RespostaSAT.comunicar_certificado_icpbrasil(retorno)\n\n        # This is wrong, it should be:\n        return RespostaComunicarCertificadoICPBRASIL.analisar(retorno)\n\n   ", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "      registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "=====================\n\n    cmd = self.commands[name]\n    if not cmd:\n      print('repo: error: unknown command %s' % name)\n      return 1\n\n    if gopts.trace_python:\n      trace.start(tracefile='repo.trace", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "  Gson provideGson() {\n        return new Gson();\n    }\n\n    @Provides @Singleton\n    Ion provideIon(Application app) {\n        return Ion.getDefault(app);\n    }\n\n    @Provides @Singleton\n    Ch", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "      Assert.assertThat(ds, totalQueryCount(5));\n\n        // expected: 5\n        // actual: 5\n        //\n        // 5 selects, 1 insert, 1 update, 1 delete\n        //\n        // 5 + 1 + ", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "      return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inherit", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "      VerifierProperty validSchemaVerifier = new ValidSchemaVerifier();\n        VerifierProperty validSchemaNameVerifier = new ValidSchemaNameVerifier();\n        VerifierProperty validSchemaVersionVerifier = new ValidSchemaVersionVerifier();\n        VerifierProperty validSchemaLocationVerifier = new Valid", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "          // Show an error message\n            emailView.setError(getString(R.string.error_invalid_email));\n            passwordView.setError(getString(R.string.error_invalid_password));\n            loginStatusMessageView.setText(R.string.login_status_sign", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "  DrupalUser loginUser(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * returns the currently logged in user (via user.load)\n     *\n     * @return a DrupalUser object if there's a currently logged in user.  Otherwise", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "=====================\n\ndef testQuirks(self):\n    quirks = []\n    for i in self.topLevelItems():\n        if i.checkState(0) == Qt.Checked:\n            quirks.append(i.data(Qt.UserRole))\n", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "          (r'/problemlist', ProblemListHandler),\n            (r'/problemlist\\?oj=(.*)&problem_id=(.*)', ProblemHandler),\n            (r'/problemlist\\?oj=(.*)', ProblemHandler),\n           ", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "              throw new ProtTestInternalError(\"Unknown criterion: \" + criterion);\n        }\n\n        return informationCriterion.getSelectionChunk();\n    }\n\n    /**\n     * The main method.\n     *\n     * @param args the command line arguments\n    ", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "  return Pair(e1, e2, ty1)\n\n\n@with_info(st_term)\ndef app(expr1, expr2):\n    \"\"\"Apply a function to an argument.\n    \n    Arguments:\n    - `expr1`: a function\n", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "\n    void inject(Class<?> clazz);\n\n    void inject(Context context);\n\n    void inject(EventBus eventBus);\n\n    void inject(AudioManager audioManager);\n\n    void inject(Resources resources);\n\n    void inject(Resources.Theme theme);\n\n   ", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "  private List<SliceValue> slices;\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_chart_", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "  response = Mock()\n    response.content_type = None\n    with pytest.raises(ResponseValidationError):\n        validate_response(response, None)\n\n\ndef test_response_content_type_json_validates():\n    response = Mock()\n    response.", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t/**\n\t * \n\t */\n\tprivate final DocumentGraphEditor editor;\n\n\t/**\n\t * @param editor\n\t */\n\tCommandExecutor(AtomicalConsole atomicalConsole, DocumentGraphEditor editor) {\n\t\tthis.atomicalConsole = atomicalConsole;\n", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "=====================\n\n    except TextGridParseError as e:\n        self.return_dict[\"parse_error_files\"].append(e)\n\n    except Exception as e:\n        self.return_dict[\"error_files\"].append(e)\n        self.return_dict[\"", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "```python\nAccelerometerResource,\n```\nis missing. It should be:\n```python\nAccelerometerResource,\n```\n\"\"\"\napi.add_resource(AccelerometerResource, \"/sensors/accelerometer\",\n                 resource_class_args=(", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "      self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueKnots())\n\nclass InstrumentsTests(TestCase):\n    def test_instruments(self):\n        huginn_data_path = \"data\"\n       ", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "\n    '--association-filter ASSOCIATION-FILTER-STRING',\n    '--association-filter-query ASSOCIATION-FILTER-QUERY',\n    '--association-query ASSOCIATION-QUERY-STRING',\n    '--association-query-", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate CountryServices countryServices;\n\t\n\t/**\n\t * 后台首页\n\t * @return\n\t */\n\t@RequestMapping(\"/manage\")\n\tpublic ModelAndView manage() {\n\t\tModelAndView mv = new ModelAndView(\"manage\");\n", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            logError(title, t);\n                            presenter.showErrorMessage(title, t.getMessage());\n                        } else if(exceptionClass.equals(InvalidOperationException.class)){\n                            logError(title, t);\n                            presenter.showErrorMessage(title", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "  def test_full_e2e_hindi_signup_cancel_flow(self):\n        logging.info(\"running e2e test for Hindi signup and cancel flow...\")\n        # Create a new contact\n        processor = TextProcessor(phone_number=\"+919", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "protected Location currentLocation;\n  protected Location lastLocation;\n  protected Location lastLocationFromProvider;\n  protected Location lastLocationFromNetwork;\n  protected Location lastLocationFromPassive;\n  protected boolean isLocationUpdatesEnabled = false;\n  protected boolean isLocationUpdatesEnabledFromProvider", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "# connect(DYNAMIC_TOOLS_DIR)\n\ndef main(request):\n    if request.method == 'POST':\n        file = request.FILES['file']\n        file_md5 = hashlib.md5(file.read()).hexdigest()\n", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Layer):\r\n    constructorList = [\r\n        # 44018, section 10.1.1\n        # RRC message type\n        Int('MessageType', 8, CK_PR, CK_CR, CK_FI", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\tadjac = CreateAdjSet(v_lh, faces_lh, v_rh, faces_rh, opts.tfce[0], opts.tfce[1], opts.tfce[2], opts.tfce[3], opts.tfce[4], opts", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "      result.append(\" \").append(exp.getOperator().getValue());\n    } else {\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n    result.append(CLOSE_BRACKET);\n  }\n\n  public void", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "      CacheList newList = new CacheList();\n        newList.setName(listName);\n        cacheService.storeCacheList(newList);\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "  'Call CP_DATA, CP_ACK, CP_ERROR, TI_dict, CPCause_dict, \\\r\n        SMSCP_dict, Str7b, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        new TimeEntryOvertimeAggregation()));\n\n        dateRange.setDateFrom(new Date());\n        dateRange.setDateTo(new Date());\n\n        dateFrom.setDatePattern(\"dd.MM.yyyy\");\n        dateTo.setDatePattern(\"dd.MM", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "=====================\n\nclass PubKeyV4(PubKey):\n    __version__ = 4\n\n    @sdproperty\n    def created(self):\n        \"\"\"\n        The date and time this key was created.\n        \"\"\"\n        return self._get_field(SignatureSubpacket", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "\n    @property\n    def expansion_type(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                            self._expansion_num, ExpansionInfo.BOARDTYPE)\n\n    @property\n    def expansion_", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "=====================\n\ndef __init__(self, parent, pid, format, version):\n    super(StrongRefSetProperty, self).__init__(parent, pid, format, version)\n\n    self.references = {}\n    self.index_name = None\n    self.", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "=====================\nuser = create_inactive_user(email, full_name)\n\n# Send email to user\nsubject = _('Invitation to join Connect')\ntemplate = 'connect/email_invitation.html'\nsend_connect_email(subject, template, user, site", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "```python\n        draft = await self.draft_interface.load_draft_from_db(ctx.guild.id, ctx.channel.id)\n```\n\nThis line of code is trying to load a draft from the database using the guild id and channel id. The `", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "          ex = Hitbtc('BCCBTC')\n        elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n            ex = Hitbtc('BCCETH')\n        elif name == \"%s_BTC_CEX\" % constant.", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "```python\n            if item is not None:\n                self.add_xsd_type(item)\n                yield item\n```\nThis code block checks if the item is not None and if it is, it adds the xsd type of the item to the current context and yields", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "  helpTestIteratorNormal(10, 5);\n  }\n\n  @Test\n  public void testDataParanoid() {\n    helpTestIteratorParanoid(10, 5);\n  }\n\n  @Test\n  public void testDataCount() {\n", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tString defaultField = elt.getAttribute(AlvisIRConstants.XML", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    initMiPush();\n                }\n                //Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"Huawei\":\n                if(shouldInit()) {\n                    HMSAgent.init(this);", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "  private final KadConfiguration config;\n    private final int port;\n    private final int timeout;\n    private final int maxConnectAttempts;\n    private int attempts;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, K", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "=====================\n\n    output.append(tabulate(rows, headers=headers, tablefmt=tablefmt,\n                           numalign=numalign, stralign=stralign))\n\n    if show_header:\n        output.append('')\n\n    return output\n\n\ndef", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "=====================\n    return words_api(wordnik_api, token)\n\n\nif __name__ == '__main__':\n    create_routes(app)\n    app.run(debug=True)", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@Inject\n\tprivate ConnectorIssues connectorIssues;\n\t@Inject\n\tprivate ConnectorProjects connectorProjects;\n\t@Inject\n\tprivate ConnectorUsers connectorUsers;\n\t@Inject\n\tprivate ConnectorIssue", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "  def test_create_event_invalid_handle(self):\n        with patch(\"pywincffi.core.kernel32.SetEvent\") as mock_set_event:\n            with patch(\"pywincffi.core.kernel32.OpenEvent\") as mock_", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "      this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n    }", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    return parserHolder.getParser().parse(annotation.getAnnotation(parserHolder.getSupportedAnnotation()))\n                            .stream()\n                            .filter(parsedPath -> parsedPath.getAnnotatedElement().equals(currentAnnotatedElement.get()))\n                            .map(parsed", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "  protected PageParser pageParser;\n\n    protected DuplicateStrategy duplicateStrategy;\n\n    protected CountDownLatch latch = new CountDownLatch(getThreadCount());\n\n    protected ExecutorService executorService;\n\n    protected AtomicInteger threadCount = new AtomicInteger(", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "          actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteValueAction(this));\n            actionPopupGroup", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "  private GuiButton addChannel;\n\n    public GuiSettingsChannel(Channel channel) {\n        super(new VerticalLayout());\n        this.channel = channel;\n        initGUI();\n    }\n\n    private void initGUI() {\n        setTitle(new TextComponent(", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "              return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new BtnClearAllNotifications();", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "      createWebAppTable(form);\r\n        createWebAppButtons(form);\r\n        createWebAppSection(form);\r\n        form.setSize(500, 400);\r\n        setControl(form);\r\n        initialize();\r\n    }\r\n\r\n    protected void createWeb", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "      type = Type()\n        type.name = \"string\"\n        type.format = TypeFormat()\n        type.format.pretty = \"pretty string\"\n\n        self.assertEqual(\"pretty string\", type.get_sample())\n\n    def test_type_get_", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "              new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "self._cluster_type = _cluster_type\n\nThis line sets the value of the instance variable '_cluster_type' to the value passed as an argument '_cluster_type'.\n\nThe '_cluster_type' variable is defined earlier in the class as a string and it represents the type of the data", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "=====================\n\ndef complete_flickr(request):\n    try:\n        frob = request.GET['frob']\n    except KeyError:\n        raise ValueError(\"Redirect back from Flickr did not include a frob\")\n\n    try:\n        method, token", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPPutFailedException e) {\n\t\t\t\t\tif(e.getErrorCode() == FCPPutFailedException.FATAL_ERROR) {\n\t\t\t\t\t\tLogger.error(this, \"Fatal error while inserting message:", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "    op, arg = bytecode[k][2], bytecode[k][3]\n      if op in JUMP_OPS:\n        # We have reached the end of the condition\n        # We can now build the condition\n        condition = self.__build_condition(condition_byte", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "  List<DailyExpense> dailyExpenses = new ArrayList<>();\n    List<DailyExpense> dailyExpensesByCategory = new ArrayList<>();\n    List<DailyExpense> dailyExpensesByCategorySorted = new ArrayList<>();\n    List<CreditCard> creditCards", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "=====================\n\nclass PlatformAdminForm(forms.ModelForm):\n    api_key = forms.CharField(label=\"API Key\", max_length=255)\n\n    class Meta:\n        model = Platform\n        fields = ('api_key',)\n\nclass Platform", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\tprivate void openCustomList(CustomList customList) {\n\t\tif (customList != null)\n\t\t\tstartActivity(CustomListActivity.start(this, customList));\n\t}\n\n\tprivate void openBarcodeScan() {\n\t\tIntent intent = new Intent(", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "=====================\n\ndef parse(self, ping_result: Union[str, bytes, PingResult]) -> PingStats:\n    \"\"\"\n    Parse ping result.\n\n    Args:\n        ping_result (Union[str, bytes, PingResult]):\n", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "          chat = DatabaseManager.INSTANCE.getChatDAO().get(chatId);\r\n            if (chat == null) {\r\n                throw new IllegalArgumentException(\"chat is null\");\r\n            }\r\n        }\r\n\r\n        // Registering the fragment as a notifier for new messages\r\n       ", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tgame = new Cubeshaft();\n\t\t\tgame.setDisplayMode(new DisplayMode(800, 600));\n\t\t\tgame.setTitle(\"Cubesha", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "account = account_for_vimeo(request, fb_user[\"id\"])\n\ndef account_for_vimeo(request, user_id):\n    try:\n        account = Account.objects.get(service='vimeo', ident=user_id)\n   ", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "      assertThat(qe, is(statement()));\n        assertThat(qe, is(batchStatement()));\n        assertThat(qe, is(isStatement()));\n        assertThat(qe, is(isBatchStatement()));\n        assertThat(qe, is(is(statement())));\n        assertThat", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "  } else if (Utils.getXmlNodeValue(doc, TAG_ERROR) != null) {\n      String errorMessage = Utils.getXmlNodeValue(doc, TAG_ERROR);\n      log(\"server response is: error \" + errorMessage, null);\n      cancelUpload", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "====================\n\nassembly_points_by_sources = {k: v for k, v in assembly_points_by_sources.items() if len(v) > 0}\n====================\n\nThis line of code filters out empty lists from the dictionary assembly_points_by_sources.", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/ther", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "```python\nfields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n```\nThis code creates a dictionary where the keys are the capitalized version of the keys from the `", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tgd.levelsManager.downloadLevel(level, this);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ActionMenuElement.LOAD:\n\t\t\t\t\tmenu.loadLevel(level);\n\t\t\t\t\tbreak;\n\n\t\t", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "  private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /**\n     * The currently selected day.\n     */\n    protected CalDate selectedDay = null;\n\n    /**\n     * The currently selected day in the client side.\n     */\n    protected CalDate clientSelectedDay", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "      this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n    }\n", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "  VerifierProvider rsaLocator = new DefaultPublicKeyLocator(new IdentityServerDescriptorProvider());\n\n    VerifierProviders verifierProviders = new VerifierProviders();\n    verifierProviders.setVerifierProvider(SignatureAlgorithm.HS256, hmacLocator", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "  protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "              } catch (FilesNotFoundException e) {\n                    // expected\n                }\n\n                client.deleteObject(containerName, fileName);\n            }\n\n            client.deleteContainer(containerName);\n\t\t} catch (Exception e) {\n\t\t\te.", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();\n                    newTrackHistoryEntry.title = liveInfo.getTitle();\n                    newTrackHistoryEntry.startTime = new Date(System.currentTimeMillis());\n                    newTrackHistoryEntry.endTime = new Date", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "ProjectsFragment.ProjectsFragmentListener, QueuedProjectFragment.QueuedProjectFragmentListener,\nFavoritesFragment.FavoritesFragmentListener, StashFragment.StashFragmentListener,\nProjectsFragmentListener, IRavelryActivity, ProjectsFragment.ProjectsFragmentListener,\nQueued", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (home.getImage() != null) {\n                            Intent intent = new Intent(mContext, IconActivity.class);\r\n                            intent.putExtra(\"icon\", home.getImage());\r\n                            mContext.startActivity(intent);\r\n                        }\n                        break", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "=====================\n\ndef load_convert_config(ctx, convert_config):\n    \"\"\"\n    Loads the convert config from the context.\n    \"\"\"\n    if typepy.is_empty_sequence(convert_config):\n        return []\n\n    if isinstance(convert_config", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "\n    def items(self):\n        \"\"\" Returns a list of items in the playlist. \"\"\"\n        if self._items is None:\n            self._items = self.fetchItems('/items')\n        return self._items\n\n    def add(self, item):\n        \"\"\" Adds", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "      self.assertEqual(\n            _environment_to_string({u\"i\": u\"j\"}),\n            u\"i={i!r}\\0\\0\".format(i=u\"i\"))\n\n    def test_type_check_for_environment_value(self):\n", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "=====================\n\ndef main():\n  \"\"\"Entry point for repo command.\"\"\"\n  SetDefaultColoring()\n  try:\n    repodir = os.getcwd()\n  except OSError:\n    print(\"repo: error: cannot determine current directory\", file=sys", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "              // 执行任务前置监听器\n                for (RunnerTaskListener listener : runnerListenerList) {\n                    listener.onPreExecute(taskData);\n                }\n                // 执行任务后置监听器\n                for (Runner", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "      entry = Entry.create(\"http://example.com\")\n        await r.after_headers(entry)\n        self.assertIsNone(entry.result.exception)\n\n    @async_test()\n    async def test_reject_status_code(self):\n        r =", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "      //保存用户信息\n        BaseInfoDao baseInfoDao = new BaseInfoDao(mContext);\n        baseInfoDao.saveBaseInfo(stuXH, stuName);\n        //保存用户的登录信息\n        BaseInfoDao baseInfoDao", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "\n    self.__device = device\n    self.__ip_version = ip_version\n    self.__logger = logger\n    self.__tc_command_output = tc_command_output\n    self.__export_path = export_path\n    self.__is_parse_filter_id = is", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "      except ActionRefused:\n            pass\n        else:\n            state[\"inventory\"] = [mudobj_ref(i) for i in inv]\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "public Query visit(Ord4Search n, Query query) {\r\n    Operator op = orderOfOps.get(3);\r\n    Query query1 = n.f0.accept(this, query);\r\n    Query query2 = null;\r\n    if (n.f1.present())", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = false;\n\t}\n\n\t/**\n\t * @param surveyName : the name of the survey to generate\n\t * @param pipeline : the pipeline to generate the survey\n\t * @param parameters", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "\n        try {\r\n\r\n            PropertiesReader propertiesReader = new PropertiesReader(new File(propertiesFile));\r\n            DataDirHelper dataDirHelper = new DataDirHelper(new File(dataDir));\r\n            DataState dataState = null;\r\n            SnapshotFileReader snapshotFileReader = null;\r", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "```python\nself.link = Alice(config)\n```\n\nThis line of code creates an instance of the Alice class, passing the config object as an argument. The Alice class initializes the various components of the Switzerland client, including the link to the Switzerland server, the packet sniffer, and", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "      MovieCursor movieCursorById = new MovieCursor(cursorById);\n        assertEquals(movieRowId, movieCursorById.getMovie().getId());\n        movieCursorById.close();\n\n        // Test query with selection\n        MovieSelection selection = new MovieSelection();\n        selection.title", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "      DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "      self.assertEqual(list(etree_iter_nodes(self.elem)), [])\n\n    def test_node_children_function_with_document(self):\n        self.assertEqual(list(etree_iter_nodes(document)), [])\n\n    def test_node", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.main);\r\n\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(false);\r\n\t\tmap", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mush", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "=====================\n\nclass Cisco2960SwitchConfiguration(Port):\n    def __init__(self, name):\n        super(Cisco2960SwitchConfiguration, self).__init__(name)\n        self.auto_enabled = True\n        self.vlans = []", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutput", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "=====================\n\n        if '|' in retorno:\n            # TODO: implementar a leitura de retornos com mais de uma opção\n            raise NotImplementedError()\n\n        if 'CANCELADA' in retorno:\n            return Resposta", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "=====================\n\n    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n\n    # TODO: handle multiple phases\n    if len(desired_data) > 0:\n        sample_condition_dict", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "=====================\n\ndef _add_aircraft_resources(api, aircraft):\n    api.add_resource(AircraftResource, \"/aircraft\",\n                     resource_class_args=(aircraft,))\n\n    api.add_resource(AirspeedIndicatorResource, \"/aircraft", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "=====================\n\n    def __init__(self, corpus_path: str, dictionary_path: str, output_directory: str):\n        \"\"\"\n        Initialize the corpus object\n\n        Parameters\n        ----------\n        corpus_path : str\n            Path to the corpus directory", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "  private static final int[] mExpensesCategoryIds = {\n            R.integer.category_food,\n            R.integer.category_transportation,\n            R.integer.category_entertainment,\n            R.integer.category_shopping,\n            R.integer.category", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tprivate Util() {\n\t\t// empty\n\t}\n\n\tpublic static Util getInstance() {\n\t\treturn", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "      MongoConfiguration mongoConfiguration = MongoConfiguration.getInstance(project);\n        return mongoConfiguration.getServerConfigurations();\n    }\n\n    private void installActions() {\n        JComponent treeComponent = mongoTree.getTree();\n        treeComponent.setComponentPopupMenu(", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1(\"h1\", \"TodoMVC\")\n\t\t// Input()\n\t\t// is replaced by:\n\t\tH1(\"h1\", \"TodoMVC\").input(Input().classs(\"new-todo\"));\n\t\tFluent header = container", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "              new CropImageTask().execute(output);\n            }\n        });\n\n        /**\n         * Set onClickListeners for buttons.\n         */\n        captureButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "  @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n        setRetainInstance(true);\n        mActivity = (MainActivity) getActivity();\n        mAdapter = new Song", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "  validate_key_condition(query_on, key)\n\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_single_hash_key_failure(model, index):\n    \"\"\"Single key condition: equality comparison on non", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "          GCActivitySet gcActivitySet,\n            GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivity);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String gcActivity", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "```python\n            '/properties':                  RestAppPropertys,\n        }\n        for endpoint, resource in self.resources.items():\n            self.api.add_resource(resource, endpoint)\n```\n        # Start the API\n        self.api.run(port", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "=====================\n\nself.project_settings = ProjectSettingsDialog(settings_ini, self._directory, self._df_manager.log_directory)\nself.project_settings.show()\n\nself.tree_view = tree_view\nif self.tree_view:\n    self", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "====================\n\nif __name__ == \"__main__\":\n    parser.parse_args()\n\n    # check the device name\n    if parser.device:\n        if not (isinstance(parser.device, str) and parser.device):\n            raise ValueError(\"device name is required", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "  private final static TexturedModal MODAL_BACKGROUND = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n\n    private final static Color BORDER_COLOR = Color.of(0x33", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "      void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface WeekClickListener {\n        /**\n         * Triggered when a week was clicked\n         *\n         * @param week\n         *           ", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "  self._db_type = db_type\n    return self\n\n    def set_user(self, user):\n        self._user = user\n        return self\n\n    def set_password(self, password):\n        self._pass = password\n        return self\n\n    def", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "          client.getBaseClient().getHandshakeData().upgrade(transport);\n            break;\n        }\n\n        case CONNECT: {\n            client.getBaseClient().getHandshakeData().setAccepted(true);\n            client.getBaseClient().getHandshakeData", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "  private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tGenerator[] generators = setGenerators(pipeline.getInFormat());\n\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\t\n\t\tGenerationService generationService = new GenerationService(preprocessors, generators, postprocessors);", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "  PCollection<GCPProject> projects = pipeline.apply(\"Read projects\",\n        new LiveProjectSource(org));\n\n    // Extract the policies from the projects.\n    PCollection<KV<GCPProject, GCPResourceState>> projectPolicies =\n        projects.apply", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "=====================\n\ndef test_create_table(session):\n    table = session.create_table(MyModel)\n    assert table.exists()\n    assert table.read_capacity_units == 5\n    assert table.write_capacity_units == 5\n\ndef test", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "              self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_dim,\n                                                          dim, vocab, lookup,\n                                                          cache=self._cache)\n            else:\n                raise ValueError(\"Unknown def_reader:", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "\n    public ChatManager(ChatManagerCallback delegate)\n    {\n        _delegate = delegate;\n    }\n\n    public void start()\n    {\n        Contract.checkNotNull(_delegate);\n\n        synchronized (_lockObject) {\n            _id = _delegate.getID();\n", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "  private ProgressDialog progressDialog;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_video_pick);\n        Toolbar toolbar = (Toolbar) findViewById", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "  RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "```python\nif form.is_valid():\n    user = form.save(commit=False)\n    user.is_active = True\n    user.save()\n    messages.success(request, 'Usuario creado con éxito')\n    return redirect('re", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setColor(fog.getColor().toVector3(new Vector3()));\n        descriptor.setDensity(fog.getDensity());\n       ", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic void close()\n\t{\n\t\tif(this.readOnly) new ErrorJSON(\"This file is read-only\");\n\t\ttry\n\t\t{\n\t\t\tthis.handle.close();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "  ActorDetailsComponent plusActorDetailsComponent();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t} catch (final PerfidixMeterException e) {\n\t\t\tthrow new SocketViewException(e);\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark\n\t *\n\t * @return the result of the benchmark\n\t *", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "class DashboardView(TemplateView):\n    \"\"\"\n    Dashboard View\n    \"\"\"\n    template_name = 'dashboard/dashboard.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n       ", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo.getMoreSuitableEndpoint(\n\t\t\t\t\tendpointType, format);\n\t\t\treturn activateLoginIfRequested(createWrapper(endpoint,\n\t\t\t\t\tnetworkManager, dataParser, apiKey));\n\t\t}", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "      if request.method == \"GET\":\n            planilla_de_relevamiento_id = request.GET.get(\"planilla_de_relevamiento_id\")\n            if planilla_de_relevamiento_id:\n                try:\n                    planilla_", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "# self._cstr = TreeNode(kind=Expr.OPERATOR, data=OP_COMPARE)\n\nThis line should be replaced by:\n\nself._cstr = TreeNode(kind=Expr.OPERATOR, data=OP_COMPARE, children=[self._build_expr(", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);\n  private ActionSupportHandler<CallAction>           callActionSupportHandler           = new ActionSupportHandler<CallAction>(CallAction.class);\n  private ActionSupport", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "  assert_array_equal(fold([MIN_HASH_VALUE], 1), [0])\n\ndef test_folding_size():\n    \"\"\"FP Folding with given size\"\"\"\n    # Upper bound\n    assert_array_equal(fold([MAX_HASH_VALUE]", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "\n@method(function='format-number',\n        label='Format a number',\n        sequence=['$arg1', '$arg2'],\n        return_type='xs:string',\n        description='Formats a number according to the given format string.',\n        example='format-number(", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\n\t\tif model_item is None:\n\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel::flags\")\n\t\t\tprint(str(e))\n\t\t\treturn default_flags\n\n\t\tif model_item.", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "=====================\n\nroot_dto = RootDto()\n\nHydrator(root_dto, root, versions).hydrate()\n\nself.assertEqual(1, len(root_dto.categories))\nself.assertEqual(\"Root\", root_dto.categories[0", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "       FASTDecoder decoder = new FASTDecoder(catBytes, clientConfig);\n         decoder.decode(new FASTInputByteArray(dataSource), new FASTOutputByteArray(new ByteArrayOutputStream()));\n\n         //TODO: C,  for multi test we really need to", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\n\n  to_map_and_back(AFO, AmplitudeBase.UNITS_AMPL", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "              hasJsonPath(\"$.hits.total.value\", equalTo(records.size())));\n    }\n\n    @Test\n    public void suggest() throws Exception {\n        String query = \"http://localhost:9200/\" + mapping.getIndex() + \"/\" +", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "=====================\n\nclass PubKeyV4(VersionedPacket, Primary):\n    __pubalg = None\n\n    def __init__(self, data=None, version=None, created=None, expires=None, user_id=None, subpackets=None, **kwargs", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\t\tgeoJSONWriter = new GeoJSONWriter();\n\t}\n\n\t/**\n\t * Registers the request services\n\t */\n\tprivate void registerRequestServices() {\n\t\trequest", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        res = getResults(context.get(ContextKeys.SEARCH_FILTER), context.get(ContextKeys.SEARCH_CONTEXT));\n                    } catch (IOException | SQLException e) {\n                        context.put(ContextKeys.EXIT_STATUS, ContextKeys.EXIT_FAILURE", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "url(r'^users/$', users_list, name='users-list'),\nurl(r'^users/new/$', new_user, name='new_user'),\nurl(r'^users/(?P<pk>\\d+)/edit/$', edit_user, name='", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            startMixedActivity();\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"play_session_settings\");\n            }\n        }\n    }\n\n    private void startMixedActivity() {\n        Intent intent = new", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "  private DropDownMenu dropDownMenu;\n    private DropMenuAdapter dropMenuAdapter;\n    private List<FilterType> filterTypes;\n    private FilterType filterType;\n    private String url;\n    private String title;\n    private String type;\n    private int page=0;", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "      obj.updateBuffImg();\n\n        # initialize block shape\n        obj.blockShape = BlockShape(obj);\n\n        # initialize block shape's dimensions\n        obj.blockShape.setupProperties();\n\n        # initialize block shape's dimensions\n        obj.blockShape.setup", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "=====================\n\n        alpha = XorDiff(d1, d2)\n        beta = XorDiff(d2, d3)\n        f = XDA(alpha, beta)\n\n        result = self._find_preimage(f, beta)\n        assert result is", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformConstantMultiAlternation(MultiConstantNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformConstantRepetition(Repet", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the commands\n\t\tgetCommand(\"help\").setExecutor(new CommandHelp());\n\t\tgetCommand(\"create\").setExecutor(new CommandCreate());\n\t\tgetCommand(\"delete\").setExecutor(new CommandDelete", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "      SASLMechanism mechanism = connection.getSASLMechanism();\n        if (mechanism != null) {\n            mechanism.handleChallenge(challengeData);\n        }\n    }\n\n    private void parseSuccess(Element doc) throws IOException {", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "Pi = ChasalPi(32)\nPi = ChasalPi(32, 1)\nPi = ChasalPi(32, 2)\nPi = ChasalPi(32, 3)\nPi = ChasalPi(32, ", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "  private FastScroller mFastScroller;\n\n    private SongListAdapter mAdapter;\n\n    private List<Song> mSongs;\n\n    private int mSortOrder;\n\n    private boolean mShowArtist;\n\n    private boolean mShowAlbum;\n\n", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "          FlowAbsEffect flowAbsEffect = (FlowAbsEffect) effect;\n            if (flowAbsEffect.isInitialized()) {\n                try {\n                    flowAbsEffect.init(flowAbsEffect.getSubEffects().get(0));\n                } catch (EffectException e) {", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "\nclass ESMHeader(Layer):\n    constructorList = [\n        Bit('EBT', Pt=0, BitLen=4),\n        Bit('PD', Pt=2, BitLen=4),\n        ]\n\nclass ESMHeader(Layer):\n    constructorList =", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "          mSong.setTitle(mSong.getTitle());\n            mSong.setArtist(mSong.getArtist());\n            mSong.setAlbum(mSong.getAlbum());\n            mSong.setGenre(mSong", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    begin_time = time.time()\n    corpus = Corpus()\n    corpus.parse_corpus()\n    corpus.write_corpus()\n    corpus.write_corpus_info()", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user.getUsername(), user.getPassword(),\n\t\t\t\tuser.getContactEmail(), user.getCallbackServiceUri(),\n\t\t\t\tuser.getRoles());\n\t", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "\n    @GET(\"api-info\")\n    Observable<ApiStatus> apiInfo(@Query(Constants.KEY) String apiKey);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "  public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(message.properties());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.name", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "  assert almost_eq(erb(freq), bandwidth)\n\n  @p((\"freq\", \"Hz\"),\n     [(1000,),\n      (2000,),\n      (3000,),\n      (4000,),\n", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "=====================\n\ndef read_sequence(fp, is_implicit_VR=False, is_little_endian=False, encoding=None, offset=0):\n    \"\"\"Read and return a sequence (list of datasets) from the file.\n\n    :param fp: A", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "  try {\n      // create a list of all comment processors that can process the document\n      List<ICommentProcessor> processors = this.commentProcessorsForDocument(document);\n\n      // run all comment processors on the document\n      for (ICommentProcessor processor : processors)", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "  protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatternsRequest(page, prefs, application, this);\n    }\n\n    @Override\n    protected void loadData(int page) {\n        getSpiceManager().", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "=====================\n\nclass NotationData(Signature):\n    __typeid__ = 0x14\n\n    @sdproperty\n    def flags(self):\n        return self._flags\n\n    @flags.register(list)\n    def flags_list(self, val):", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "```python\n        self.addMessage(lm, self.chum)\n```\nThis line of code is used to add a message to the text area, but it takes two arguments: the lexed message and the chum object. The first argument is passed as `lm`, and the", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "=====================\n\ndef check_args(args, fn_type, env):\n    if not fn_type:\n        return args\n\n    args = list(map(check, args, repeat(fn_type)))\n    if not fn_type.result_type:\n        return", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "```python\nif isinstance(value, GregorianMonthDay):\n    return value\n\ntry:\n    if isinstance(value, UntypedAtomic):\n        return GregorianMonthDay.fromstring(value.value)\n    elif isinstance(value, (Date, DateTime", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "=====================\n\n    if not _param_present_in_database(dbf, phase_name, configuration, \"formation_energy\"):\n        _log.info(f\"{phase_name} not present in database, fitting parameters...\")\n\n        # Filter datasets to only include the", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        if (controller == null || componentController == null || adMedia == null) {\n            return;\n        }", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "          PressureSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 8 || type == 0) {\r\n            ProximitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 9 || type == 0", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "  @FormUrlEncoded\n    Call<Suggestions> suggest(@FieldMap Map<String, String> params);\n\n    /**\n     * Anonymous login\n     *\n     * @param serviceIds a {@link Map} of {@link String} keys and {@link String} values\n", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "\n    def stream(self, model, position=None):\n        \"\"\"Create a Stream iterator for the given model.\n\n        :param model: The model to stream records from.\n        :param position: The position to start streaming from.  Defaults to the latest record.\n        :return", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    main()\n```python\nif __name__ == \"__main__\":\n    main()\n```\nThis line of code is used to run the script as a standalone program. It checks the value of the special variable", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t/**", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "=====================\n\n    def __getattr__(self, name):\n        if name in self.registry:\n            return self.registry[name]\n        elif name in self.registry_classes:\n            return self.registry_classes[name]\n        elif name in self.registry_", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "=====================\n\n    @scoped_subgraph\n    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN is a feed-previous RNN, meaning that it receives the previous decoder output", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\nclass PlatformAdminForm(forms.ModelForm):\n    class Meta:\n        model = Platform\n        fields = ['engine', 'subject', 'api_key', '", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "  public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeRestriction node) {", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "      final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Method\");\n        table.addHeader(\"Class\");\n        table.addHeader(\"Mean\");\n        table.addHeader(\"StdDev\");\n        table.addHeader(\"Min\");\n        table", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "    self.control_dependences = {}\n      for node in self.graph.nodes:\n        if node.kind == ControlFlow.N_BLOCK:\n          self.control_dependences[node] = []\n          for edge in node.out_edges:\n            self.control_", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.out.println(\"Unknown tree type.\");\n\t\t\t\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "=====================\n\ndef parse_datetime_marker(dt_marker: str, lang: str, context: 'XPathContext') -> datetime:\n    \"\"\"\n    Parse a datetime marker and return a datetime object.\n\n    :param dt_marker: The datetime marker string.\n    :", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    else if (Event.EVENT_TYPE_MESSAGE.equals(event.type)) {\n                        Message message = JsonUtils.toMessage(event.content);\n                        if (message.isCallEvent()) {\n                            handleCallEvent(message);\n                        } else {\n", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilter = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\t// PostProcessing\n\tprivate FOTableColumnPostprocessorFake tableColumnPostprocessor = new FOTableColumnPostprocessorFake();\n\t", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "      DocumentDialog(self, ReleveSIJModifications(site, annee)).ShowModal()\n\n    def OnGenerationEtatsFrequentation(self, _):\n        site = self.GetSelectedSite()\n        annee = self.etats_frequ", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "=====================\n\n    J_am = self.compute_angular_jacobian(p)\n    H_am = self.compute_angular_hessian(p)\n    return dot(J_am.T, H_am) + dot(J_am, J", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "      View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n            name.setText(queuedProjectResult.queuedProject.name);\n            author.setText(queuedProjectResult.queuedProject.author);\n", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "              new MigrateCommand(),\n                new RefreshCommand(),\n                new VirtualEconCommand(),\n                new VirtualAddCommand(),\n                new VirtualSetCommand(),\n                new VirtualRemoveCommand(),\n                new VirtualPayCommand(),\n                new PayVirtualCommand", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "```python\n        prior_specs = build_prior_specs(prior, params)\n```\nThis line of code initializes the prior specs for each parameter based on the prior and initial parameters.\n\nThe `build_prior_specs` function takes a prior", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "    return Const.fromValue(arg[0], is_symbol=False)\n    elif op == LOAD_NAME:\n      return Ref.fromName(arg[0])\n    elif op == LOAD_ATTR:\n      return Ref.fromName(arg[0])\n    elif", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Physics physics = new Physics();\n\tprivate final SpriteBatch batch = new SpriteBatch();\n\tprivate final SpriteBatch fringeBatch = new SpriteBatch();\n\tprivate final SpriteBatch debugBatch = new SpriteBatch();\n\tprivate final SpriteBatch h", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tview = new TempSensorView", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> getAuthorsWithBooks() {\n\t\treturn dslContext.select(AUTHOR.ID, AUTHOR.NAME, BOOK.ID, BOOK.TITLE)\n\t\t\t\t\t\t.from(AUTHOR)\n\t", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(Class<T> rootClass) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass);\n\t\tthis.rootQuery = new SQLQuery(schema, null, SQLAction.SELECT, null);\n\t}\n\n\tpublic SQLTranslation run", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "# install_and_run(DYNAMIC_TOOL_DIR, app_info, is_activity=True)\n\n        # 自动化测试\n        #auto_app_test(adb, app_info)\n\n        # 下载日志文件", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "  List<Genotype> parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return risks.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into risks\n     */\n", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "              Symbol.typed(bar_type, 'bar'),\n                Keyword('.'),\n                Symbol.typed(String, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "      PreparedExecution pe = ds.getFirstPrepared();\n\n        // query with StringMatcher\n        assertThat(pe, query(is(\"...\")));\n\n        // query with ParameterMatcher\n        assertThat(pe, param(\"p1\", is(123)));\n        assertThat(pe,", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "=======================\n\n\t\t\t\t\tself._viewWidget.on_update()\n\t\t\t\t\tself._geometry_dock.on_update()\n\t\t\t\t\tself._properties_dock.on_update()\n\t\t\t\t\tself._ribbon_", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return new ApiException(cause);\n            }\n        };\n        _config = config;\n        // Set up", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t}\r\n\r\n\tpublic void registerRenderer(Class<?> clazz, Renderer<?> renderer) {\r\n\t\trenderer.setEngine(this);\r\n\t\trenderer.setErrorHandler(errorHandler);\r\n\t", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_LOWERCASE, false)) {\n\t\t\tlabelFactory = new LowerCase", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "\n    url(r'^new$', staff_member_required(AddPackageCIPipeline.as_view(), login_url=LOGIN_URL), name=\"add-package-ci-pipeline\"),\n\n    url(r'^(?P<pipeline_id>[0-", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        if (bitmap != null) {\r\n                            intent.putExtra(Extras.EXTRA_IMAGE_TYPE, ImageType.WALLPAPER);\r\n                        }\r\n                        startActivity(", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "access_token = call_vimeo(access_token)\n\ndef call_vimeo(access_token):\n    # TODO: implement this\n    pass\n\ndef signin_ml(request):\n    # TODO: implement this\n    pass\n\ndef signin_ml", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "              pointing, mag = xyToRaDec(platepar, x_mean, y_mean, test_px_sum, platepar.UT, platepar.ref_time, \\\n                    platepar.ref_time_jd, platepar.ref_time_jd", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "=====================\ngrid = gen_grid(data, options)\n=====================\n\n    # Apply priors to likelihood surface\nNext line of code:\n=====================\nposterior = apply_priors(grid, options)\n=====================\n\n    # Compute likelihood across", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "          UIDialog.show(new DiceDialog(Board.this));}\n      }\n    });\n    addActor(rollBtn);\n\n    TextButton.TextButtonStyle tbs = new TextButton.TextButtonStyle();\n    tbs.up = new TextureRegion(G", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "=====================\n\n        self.assertEqual(list(etree_iter_paths(root)), [\n            (root, './/a'),\n            (root, './/b1'),\n            (root, './/b1/c1'),\n            (root, './/b1/", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "      self.runner.add(self.rule, with_child=True)\n\n    @patch(\"hammertime.rules.status.SimilarPathGenerator\")\n    @patch(\"hammertime.rules.status.SignatureComparator\")\n    @patch(\"hammertime.rules.status", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "```python\ncfe = CFeCancelamento(\n        destinatario=Destinatario(\n            CNPJ='11.111.111/0001-00',\n            xNome='Empresa de Testes'),\n        chC", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "  List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a list of ancestries.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a list", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "          EtsiResponse resp = this.client.sendRequest(req);\n            if (resp.getStatus() != EtsiResponse.StatusType.SUCCESS) {\n                System.out.println(\"Signature request failed: \" + resp.getStatus());\n                this.client.", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\n\t\telif type(obj) is Analysis:\n\t\t\treturn get_icon(\"analysis\")\n\t\telif type(obj) is Brush:\n\t\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "          RotationVectorSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 13", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<PlayerOverview> playerOverviews;\n\t\n\tpublic Team(String teamName) throws TeamNotFoundException {\n\t\ttry {\n\t\t\tString url = sourceBaseUrl + \"/data/json/team/summary/\" + currentSeason + \"/\" + teamName.", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "      FeedbackUseCase feedbackUseCase = new FeedbackUseCase(\n                new Function1<Unit, Unit>() {\n                    @Override\n                    public Unit invoke(Unit unit) {\n                        onSuccess();\n                        return Unit.INSTANCE;\n                    }\n", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "```python\n            table_index[table_name] = self.session.load_item({\n                \"TableName\": table_name,\n                \"Key\": key,\n                \"ConsistentRead\": consistent\n            })\n            object_index[obj] = table_", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "              art = draw_art(\n                    key_size=256,\n                    key_algo='RSA',\n                    key_fpr=fingerprint,\n                    longid=True,\n                )\n                print(art)\n            print", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "=====================\n\n    return RespostaExtrairLogs.analisar(retorno)\n\n    def ativar_sat(self):\n        \"\"\"Sobrecarga do método ``ativar_sat`` da classe ``FuncoesSAT``.\n\n       ", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "```python\ndef test_node_document_uri_function(self):\n    xml_test = '<A xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case DURATION_", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "=====================\n\n    self.logger.info(f\"Initializing training for {self.identifier}...\")\n    try:\n        self._trainer_initialization()\n        parse_logs(self.working_log_directory)\n    except Exception as e:\n        with open", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "  private final OAuth2Requester requester;\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "  private final Jobs jobs;\n    private final Vms vms;\n    private final Errands errands;\n\n    public SpringDirectorClient(URI root, RestTemplate restTemplate) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(rest", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "public void requestAudiologistInfo() {\n    _chat.requestAudiologistInfo();\n}\n\npublic void requestAudiologistInfo() {\n    synchronized (_lockObject) {\n        if (_state.getConnectionState() != FittingConnectionState.CONNECTED) {\n            Log", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "      return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "  public void onMessage(ChatMessageEvent event) {\n        if (event.channel == this.channel) {\n            this.setStatus(ChannelStatus.JOINED);\n        }\n    }\n\n    @Subscribe\n    public void onStatusChange(ChannelStatusChangeEvent event", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "        DATA[looptest], EPSILON, FiniteDifferenceSchemes.FORWARD);\n        double[] d3Price = BlackFormula2.price_Sad(DATA[looptest][0], DATA[looptest][1], DATA[looptest][2], DATA[loop", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "          VotingModule.class\n    };\n\n    /**\n     * Map of module names to their instances\n     */\n    private static HashMap<String, Module> modules = new HashMap<>();\n\n    /**\n     * Loads all modules and registers their event listeners\n     * @param plugin the", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "=======================\n\npublic static DownloadQueue newDownloadQueue() {\n    return newDownloadQueue(3);\n}\n\n/**\n * Create a new download queue.\n *\n * @param threadPoolSize handle the number of threads.\n * @return {@link DownloadQueue}.\n * @see", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "public void init(MutableConfig config) {\n    // register the plugin properties\n    config.set(\"plugin.packager.classifier\", this::getClassifier);\n    config.set(\"plugin.packager.outputDirectory\", this::outputDirectory);\n    config.set(\"plugin.", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "=======================\nprivate QuerySetConfig parseQuerySetConfigTag(Element element) {\n    QuerySetConfig querySetConfig = new QuerySetConfig();\n    NodeList querySetNodes = getAllChildNodes(element, QUERY_SET_CONFIG_TAG);\n    for (Node node :", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "=====================\n\ndef main():\n    ms = MainScanner()\n    ms.Scanner()\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "=====================\n\n        self.robot.ik.add(MinimalIK(self.robot, swing_weight))\n\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "\n@settings(max_examples=100)\n@given(integers(min_value=MIN_SIZE, max_value=MAX_SIZE))\ndef test_simple_operations(x):\n    \"\"\"Test the simple operations.\"\"\"\n    a = bitvectify(", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG, aJPEG.mICCProfile).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew SOF0Segment(aJPEG).encode(aOutput).log(aLog);\n\n\t\t", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "          if (sl != null) {\n                SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();\n                SqlSession session = sqlSessionFactory.openSession();\n                try {\n                    LastschriftenMapper mapper = session.getMapper(\n                            Lastschrif", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "====================\n\nclass PretrainedAligner(TopLevelMfaWorker):\n\"\"\"Class for aligning with pretrained acoustic models\"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize the PretrainedAligner\"\"\"\n        super().__init__(**kwargs)\n        self", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "      Lore lore = LoreLoader.getLore(category, ident);\n\n        if (lore == null) {\n            sender.addChatMessage(new ChatComponentText(\"Could not find lore with category \" + category + \" and ident \" + ident));\n            return;", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "  private final User user;\n    private final Budget budget;\n    private final AuthToken authToken;\n    private final PasswordEncoder passwordEncoder;\n    private final UserDAO userDAO;\n    private final BudgetDAO budgetDAO;\n    private final AuthTokenDAO", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "public static Util getInstance() {\n\treturn instance;\n}\n\n\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static Logger getLogger() {\n\t", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "  FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInY", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "      problem = SearchSkCh(ch, der_mode=der_mode, initial_weight=initial_weight)\n\n    if verbose_level >= 1:\n        problem.print_ss()\n\n    if check:\n        problem.check()\n\n    if verbose_", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "=====================\n\n    def test_hosts_container(self):\n        hosts = HostsContainer(\n            {\n                'local': [ LocalHost1(), LocalHost2() ],\n                'local-ssh': [ LocalSSHHost1(), LocalSSHHost2", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "      return (\n            command.startswith(\"tc\")\n            and command.split()[1] in [\n                \"class\",\n                \"filter\",\n                \"qdisc\",\n                \"link\",\n                \"route\",\n                \"help\",\n              ", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "=====================\n\n  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "  public List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        Cursor cursor = db.rawQuery(ExpenseManagerContract.", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "  private TextView weekDayTextView;\n\n    private TextView monthTitleTextView;\n\n    private TextView monthTitleYearTextView;\n\n    private TextView monthTitleMonthTextView;\n\n    private TextView monthTitleMonthNumberTextView;\n\n    private TextView monthTitleMonthNameTextView;", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "```python\nclass TestWhiteNoise(object):\n\n  def test_no_input(self):\n    wn = white_noise()\n    assert isinstance(wn, Stream)\n    assert wn.take(100).mean() > 0\n    assert w", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "=====================\n\ndef unify(t1, t2, backref=None):\n    \"\"\"Unify `t1` to match `t2`\n\n    Unification is a process of making two types equal.\n\n    `t1` and `t2` can contain type", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "```python\n        self.auth = Auth()\n        self.homes = []\n        self.last_refresh = 0\n        self.motion_interval = DEFAULT_MOTION_INTERVAL\n        self.last_refresh = int(time.time())\n        self.", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "=====================\n\n\t\treturn default_flags\n\n\tdef create_model_item(self, parent, data):\n\t\tif isinstance(data, Geometry):\n\t\t\treturn DocumentModelItem(data, self, parent)\n\t\telif isinstance(data, Feature):\n", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "=====================\n\ndef SocketTransportSink(next_provider, sink_properties, global_properties):\n  \"\"\"A sink that wraps a socket and a next sink.\"\"\"\n  return SocketTransport(next_provider, sink_properties, global_properties)\n\nSocketTransportSink.Builder", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "      ProcessBuilder pb = new ProcessBuilder(\"java\", \"-jar\", \"dumpling.jar\", \"threaddump\", \"-\");\n        pb.redirectErrorStream(true);\n        Process p = pb.start();\n        p.getInputStream().write(asBytes(out.toString()));\n       ", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "      return data;\n    }\n\n    private static DrumStoreEntry<PLDTestData, ?> createNewData(Long key, DrumOperation operation, Long... neighbors) {\n        InMemoryEntry<PLDTestData, ?> data = new InMemoryEntry<>();\n        data.set", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "      MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "      RoxanaProperties roxanaProperties = new RoxanaProperties();\n        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();\n        builder.withLocale(Locale.US);\n        builder.withResponseStrategy(ResponseStrategy.TRANSLATED);\n        rox", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "  self._socket.write(self._ping_msg)\n\n  def _CheckInitialConnection(self):\n    \"\"\"Checks if the initial connection is still alive.\"\"\"\n    self._log.debug('Checking initial connection.')\n    self._socket.write(self._ping_msg", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "    assert abs(freq2lag(v) - lag2freq(v)) < 1e-12\n\n\nclass TestAlmostEq(object):\n  @p(\"a\", \"b\", \"bits\", \"tol\")\n  def test_almost_eq_with_bits", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "          Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "=====================\n\nclass ConfigCog(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.dbi = GlobalConfigCache(self.bot.dbi)\n        self.config_manager = GlobalConfigCache(self.", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "  if self.symbol == 'eq':\n        return numeric_equal(*operands)\n    elif self.symbol == 'ne':\n        return numeric_not_equal(*operands)\n    elif self.symbol == 'lt':\n        return numeric_less(*operands)", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "      welcomeString.setText(getResources().getString(R.string.welcome_message, getResources().getString(R.string.app_name)));\n        return header;\n    }\n\n    @Override\n    public void onAttach(Activity activity) {\n        super.onAtt", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "          // Open the chat activity\n            try {\n                // Notify the fragment to open the chat activity\n                InvokeMethod.invokeStaticMethod(classToNotify, \"startChat\", newChatId);\n            } catch (Exception e) {\n                Log.e(this.", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "      UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        LOG.info(\"response: {}\", JSON.toJSONString(response));\n        Assert.assertNotNull(response);\n        Assert.assertNotNull(response.getCodeUrl());\n        String codeUrl = response.", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "      MessageMapperEnum messageMapperEnum = mock(MessageMapperEnum.class);\n        MessageMapperEnumParameterFinder messageMapperEnumParameterFinder = new MessageMapperEnumParameterFinder(messageMapperEnum, Arrays.asList(RANDOM_STRING_PARAMETER_VALUE_01, RANDOM_STRING_", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\t\tint d1 = in.read1();\n\t\tint tag = d1 & 0x0F;\n\t\tif (tag == CODEINT4_TAG)\n\t\t\treturn readSmallIntValue(d1);\n\t\telse if (tag == CODEINT", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "=====================\n\nfrom troveclient import client as trove_client\nfrom troveclient.v1 import backup_strategy\nfrom troveclient.v1 import backups\nfrom troveclient.v1 import clusters\nfrom troveclient.v1 import configurations\nfrom trove", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "\n        parser_class_list += [\n            MacOsPingParser,\n            AlpineLinuxPingParser,\n        ]\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class()\n                break", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "      Main.mainVideoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\r\n        }\r\n\r\n        // set video properties\r\n        if (e.getActionCommand().equals(\"Set Video Width\")) {\r\n            Main.mainVideoWidth = Integer.parseInt(m", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "          self._probe = probe\n        else:\n            self._probe = load_probe(kwargs.pop('probe_file', None))\n        self._kwargs = kwargs\n        self._logger = logging.getLogger(__name__)\n        self._logger.setLevel(logging.INFO)\n", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "  public final Promise<Channel> connect(final TransportContext context, final String connectionToken) {\n        // TODO: Implement connect method\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "    self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def analyze(self):\n    \"\"\"\n      Performs the following analysis:\n      1. Control flow graph\n      2. Blocks\n      3. Conditions\n      4. Frames\n", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "      ObservableRegistry.getObservable(this.getClass()).register(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    if (inExp.getValues().isEmpty())\n      throw new QueryGrammarException(\"Cannot apply IN operator with empty list\");\n\n    result.append(OPEN", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile inputFile = new File(basePath + \"/input/ddi-simple.xml\");\n\t\t\tFile outputFile = new File(basePath + \"/output/ddi-simple.xml\");\n\t\t\tFile xformsFile = new File(basePath + \"/output", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "      self.assertEqual(\n            Normal(mu=1.0, sigma=1.0).draw(10),\n            np.random.normal(1.0, 1.0, 10),\n        )\n\n        self.assertEqual(\n            Normal(mu=", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "      state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpad state\n\n        state = stateFactory.createState(VpadState.class);", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(BooleanTag tag, boolean value) throws InvalidValueException {\n\t\tValidity validity = isValid(tag);\n\t\tif (validity != null && validity.isBoolean()) {\n\t\t\tvalidity.validateBoolean(tag, value);\n\t", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "=====================\n\n    def test_replace_blank_name(self):\n        self.assertEqual(\"Your child\", replace_blank_name(name=None, language=\"Hindi\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name=\"\", language=\"Hindi\"))", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        expect(systemUnderTestMock.nonVoidFailWithParameter(GIVEN_STRING)).andThrow(\n                                new ExpectedException(ExpectedExecutionError.class,\n                                        \"Expected failure with message: \" + GIVEN_STRING));\n                        mocksControl.", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "\n# Decoder for the first rest octet\nclass RestOctets_1(RestOctets):\n    # name for the rest octet\n    name = 'RestOctets_1'\n    # fields\n    fields = [\n        # 1st field: 1 bit\n       ", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "```python\n        if not skip_table_setup:\n            table_name = self.table_name(model)\n            self.create_table(table_name, model)\n            self.validate_table(table_name, model)\n\n        # Bind all subclasses", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "=====================\n\n    return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def _http_post(self, metodo, **kwargs):\n        \"\"\"Sobrecarga do método ``_http_post`` da classe", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "```python\nengine.bind(User, skip_table_creation=True)\n```\n\nThis test checks that an error is raised when trying to bind a non-model object to the engine.\n```python\ndef test_bind_non_model(engine):\n    with", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "=====================\n\nu7 = Unit(\"Msun/pc**3\")\nassert u7.dimensions == mass_per_volume\nassert u7.base_value == 1.0 / m_per_pc**3\n\n\ndef test_create_from_symbol():\n", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "=====================\n\n['references', 'TST_Person.name=\"Mike\"', '--no'],\n{'stdout': ['\"root/cimv2:TST_FamilyCollection.name=\\\\\"Family2\\\\\"\",member',\n           '=\\\"root/cimv", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "      loadModules();\n        // Register listeners\n        registerListeners();\n        // Register commands\n        registerCommands();\n        // Register events\n        registerEvents();\n        // Register services\n        registerServices();\n        // Register the EconomyLite instance\n        EconomyLite.getInstance().setEconom", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "      tag = TAG()\n        if index >= 0:\n            self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag))\n        elif name:\n            self._call_fmod(\"FMOD_Sound_GetTagByName\", name, by", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    public void startEditAccountActivity(Account account) {\n                        startActivity(EditActivity.getIntent(MainActivity.this, account, AccountEditController.class));\n                    }\n\n                    @Override\n                    public void startEditOrderActivity(Order order) {\n                ", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<GalleryImage>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Query(\"page\") int page,\n\t\t\t@Query(\"sort\") GalleryImage.Sort sort );\n\n\t@GET(\"/", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "      resource = ThermometerResource(aircraft.sensors.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(thermometer_data[\"temperature\"], aircraft.sensors.thermometer.temperature, delta=0", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "```python\ndef test_ref_value_path(reference_tracker):\n    \"\"\"has path, value not dumped\"\"\"\n    column = User.age[\"foo\"]\n    value = 3\n    expected_ref = \"d_User.age.foo.#v0\"", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "          Platform.runLater(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    progressDialog.setAlertText(\"Error: \" + e.getMessage());\r\n                    progressDialog.showAndWait();\r\n                }\r\n            });\r\n           ", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "=====================\n        if request.method == 'POST':\n            form = self.form_class(request.POST)\n            if form.is_valid():\n                comment = form.save(commit=False)\n                comment.post = post\n                comment.user =", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "  Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a list of trending terms, which are the most popular search terms\n     *\n     * @param serviceIds a {@link Map} of a", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "          disconnectFromWifi(mWifiManager);\n            of(mConnectionSuccessListener).ifPresent(connectionSuccessListener -> connectionSuccessListener.failed(connectionErrorCode));\n        }\n    };\n\n    @NonNull\n    private final TimeoutHandler mTimeoutHandler = new TimeoutHandler();", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "          LightSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 9 || type == 0) {\r", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack.getArchivedCards()) {", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "=====================\n\nclass SegmentVadArguments(Namespace):\n    \"\"\"\n    Arguments for the :class:`SegmentVadFunction`\n    \"\"\"\n\n    vad_file: str\n    output_file: str\n    segmentation_options: dict\n\n\ndef segment_", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "  private final Deployments deployments;\n    private final Jobs jobs;\n    private final Vms vms;\n    private final Tasks tasks;\n    private final Errands errands;\n\n    public SpringDirectorClient(URI root, RestTemplate restTemplate) {\n        this", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "      self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag), name, 0)\n        if name:\n            if tag.type != index:\n                raise ValueError(\n                    \"Tag type mismatch, expected %s, got %s", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "          self.process_codeflag(\n                bufr_message,\n                section,\n                SectionParameter(\n                    'section_length',\n                    nbytes_write,\n                    'unit',\n                    'bytes',\n                    False,\n                    N", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "=====================\n\nform = ReportAbuseForm(request.POST)\n\nif form.is_valid():\n    abuse_report = AbuseReport.objects.create(\n        logged_against=logged_against,\n        logged_by=logged_by,\n", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "  public void listenToResultSet(final BenchmarkResult paramBenchmarkResult) {\n        final NiceTable table = new NiceTable(paramBenchmarkResult.getNumberOfMeters());\n        table.addHeader(\"Meter\", \"Unit\", \"Mean\", \"StdDev\",", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "      ApplicationGlobals.initialize();\n\n        // creating the ProtTestFacade\n        ProtTestFacade facade = null;\n        switch (factory.getSort()) {\n            case AminoAcid:\n                facade = new ProtTestFacadeAmin", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t}\n}\n\n// The following code snippet is the expected next line of code.\n// The code snippet below is not the expected next line of code.\n//tropo.record(\"recording.wav\", BEEP, MUTE, 300, ID(\"", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "              VerificadorDePrazos.estaNoPrazo(listaDeRespostas.getPropriedades().getDataDeEntrega())) {\n\t\t\t// Salva a resposta\n\t\t\tresposta.adiciona(resposta.adiciona", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tif (code == 200) {\n\t\t\t\t\tProgramManager.getInstance().parseTrack(connector.getResultDoc().getJsonString());\n\t\t\t\t\tadapter", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "  AdInterface adInterface;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    CuePointCallBack cuePointCallBack;\n\n    @Mock\n    PlayerUIController controller;\n\n    @Mock\n    PlayerAdComponent component;", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tPlatform.exit();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// initialize the client\n\t\t\tclient = new Drive.Builder(GoogleNetHttpTransport.newTrustedTransport(),\n\t\t\t\t\tJsonFactory.getDefaultInstance", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "  String className = rawTypeToString(type, INJECT_SUFFIX);\n    String adapterClassName = adapterName(ClassName.get(packageName, className), INJECT_SUFFIX);\n\n    TypeSpec injectSpec = new TypeSpec.Builder(adapterClassName, TypeSpec.COMPAN", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "          new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        */\r\n         * 打开/关闭透传消息\r\n         * @param enable 打开/关闭\r\n         */\r\n        public static void enableReceiveNormal", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "=====================\n  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNAV message test\n  '''\n  parser = prepareArgsParser()\n  params =", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "\n    if suffix:\n        return f'{path}/{suffix}'\n    return etree_iter_paths(elem, context)\n\n@method(function('string-join', nargs=2, nilled=True,\n              nargs_min=2, nargs_", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "=====================\n\ndef last_record(table, fill=False):\n\"\"\"\nReturn the last record of the table\n\n:param table: a Table\n:param fill: True if empty values should be filled with NaN\n:return: a dictionary\n\"\"\"\nreturn last_record(table", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "              TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n            else if (message.getType() == MessageType.USER_INFO_REQUEST)\n            {\n                if (_pendingAudiologistInfo", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "=====================\n\n\t\tEXOG_A = []\n\t\tEXOG_B = []\n\n\t\tif opts.exogleftvar:\n\t\t\tEXOG_A.append(dummy_code(np.array(pdCSV[opts.exogleftvar]),", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "      main.getLock().acquire();\n        pause(100);\n        main.getLock().release();\n        pause(100);\n        main.getLock().acquire();\n        pause(100);\n        main.getLock().release();\n        pause", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "              DatePicker datePicker = new DatePicker(this, DatePicker.YEAR_MONTH_DAY);\n                datePicker.setOnDateChangeListener(new DatePicker.OnDateChangeListener() {\n                    @Override\n                    public void onDateChanged(DatePicker view,", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "          GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0)", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "  private SetOtherFragment setOtherFragment;\n\n    private ViewPager mViewPager;\n    private TabLayout tabLayout;\n\n    private List<Fragment> fragmentList = new ArrayList<>();\n    private List<String> titleList = new ArrayList<>();\n\n    private static final int RE", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "```python\nself.tracerouter = Tracerouter()\n```\n\n        self.tracerouter = Tracerouter()\n\n        self.link.start()\n        self.reporter.start()\n        self.cleaner.start()\n        self.listener.start", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "```python\nassert isinstance(deltas.deltas[4].attributes, Thread)\n```\nThis line of code should raise an AssertionError because the `deltas` object does not contain a Delta for a Thread object. The `deltas` object only contains Delt", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "  @property\n    def outbox(self):\n        return Outbox(self)\n\n    def is_opensource_api(self):\n        return self.api_key == \"opensource\"\n\n    def is_enterprise_api(self):\n        return self.api", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "  activityLightLevelManager = new ActivityLightLevelManager(this, activityLightLevelChanger);\n\n    // Set up the UI\n    setContentView(R.layout.activity_dynamic_star_map);\n\n    // Set up the UI for the time player\n    timePlayerUISetup", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "=====================\nnon_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n=====================\n\n        lnlike = np.", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "          ID(**kwargs),  # Identity, 1 to 8 bytes\n            ])\r\n        self._len_gsmrr(kwargs.get('Val', ''))\r\n        self._post_init(with_options)\r\n\r\n\r\n# section 9.2.3", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "```python\n        TcClassParser(self.__con).parse(device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output))\n```\nThis line of code parses the tc class configuration for the given device using the `Tc", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "=====================\nif type(right) == Column:\n    result, index = apply_fast_eq(left.values, right.values,\n                                 left.index, right.index)\n    return Column(result, index)\n\nelse:\n    result = np.equal(", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "```python\n@validation_error(SwaggerMappingError)\ndef validate_response(response, validator_map):\n```\n\nThis decorator is used to transform a SwaggerMappingError into a ResponseValidationError.\n\n\ndef test_validate_response_success():\n   ", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
