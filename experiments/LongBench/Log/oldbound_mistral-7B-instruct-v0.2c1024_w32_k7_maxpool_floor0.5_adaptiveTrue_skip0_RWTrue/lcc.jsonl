{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tMobile m = p.", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tself._init(graph)\n\t\t\tA = self.best(root)\n\t\t\tsolutions.append(A)\n\t\t\tself._init(graph)\n\t\t\te, d = self.next(A, Y_, Z)\n\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "if __name__ == '__main__':\n    TestSndfile.main()\n# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4\n# End of file", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def get_subtitle_status(self, language):\n        \"\"\"\n        Get the status of the subtitle for the given language.\n        \"\"\"\n        status_tag = self.get_element_by_css_selector(\n            self._STATUS_TAGS, filter=lambda", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t\twriter.addAttribute(\"label\", styleValue.getLabel());\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n    def __init__(self, question, category, id):\n        super(_QuestionData, self).__init__()\n        self.question = question\n        self.category = category\n        self.id = id\n        self.type = \"question\"\n\nclass _AnswerData", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    mob.Target = new SR_TargetLocation(RuneAcc, mob);\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc,", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "          for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n        }\n        s.println(\"***\");\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLIENT\n *\n * This", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "          try {\n                sp = new JESpace (name, path);\n                spaceRegistrar.put (name, sp);\n            } catch (SpaceError e) {\n                error (e);\n                return null;\n            }\n        }\n        return sp", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tRedButton btnImp = new RedButton(Messages.get(this, \"imp\")) {\n\t\t\t\t@Override\n\t\t\t\tprotected void", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "# Create a dispatcher instance\ndispatcher = SoapDispatcher()\n# Register methods\ndispatcher.register_method(name='Add',\n                          soap_action='http://localhost:8000/Add',\n                          func=add)\ndispatcher.register_method(", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "  def lock_status(self, status_id):\n        self.webview.lock_status(status_id)\n\n# This is the code that needs to be completed\n# The lock_status method is used to prevent the user from interacting with a status\n# while it is being", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "def action_copy_between_sftp(self, status_id, login1, login2, source_path, target_path, session1, session2):\n    return self.get_process_data(CopyBetweenSftp, status_id, login1, login2", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsInstanceOf<SecurityException> (c.GetType (), \"SecurityException\");\n\t\t\t// note: can't be tested with 1.1\n\t\t\t", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "# This is the main function that sets up the SSLContext and returns a socket\n# that can be used to connect to a remote server.\ndef create_ssl_context(keyfile, certfile, ca_certs=None):\n    context = _get_ssl_context(keyfile,", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "      DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "      self.__tmp_dir, 'datastream.pipe')\n        self.__datastream_transport, self.__datastream_protocol = await self.__event_loop.create_connection(\n            DataStreamProtocol, self.__datastream_address)\n        self.__datastream", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, 0).ToString());\n\t\t\t\t\t//update database\n\t\t\t\t\t//...\n\t\t\t\t}\n\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "      String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            String argName = args[i].getName();", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}));\n\t\tprivate ConfigFile configFile;\n\t\tprivate File(ConfigFile configFile)\n\t\t{\n\t\t\tthis.configFile = configFile;\n\t\t}\n\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE, \"Auto save\",\n\t\t\t\t\t\tget", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "              if (m_Owner.Caster.Party != null)\n                {\n                    foreach (Mobile m in m_Owner.Caster.Party.Members)\n                    {\n                        if (m != m_Owner && m.Alive && m.InRange", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "#    for state in states:\n#        if state.is_new:\n#            self.identity_map.new(state.instance)\n#        elif state.is_deleted:\n#            self.identity_map.delete(state.instance)\n#        elif state.is", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) {\n\t\t\t\tnamed = new ArrayList", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "====================\n\nclass MainHandler(RequestHandler):\n    @authenticated\n    @xhr\n    def get(self):\n        self.write(self.get_json_data())\n\nclass MainHandler(RequestHandler):\n    @authenticated\n    @xhr\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "if __name__ == '__main__':\n    args = parser.parse_args()\n    downloader = WigleDownloader( args.user, args.password, args.coordfile, args.outpath )\n    downloader.run()", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "              if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Poss", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "      builds += [{'os': 'Windows', 'os_pretty': 'Windows',\n                    'arch': 'x86', 'arch_pretty': '32-bit',\n                    'download_link': make_download_link(\n                        'Windows', version,", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.getByProjectTypeIssueTypeAssignments(projectID, issueTypeID, objectID);\n\t\t} else {\n\t\t\tstateBeansList = Status", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "          foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if ( argumentSyntax.Expression is IdentifierNameSyntax identifierNameSyntax && memberList.Any( x => x.Identifier.ValueText == identifierNameSyntax.Identifier.ValueText ) ) {\n                    toReplace[argumentSyntax", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "      split_test = self._update_partition_id(0)\n        # Verify that the children are the correct verticals for the first group configuration.\n        self._assert_children(split_test, 2)\n        # Set to second group configuration.\n        split_test = self", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "          //if (vertical) {\n            //    PdfIndirectObject toUnicode = writer.DirectObject;\n            //    PdfStream stream = writer.DirectObject.Put(PdfName.TOUNICODE, new PdfStream(GetToUnicode(metrics)));\n            //", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the top-level cell that contains this cell\n\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "      task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      InputStream is = context.getAssets().open(model.getSprite());\n      try {\n        return BitmapFactory.", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "              if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "# TODO: Add tests for NodeEditTagsForm and NodeManagePoliciesForm\n# TODO: Add tests for NodeDetailsView\n# TODO: Add tests for NodeEditTagsForm and NodeManagePoliciesForm\n# TODO: Add tests for NodeEditTagsForm and NodeManagePoliciesForm\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles, sequences);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "              if (Enabled)\n                    ImageUrl = EnabledImageURL;\n                else\n                    ImageUrl = DisabledImageURL;\n            }\n            base.Render(writer);\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "sharpness = compound.getInteger(\"sharpness\");\nfire = compound.getInteger(\"fire\");\nblast = compound.getInteger(\"blast\");\nsmite = compound.getInteger(\"smite\");\ndamageCooldown = compound.getInteger(\"damageCooldown", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "      return getId() + \" [\" + getProbability() + \"%]\";\n    }\n}\n/**\n * The scope of an effect.\n */\nclass Scope {\n    public static final String UNIT_TAG = \"unit\";\n    public static final String TILE_TAG", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "# test admin can access any group\ni = store.handle_indicators_search(token, {'groups': 'everyone'})\nassert i\nassert len(i) > 0\n# test admin can access private group\ni = store.handle_indicators_search(token", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "# Test that the delta is correct\nself.assertEqual(person._delta(), {'owns': [SON(id=organization.id,\n                                                  **{'__type__': 'ObjectId'}),\n                                            'employer': None],\n                                   'name':", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "=====================\n\ndef inspect_l1b_product(product_file_path: str, output_format: str = None) -> L1bProductInspector:\n    \"\"\"\n    Open an L1b product file for inspection.\n\n    :param product_file_path:", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "              if (!ignored.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var path in toScan)\n            {\n                _logger.Trace(\"Scanning path: {0}\", path);\n              ", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "      resbrains = getToolByName(self.context, 'uid_catalog').searchResults(query)\n        if len(resbrains) > 0:\n            obj = resbrains[0].getObject()\n            objcomments = pdt.getDiscussionFor(obj).", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = (ushort)value; }\n\t\t}\n\t\tpublic bool IsWater\n\t\t{\n\t\t\tget { return ( m_ID & 0x8000 ) != 0; }\n\t\t}\n\t\tpublic", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    // get channel_uri:\n                    // if it's not available yet, create it\n                    // and cache it\n                    if (null == scene.LandChannel)\n                    {\n                        // create a new channel\n                        // XXX: we need to check whether", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart=textDateStart.DateTime;\n\t\t\tPayPeriodCur.DateStop=textDateStop.DateTime;\n\t\t\tPayPeriodCur.DatePaycheck=textDatePaycheck.DateTime;", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "      lat, lon = _build_lat_lon_for_NAMEII_timeseries(column_headings)\n        # Convert time to python datetime objects.\n        time_list = []\n        for i, t in enumerate(column_headings['Time']):\n            try:", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "# This function is used by the `group_member_create` and `organization_member_create`\n# functions to check if the user is allowed to add a new member to the group or\n# organization.\n# It checks if the user is a sysadmin, or if the user is allowed", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tString childLabel = predictionAttribute.getValue(example).toString();\n\t\t\t\tNode childNode = node.getChild(childLabel);\n\t\t\t\t// setting outcome\n\t\t\t\toutcomes[parentIndex] = childNode.getPartitionId();\n\t\t", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "          return this.SearchSegments(settings, segments, null);\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "          codePoint = string.charAt(offset++) << 10\n                      | string.charAt(offset++) & 0x3FF;\n         }\n         if (_range != null && _range.contains(codePoint)) {\n            return offset;\n         }\n         return", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\tObservationHistoryDAO observationHistoryDAO = new ObservationHistoryDAOImpl();\n\t\tObservationHistory observationHistory = observationHistoryDAO.getObservationHistory(accessionNumber);\n\t\tif (observationHistory != null && observationHistory.getStudyFormName() !=", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest.Id)\n", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify()\n#-------------------\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "          int [] ret = new int[A.Dimensions.NumberOfDimensions];\n            A.GetValueSeq(seqindex, ref ret);\n            return ret;\n        }\n    }\n}", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "pD[ 'plotName' ] = pD[ 'plotName' ].replace( ' ', '_' )\n  pD[ 'plotName' ] = pD[ 'plotName' ].replace( '/', '_' )\n  pD[ 'plotName' ] =", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (playerPower.Power < Info.MinimumPowerForNewBuilding)\n\t\t\t\treturn;\n\t\t\tvar closestFactory = world.Actors.OfType<Actor>().Where(a => a.Owner == player &&\n\t\t\t\tInfo.Fact", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "      // Save the compiled plan\n        m_currentPlan = new CompiledPlan(name, plan, catalogStmt);\n        return plan.getRoot();\n    }\n    public CompiledPlan getCurrentPlan() {\n        return m_currentPlan;\n    }\n    public static class Comp", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(221, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte)parity;\n\t\t\tdcb.DataBits = (byte)data_bits;\n\t\t\tdcb.StopBits = (byte)bits;\n", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "  def test_user_with_cobrand_admin_can_edit(self):\n        admin = self.make_user('admin')\n        admin.is_superuser = True\n        admin.save()\n        cobrand = Cobranding.objects.create(user=self", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "  _keep_tempdir = parser.parse_args().keep_tempdir\n    unittest.main()\nif __name__ == '__main__':\n    main()\n# vim: set fileencoding=utf-8 :\n# Local Variables:\n# mode: python\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tif entry[0] == self[\"list\"].getCurrent()[0]:\n\t\t\t\t\tcurrentListEntry = entry\n\t\t\t\t\tcurrentListIndex = self[\"list\"].getIndex(entry)\n\t\tif len(newList) > len(self.oldlist", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "              int len = fCode.Length;\n                int width = (int) ((x + fontX) * 1000);\n                int height = (int) ((barHeight + fontY) * 1000);\n                int barsWidth = (int", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "  return results;\n  }\n}\n\n// The following code snippet is for testing the PropertiesUtils class\npublic static void main(String[] args) {\n  Properties props = new Properties();\n  props.setProperty(\"foo\", \"bar\");\n  props.setProperty(\"bool\",", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "#         y_points = np.arange(-90.0, +90.0, 2.0)\n        y_points = np.arange(-90.0, +90.0, 2.0)\n        sample_points = np.meshgrid", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "          if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrent", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "# build_songs_dataset('short_wav')\n# build_songs_dataset('long_wav')\n# build_songs_dataset('all_wav')\n# pickle_dataset('dataset.pkl')\n# get_data_from_pickle('", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "          }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "          this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 3", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n    def nullFunction( self, name, dll=None, resultType=None, argTypes=(), doc=None, argNames=(), extension=None, deprecated=False ):\n        \"\"\"Create a null function with the given name, docstring, and extension.\n\n        This is", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "          baos.write(emptyStreams.toByteArray());\n            writeUint64(header, baos.size());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header, final List<", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    alphaLevel -= 1;\n                    if (alphaLevel <= 0)\n                    {\n                        inRamp = true;\n                        if (rampDelay > 0)\n                        {\n                            try {\n                                Thread.sleep(rampDelay", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "          var item = Subject.GetItems().FirstOrDefault();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_able_to_remove_", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "          if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n            }\n            if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken,", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "#        f.writelines(['F) ', str(NXPTS), '\t\t# Number of pixels in X',\\\n#                      ' direction\\n'])\n#        f.writelines(['G) ', str(NYPTS), '\t\t# Number of pixels in Y',", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    /* C", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "  @property\n    def _course_key(self):\n        \"\"\"\n        Return the CourseKey for the course.\n        \"\"\"\n        if self._course_key is None:\n            self._course_key = CourseKey.from_parts(self._course_dict['org'], self", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tString chanceString = splitNumber[1].replace(\"%\", \"\");\n\t\t\tchance = Float.parseFloat(chanceString);\n\t\t}\n\t\treturn (int) (Math.random() * chance", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "# Define main function\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True, type='str'),\n            state=dict(default='present', choices=['present', 'absent']),\n            apiid=", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "          this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 12);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "```python\n        for plugname, plug in self.loaded_plugins:\n            try:\n                self.ui_log.info(_(\" Running plugin %s ...\") % plugname)\n                self.xml_report.add_plugin(plugname)\n                plug", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class IConferenceSessionFossil(IConferenceFossil, ISessionFossil):\n    pass\n\n# This class is used to represent a conference session in the fossil database.\n# It inherits from IConferenceFossil and ISessionFossil.\n#", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText(), subfoldersCheckbox.isSelected(), messageWriter);\n            } else {\n                result = parent.", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getNumber(\"value\").intValue();\n\t\t       \t\t} else if (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t} else if (", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "      if (currentSession != null && currentSession.isOpened()) {\n            Bundle parameters = new Bundle();\n            parameters.putString(FIELDS, REQUEST_FIELDS);\n            Request request = new Request(currentSession, \"/me\", parameters, null);\n", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) sum += emotion.chance;\n\t\tfor (Emotion emotion : emotions) emotion.chance /= sum;\n\t}\n}\nThe code above is a Java class named StandardEmotionsController. It implements the EmotionsController interface", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "#                    'property1': 2, 'property2': 3}\n                    'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_xml(self):\n       ", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "  Long = (x/k0 + (mu + (3*e1/8)*sin(2*mu) + (3*e1*e1/16)*sin(4*mu)\n                   + (23*e1*e1*e1/64", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\nform = ReportUserForm(request.POST)\nif form.is_valid():\n    report = form.save(commit=False)\n    report.user = user\n    report.reporter = request.user\n    report.save()\n    messages.success(request, \"User", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddStepOne(StepView):\n    \"\"\"A step for entering the name of the new product series.\"\"\"\n    schema = ISourcePackageName\n    @property\n    def next_step(self):\n        return ProductAddStepTwo\nclass ProductAddStepTwo(StepView):\n   ", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "              temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "=====================\n    config._add_post_processor(\n        'isa', set_default_isa)\n    config._add_post_processor(\n        'isa', default_isa)\n    config._add_post_processor(\n        'isa', fix_verbosity_h", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "              return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override bool IsSubclassOf (Type type)\n            {\n                return false;\n            }", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "# class OBD_PID_XX(OBD_Packet):\n#     name = \"PID_XX_XXX\"\n#     fields_desc = [\n#         # fields description here\n#     ]\n# For example, PID_20_EngineRpm\nclass", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.bus_name.add_interface(dbus_interfaces.DBusService)\n\t\tself.bus_name.add_interface(dbus_interfaces.DBusObjectManager)\n\t\tself.bus_name.add_interface(dbus_interfaces", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "          }\n            else\n            {\n                index = this.AddCraft(typeof(Prism), 1044294, 1044377, 45.0, 95.0, typeof(BlankScroll), 104", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    def __enter__(self):\n        \"\"\"Enter the context.\"\"\"\n        self.push()\n        return self\n\n    def __exit__(self, exc_type, exc_value, tb):\n        \"\"\"Exit the context.\"\"\"\n        self.pop(exc_value)\n\n       ", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "  response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name == topic_name)\n    return response\n# ################################################################################################################################\ndef", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "          if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "dx = (angles - min_rot_angle) % (2 * np.pi)\nelse:\n    # Find projection of axis on detector\n    axis_proj = _axis_in_detector(ray_trafo.geometry)\n    # Find distance from projection of rotation axis for", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\nclass ProxyManager:\n    def __init__(self):\n        self.proxies = []\n        self.proxy_list = []\n        self.proxy_count = 0\n        self.proxy_enabled = False\n        self.proxy_type = ''\n        self.", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (IsEmpty)\n\t\t\t\treturn String.Empty;\n\t\t\tif (type == FontSize.AsUnit)\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\treturn font_size_names [(int) type];\n\t\t}", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerObj = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerObj.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(innerObj.Properties[1].Key, Is.", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "              for (int w = 0; w < width; w++) {\n                    int index = h * width + w;\n                    if (w > 0) {\n                        edges.add(T2.of(w + \"-\" + (h - 1), w", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "=====================\n\ni1 = iso.Isoelastics(ds, keys=keys, lut_identifier=\"LE-2D-FEM-19\")\n\n# test the isoelasticity data\ndata = i1.get(channel_width=20,", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "      final File file1 = new File(args[0]);\n        final File file2 = new File(args[1]);\n        final LocalTripleStore db1 = new LocalTripleStore(file1);\n        final LocalTripleStore db2 = new LocalTripleStore(file2", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "if __name__ == '__main__':\n    unittest.main()\n# This script is a test script for the alert module. It imports the alert module,\n# creates a test case class AlertTest, and defines several test methods. The test\n# methods test various aspects of the alert", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, ref vao);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tOpenGL.CheckGLError();\n\t\t\t", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "  @property\n    def total_cov_mat(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the total *xy* covariance matrix.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._total_cov_mat\n", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "      return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation of this object\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁  noCanonicalIdAccountIds.add(walrusObject.getOwnerId());\n                } else {\n                  accountIdAccountMap.put(walrusObject.getOwnerId(), owningAccount);\n                }\n              } catch (Exception e) {\n                //", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "          add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public IFolder SelectedFolder\n        {\n            get { return _selectedTreeNode == null ? null : _selectedTreeNode.Folder; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "      ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        command.setImportAsNewEntity(isImportAsNewEntity);\n        command.setName(name);\n        List<ConstraintViolation<ImportVmTemplateCommand>> violations =\n                Valid", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.LeftAttach = ((uint)(1));\n\t\t\tw10.RightAttach = ((uint)(1));\n\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(global::Gtk.AttachOptions.Exp", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] genericParameterTypes, Type[][] requiredCustomModifiers,", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "    return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]\n    public bool HasChannelId {\n      get { return _channelId_ !=", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Returns the index of the vertex in the vertex buffer that corresponds to\n     * the index", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "      if (CmsStringUtil.isEmptyOrWhitespaceOnly(showDateData)) {\n            String[] dateCols = {COLUMN_NAME_DATECREATED, COLUMN_NAME_DATEMODIFIED};\n            for (String dateCol : dateCols) {\n               ", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}\n//  The following code is for the MaterialUI namespace\nnamespace MaterialUI\n{\n\tpublic static class Anim\n\t{\n\t\tpublic static float Qu", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "      Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    #endregion\n  }\n}\n\nThe code above is a partial class of a CommandButton control. The control is a custom button control that has an arrow on the left side of", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n               ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (directions !=", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "          // check if all discount criteria codes are used\n            if (CriteriaCodesUsed.Count != 3)\n            {\n                ValidationColumn = FMainDS.Tables[\"PcDiscount\"].Columns[\"DiscountCriteriaCode\"];\n                VerificationResult = new TScreenVerificationResult", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "              stream.Read (buffer, 0, (int) stream.Length);\n                // Adding file content as byte[]\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __len__(self):\n        \"\"\"Number of requirements\"\"\"\n        return sum(len(v) for v in self._reqs.values())\n\n    def __iter__(self):\n        \"\"\"Iterator over requirements\"\"\"\n        return iter(itertools.chain(*self._reqs", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && (CopyRange || (CurrentDisplaySet != null && CurrentDisplaySet.Count > 0)); }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string ConfigurationDirectory {\n\t\t\tget { return confDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\n\t\t\tget { return cacheDir; }\n\t\t}\n\t}\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "          if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation lineAnnotation = (SourceLineAnnotation) bugAnnotation;\n                if (lineAnnotation.getLineNumber() < 0) {\n                    throw new IllegalStateException(\"Invalid line number: \" + lineAnnotation.get", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "}\nThis code is a base class for food items in Ultima Online. It includes properties for a Mobile that applied a poison to the food, the amount of fill factor the food provides, and an abstract Eat() method that subclasses must override. The code also includes methods for serialization and deserialization", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneClearQ\"))\n                    {\n                        Q.", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "# ----------------------------------------------------------------------\n# Plugin initialization\n# ----------------------------------------------------------------------\nclass DWDPlugin(object):\n    def __init__(self, sh):\n        self._sh = sh\n        self._dwd = DWD(sh, 'dwd_user', '", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "  self.assertEquals(field_model_def, field_def)\nif __name__ == '__main__':\n    run_test_suite(TestParser)", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new object[] {10, \"E1\"});\n                // widen to int\n                var stmtText = \"create window MyWidened as select cast(f1 as int) as NewInt, f2 from MyWidened\";\n                env.Comp", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__itruediv__(other)\n\n    def __itruediv", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "# Now, let's add a new method to the view class to save a view section\n# from a JSON payload.\ndef save_json_view_section(self, cr, uid, view_id, json_payload, context=None):\n    \"\"\" Update a view section from a JSON", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "          value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n        c.putClientProperty(documentBaseKey, null);\n    }\n    /**\n     * Returns the factory for the BasicEditorKit.\n    ", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "s = create(filename, content)\nassert s.content_is_testharness\nassert s.name_is_test\nassert s.name_is_html\nassert s.name_is_non_manual\nassert s.name_is_non_visual\nassert s", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmNamedQuery(namedQueryReference);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmapping.SqlLoader.AddNamedQuery(namedQueryReference);\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer );\n\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "      invocationQueue.pop();\n    }\n    private void popInvocations(int count) {\n        assert count >= 0;\n        maxGraphs -= invocationQueue.size() * InlineInfo.ONE_METHOD;\n        invocationQueue.subList(0, count", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "# self.pytest_command = pytest\n\nI assume you want to assign the value of 'pytest' to self.pytest_command.\nSo, the next line of code should be:\nself.pytest_command = pytest\n\nAlso, you might want to check", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "              if (phi) {\n                    ValueNode phiValue = getCachedPhi(key, value.stamp());\n                    mergePhi(phiValue, value, states);\n                }\n            }\n        }\n        private void mergePhi(ValueNode phi, Value", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "      if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCallSessionEventWithData */\n   ", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic EodonianWallMap(Serial serial) : base(serial)\n\t\t{\n\t\t}\n\t\t\n\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "=====================\n\nThe code above defines two classes, `Record` and `RecordMetadata`, which are used to represent records and their metadata in the SQL database. The `Record` class is a subclass of `db.Model` and has several properties and methods defined, including `id`, `creation", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "  def __getstate__(self):\n        state = self.__dict__.copy()\n        del state['module']\n        return state\n\n    def __setstate__(self, state):\n        self.__dict__.update(state)\n        self.module = self.get_cache()\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n    def __init__(self, msgid, msgstr, fuzzy=False):\n        \"\"\"\n        Constructor.\n        **Keyword arguments**:\n          - *msgid*: string, the msgid.\n          - *msgstr*: string, the msgstr.\n          - *", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "###############################################################################\n# This is the end of the code provided.\n# The following lines are just for testing purposes.\n# They can be removed once the code is integrated into the DIRAC system.\nif __name__ == '__main__':\n  agent = ValidateOutput", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(action.startsWith(PLUGINS_PREFIX)) {\n\t\t\t\t// Allow access to plugins\n\t\t\t\treturn action;\n\t\t\t}\n\t\t\t// Disallow access to any other form\n\t\t\tthrow new CommentException(l10", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "      gsp = yield self.setupGerritStatusPush()\n        result = yield self.run_fake_single_build(gsp, buildResult, False)\n        result = yield gsp.sendReview(result, 'reviewer@example.com')\n        self.assertEqual(", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "  self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'test'\n    self.category.label = 'label'\n    self.category.scheme = 'scheme'\n    self.category.scheme_uri =", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = new HashMap<>();\n            for (Map.Entry<String, AnnotationMirror> e1 : r1.entrySet()) {\n                String key = e1.getKey", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "# Register classes\nclasses = [MATERIAL_PT_preview, MATERIAL_PT_preview_split, MATERIAL_PT_preview_split_custom,\n          MATERIAL_PT_preview_split_custom_custom, MATERIAL_PT_preview", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "          if (_engine.Memory.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.CurrentMapper;\n                Mapper16_IRQWidth = map16.IRQWidth;\n            }\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "          JMenuItem oOpenMenuItem = new JMenuItem(\"Open Document\");\n            oOpenMenuItem.setActionCommand(SOPENDOCUMENT);\n            oOpenMenuItem.addActionListener(oActionListener);\n            _jMnuRoot.add(oOpenMenuItem);\n        }\n        private", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Green Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Blue Bears]\n\t\tAdd(\"Party Quest\",", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = MeasuredHeight;\n\t\t\tint newHeight = 0;\n\t\t\tfor (int i = 0; i < ChildCount; i++) {\n\t\t\t\tView child = GetChildAt (i);\n\t\t\t\tint childHeight", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "=====================\n\n# This is the next line of code that should be added to the file.\n# It creates a new manager for the Announcement model, named 'twitter_manager'.\n# This manager will be used to filter announcements that have been cross-published on Twitter.\nclass Ann", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "#lexers.register_lexer(name='php', filename='*.php', lexer=PhpLexer)\n#lexers.register_lexer(name='php', lexer=PhpLexer)\n# Override the default lexer for .r", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "# The following code is where I'm stuck.  I need to sum the durations for each group\n# and then set the end time for the group to be the start time of the next group\n# I've tried various things but can't get it to work.\n#\n# I", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "# TODO: this is a placeholder for the real code that will be used to update the\n# last_snapshot field in the projects table.\n# db.table('projects').filter(project_id=project_id).update(last_snapshot=timestamp)\n# TODO: this is a placeholder for", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tMsg(\"I'm not involved in any kind of conspiracy.<br/>I don't know what you're talking about.<br/>I'm just a simple shepherd.<br/>I don't have time for that kind of thing.<br/>I'm just here to", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "responses = {}\nWhat should be added to the responses dictionary?\nIt should contain the classes for each response type.\nFor example:\nresponses['ANIDB_LOGIN_ACCEPTED'] = LoginAcceptedResponse\nresponses['ANIDB_LOGIN_FAILED'] = Login", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n    def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nclass HostData:\n    \"\"\"\n    Data about a single host for a single task.\n    \"\"\"\n    def __init__(self, uuid", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "              Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n            finish();\n        }\n    }\n}\nThis code is an Android application that unshortens URLs. It uses the Jsoup", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "# TODO: Add step for checking that primary has only packages and no other items\n# TODO: Add step for checking that primary has only packages and no other items\n# TODO: Add step for checking that primary has only packages and no other items\n# TODO: Add step for checking that primary has only packages and", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\n    def copy_tree (self, src, dest):\n        \"\"\"Recursively copy a tree of files from 'src' to 'dest'.\"\"\"\n        if not os.path.exists(dest):\n            os.makedirs(dest)\n        for name in os.listdir", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[j];\n\t\t\t\tif (InitializeLazyPropertyFromCache(fieldName, entity, session, snapshot", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "#        '-N', job_name,\n#        '-o', log_name,\n#        '-j', 'y',\n#        '-q', 'all.q',\n#        '-l', 'vf=1:mem=1000:h_vmem=1", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "          return View(\"Form\", new DelegateViewModel());\n        }\n        // Add code to handle the POST request for the Add Event Delegate form\n        [HttpPost]\n        [RolesRequired(\"Admin\")]\n        public ActionResult AddEventDelegate(DelegateViewModel model)", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        return string.Format(\"{0} - {1} - {2} - {3}\", ((Circle) obj).Center.X, ((Circle) obj).Center.Y, ((Circle) obj).Radius, ((Circle) obj).Color);\n                    }\n                ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    def download(self, url, postdata=None, headers={}, timeout=None, data=None):\n        \"\"\"\n        Download a file from a given URL.\n\n        :param url: The URL to download the file from.\n        :param postdata: The data to send", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path != null && path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\t/// <summary>\n\t\t/// Determines the location from which to search for harvestable resources.\n\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "      return True\n\nif __name__ == \"__main__\":\n    # This is the old cobbler sync script, which is now deprecated.\n    # It's here for backwards compatibility.\n    # It's not recommended to use this script directly.\n    # Instead, use the", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "      return Event.newBuilder().setSource(source).setSeqNo(seqNo.getAndIncrement());\n    }\n}\nThe code above is an abstract class named AbstractEventProducer which implements the EventProducer interface. It provides shortcut methods for sending messages of different severity types.", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "          for (PpmContext currentContext = context; currentContext != PpmContext.ZERO; currentContext = currentContext.Suffix)\n            {\n                if (currentContext.NumberStatistics == 0)\n                {\n                    if (++stateIndex >= MAXIMUM_ORDER", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "              return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Sequence VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[0]);\n\t\t\tint testID = Convert.ToInt32(tFull[3]);\n\t\t\tint testCount = SqliteTest.Count(sessionID, testID);\n\t\t\tif", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n    def test_delete_bytes_empty(self):\n        o = self.file(b'')\n        delete_bytes(o, 8, 0)\n        self.assertEquals(b'', self.read(o))\n\n    def test_delete_bytes_one", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n<td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X</td>\n    <", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "# TODO: plot the results\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--app', required=True, help='Application name')\n    parser.add_argument('--test', default=VC, help='", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "if __name__ == '__main__':\n    unittest.main()", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRoundRect(x + 1, y + 1, controlSize - 2, controlSize - 2, 2, 2);\n\t\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "def simulateClassifier(self, knn, patternDict, testName):\n    \"\"\"\n    Simulates the KNN classifier on a set of patterns.\n    \"\"\"\n    failures = \"\"\n    numPatterns = len(patternDict)\n    LOGGER.info(\"\\nTesting", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "      mirror.writeElement(elementKind, offset - headerSize(), value);\n    }\n    @HOSTED_ONLY\n    public void writeValue(Accessor accessor, Kind kind, ObjectMirror mirror, int offset, Value value) {\n        assert kind.isPrimitiveOfSameSizeAs(", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "          if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(Parent.GetOutputDirectory(null), \n                relativePath);\n            if (File.Exists(assemblyFile)) {\n              ", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\ndef url_parse(url):\n    \"\"\"\n    Parses a URL into its components\n    \"\"\"\n    parsed = urllib.parse.urlparse(url)\n    return parsed.__dict__\n\n# vim: set fileencoding=utf-8 :\n# vi: set", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "    }\n    }\n  }\n}\nThe code above is incomplete. The next line of code should be:\ni2 = i1 + 1;\nThis line of code is missing in the code snippet provided. The variable i2 is used in the for loop that follows, so", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"  \" + s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "              });\n            #endregion Lucian\n            #region Lux\n            Spells.Add(new SpellData\n            {\n                Name = \"LuxQ\",\n                Slot = SpellSlot.Q,\n                Delay = 0.25f,\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.user@test.com\"));\n\t}\n\tprotected void withCodeList(String codeListName, String codeListValue) {\n\t\tcodelistServiceStub.withCode", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "  @testlib.with_context\n    def test_popen_raises_error_on_non_existent_executable(self, context):\n        context.add_executable('non_existent_executable', None)\n        self.assertRaises(\n           ", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (string.IsNullOrEmpty(configDirectory)) {\n\t\t\t\tconfigDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), applicationName);\n\t\t\t}\n\t\t\tif (string.IsNullOrEmpty(dataDirectory", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//\n\t\t// The following code is used by the designer to initialize\n\t\t// the component. Do not modify the contents of this method with\n\t\t// the code editor.\n\t\t//\n\t\t[EditorBrowsable (EditorBrowsableState.Never)]\n\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n        Dialog.setTabOrder(self.font_size_option, self.line_width_option)\n        Dialog.setTabOrder(self.line_width", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "              return true;\n            }\n            String stationId = wxs.getString( wxs.getColumnIndex( Wxs._ID ) );\n            String name = wxs.getString( wxs.getColumnIndex( Wxs.NAME ) );\n            String city = wxs.getString", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring queryString = \"from Continent c join fetch c.countries\";\n\t\t\t\tint results = s.CreateQuery(queryString).List().Count;\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount);\n\t\t\t\tAssert", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "              uiCRCITTSum = (uiCRCITTSum >> 8) ^ crc_it_table[(uiCRCITTSum & 0xFF) ^ uiByteValue];\n            }\n            return (ushort)uiCRCITTSum;\n        }", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn hasSpeedModule() ? 10 : 5;\n\t}\n\t/**\n\t * @return The block position below this sentry that affects its movement\n\t */\n\tprivate BlockPos getBlockPosBelowThatAffectsMovement() {\n\t\tBlockPos pos", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "          return new IHyperlinkDetector[] {\n                    new JavaHyperlinkDetector() };\n        }\n        IHyperlinkDetector[] detectors = new IHyperlinkDetector[] {\n                new CeylonHyperlinkDetector(controller),\n              ", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "# Create the Object3DAspect and Object3DScale widgets\n# Set their initial values\n# Add them to the layout\n# Set the layout for the Object3DProperties widget\n# Show the widget\n# Create the Object3DPrivateInterface widget\n# Set its layout\n# Add it", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set X\n\t\t\t\t\t{\n\t\t\t\t\t\tint x = info.GetInt( 0 );\n\t\t\t\t\t\ttoSet = new Point2D( x, m_Property.GetValue( m_Object,", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁     for (Object valueChoice : valueChoices)\n                     {\n                        String label = selectConverter.convert(valueChoice);\n                        if (Strings.equalsIgnoreCase(label, Strings.toString(value)))\n                        {\n                           chosenObj = valueChoice;", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++)\n\t\t\t\t\tsb.append(\"\"+k+\"\\t\"+totalWithAmount[i][j][k]+\"\\t\"+fractionWithAmount[i][j][k]+\"\\n", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                ", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\tpublic void AddFaultContract (FaultContract faultContract)\n\t\t{\n\t\t\tThrowIfOpened ();\n\t\t\tfault_contract_infos.Add (new FaultContract", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "      final SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager, ownerId, mode, ownerGroupId);\n        final int testUserId = ownerId + 1;\n        assertFalse(permission.validate(testUserId, Permission.READ));\n    }\n    @Test", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X / viewport.Width, v.Y / viewport.Height);\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn new Vector3 (", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint(XDRUnion):\n    __slots__ = ()\n    members = {\n        XDREnum('key', endpoint_key): endpoint_key,\n        XDREnum('value', endpoint_value): endpoint_value\n    }\n    @classmethod\n    def", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    Console.WriteLine(\"Client \" + i + \" disconnected\");\n\t\t\t\t    RemoveClient(i, m_workerSocketList);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t///", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "          if(type == RequestType.Step) {\n                List<StepBucket> stepBuckets = convertToStepBucketList(list);\n                notifyStepsReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, stepBuckets);\n           ", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "GenerateHelperFunction(1, 1, 'NewSingleCallback', 'void', False)\n  GenerateHelperFunction(1, 0, 'NewSingleCallback', 'void', False)\n  GenerateHelperFunction(2, 1, 'NewCallback', 'void', False)\n  Generate", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\"\"\"\nresponse = HttpResponse(mimetype='application/json')\nresponse['Content-Disposition'] = (\n    'attachment; filename=\"{0}.json\"'.format(filename)\n)\njson_data = []\nfor item in items:\n    json_data.append(", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "              new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(new ServiceNode(\n                        new ConstantNode(searchIV), serviceGraphPattern));\n            }\n        }\n        final IQueryRoot actual = new AST", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n    def dispatch(self, request, *args, **kwargs):\n        self.object = None\n        try:\n            self.object = self.get_object(queryset=self.model.objects.filter(pk=kwargs[\"pk\"]))\n            if not self.object:", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "    get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "          // Start the iterative process\n            int iter = 0;\n            double residual = 0.0;\n            double rnorm = 0.0;\n            double rnormold = 0.0;\n            double rho = 0.0;\n            double r", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "          if reference_set_map[v] != -1:\n                A[focal, reference_set_map[v]] += 1\n                L[focal] += 1\n            v = parent[v]\n        parent[edge.child] = edge.parent", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "  def test_items_to_raw(self):\n        \"\"\"Test whether items are properly indexed in raw index\"\"\"\n        result = self._test_raw_to_enrich(False)\n        self.assertEqual(len(self.ocean_backend.fetch()), result['raw'])", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam && slot.Value.Team != null)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(Order.AddBot(", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" [\" + _rootCause.ToString() + \"]\";\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "# TODO(roasbeef): Implement the WindowUpdateFrame class.\nclass WindowUpdateFrame(Frame):\n    frame_type = FrameType.WINDOW_UPDATE\n    defined_flags = FrameFlag.create_flag_set('RST_STREAM')\n    def __init__(self, stream", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "#endif\n        }\n    }\n}\n\n//The code below is for the debugging purposes only.\n//It sets the debug ids for all nodes and clusters.\n//It should be removed from the production code.\n//namespace Microsoft.Msagl.Core.Layout {\n//   ", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos (m_maxSlopeRadians);\n}\nvoid btKinematicCharacterController::setMaxSlope(float slopeDegrees)\n{\n\tm_maxSlopeRadians = slopeDegrees * bt_PI_", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "      for (ExpressionTree initializer : initializers) {\n            if (canBeLeaked(initializer)) {\n                checker.report(node, \"unique.array.leaked\",\n                        new Object[]{initializer});\n            }\n        }\n        return super.visit", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tN", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t\t_type = typeAttribute.Value;\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the methods associated to this comment item.\n\t\t/// </summary>\n\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = true;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 100;\n\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\n\t\t\twhen(classType.isAnnotationType()).thenReturn(true);\n\t\t\twhen(classType.isInterfaceType()).thenReturn(false);\n\t\t\tdoReturn(Collections.singleton(", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.postdominators != other.postdominators)\n\t\t\treturn false;\n\t\tif (this.dependsOnCutAP != other.dependsOnCutAP)\n\t\t\treturn false;\n\t\tif (this.isImplicit != other.", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "          int min2 = wideLExtent[start][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowR) { // can this left constituent stretch far enough?\n              continue;\n            }\n           ", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "              'rsync', '--archive', '--compress', '--delete', '--exclude=*.pg_xlog',\n                '--exclude=*.pg_wal', '--exclude=pg_hba.conf', '--exclude=pg_stat_tmp',", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "writer.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a color value to the XML-stream.\n\t *\n\t * @param name   Name of the color parameter.", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null ) {\n\t\t\t return false;\n\t\t}\n\t\tif ( !( aThat instanceof Contact ) ) {\n\t\t\t return false;\n\t\t}\n\t\tfinal Contact that = (Contact) aThat;\n\t\treturn ( (", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "  if total_rej > 10:\n      print('Total number of rejected timesteps = %s' %total_rej)\n      sys.exit()\n\nThe code is a multi-body simulation written in Python. It uses the LAMMPS library for the actual simulation", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "      idx = node.op.idx_list\n        if len(idx) == 1 and isinstance(idx[0], (int, long)):\n            # This is a scalar index\n            if cdata:\n                # Check if the scalar index is the same as the constant index\n              ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "=====================\n\ndef add_community(request, admin):\n\"\"\"\nAdd a new community to the system.\n\"\"\"\nif request.method == \"POST\":\nform = AddCommunityForm(request.POST, admin=admin)\nif form.is_valid():\ncommunity", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "```python\nreturn query\n```\n# This is the end of the code. The code above is defining several classes\n# that inherit from the `event.Events` class and define various events\n# that can be listened to in SQLAlchemy. The classes include `InstanceEvents`,\n#", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "# Register the descriptor class with the module store.\n# This is necessary for the module to be loaded by the system.\n# The system will call the class's definition_from_xml method to create\n# a new instance of the class from the xml.\n# The system will call the class'", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "=====================\ndef test_adapter():\n    data = np.random.rand(3, 4, 5)\n    bg_value = np.random.rand(3, 4, 5)\n    adapter = get_adapter(data, bg_value)\n    assert", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && type == null)\n\t\t\t{\n\t\t\t\tif (Method != null || Field != null || Sig != null)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tStatic", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t// ", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "      c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/tags/1.0\"]))\n        self.assertEqual(c.comments", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "      if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> datum : csvData.entrySet())", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\tif(player.capabilities.isCreativeMode) {\n\t\t\t\tif(passiveDecayTicks > 0) {\n\t\t\t\t\tsetPassiveDecayTicks(0);\n\t", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "          intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCase3(Node n", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "if __name__ == \"__main__\":\n    do_upgrade()", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.Close();\n\t\t\tcomputerMgmt = null;\n\t\t\t\n\t\t\t//this.Close();\n\t\t}\n\t\tprivate void menuItemGetStatus_Click(object sender, System.EventArgs e)\n\t\t{", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "  for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Creates an occurrence of the specified event, starting at the specified", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.Bind( DataSource.Component, SourceEventName );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAnd", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "          ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getService(ISwitchManager.class, container);\n            SpanConfig spanConfig = new ObjectMapper().readValue(jsonData, SpanConfig.class);\n            switchManager.addSpanPort(spanConfig);\n", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAlert = new ImageHelper(102101, \"/ims/clinical/images/alert.gif\", new", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "      return rnd.nextInt(size);\n    }\n}", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "  def make_equivalence_annotations(self,\n                                     project_uuid,\n                                     uri_list,\n                                     equiv_uri):\n        \"\"\"\n        Make equivalence annotations for a list of URIs\n        \"\"\"\n        lem = URIManagement", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "          buffer.Append(\"          .shrinktofit= \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergedcell= \")\n                .Append(StringUtil.ToHexString", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katana\n\t\t\t\tbytes[posn++] = (byte) (ch - 0x5B);\n\t\t\t\tbytes[posn++] = (byte) (value >> 8);\n\t\t\t\tbytes[posn++] =", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n# -------------------------------------------------------\n# define FPU instructions\n# -------------------------------------------------------\n\n# FPU instructions are not supported by the TriCore architecture\n# -------------------------------------------------------\n# define FPU instructions\n# -------------------------------------------------------\n\n# -------------------------------------------------------\n#", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties properties = new Properties();\n\t\t\tstream = location.openStream();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap map = new JRPropertiesMap();\n\t\t\tfor (Enumeration<Object> keys = properties.propertyNames();", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "          return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n         *", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd = new CommonSecurityDescriptor (false, false, ControlFlags.None,\n\t\t\t                                   new NTAccount (\"Everyone\"),\n\t\t\t                                   new NTAccount (\"Everyone\"),\n\t\t\t                                   null, null);\n\t\t\tAssert", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "# Here we go!\nresults = []\nfor result in self.queue:\n    results.append(result)\n    self.queue.task_done()\n    self.emit(\"progress\", len(results), len(self.queue))\n    self.__process_results(results)\n", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "      // add all RPCs from all scripts in the scene\n        foreach (GameObject go in FindObjectsOfType<GameObject>())\n        {\n            if (go != null && go.GetComponent<PhotonView>() != null)\n            {\n                foreach (Component component in", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "      if (Config.getBoolean(\"show_message_date\", getActivity())) {\n            full_date.setVisibility(View.VISIBLE);\n            full_date.setText(SimpleFunctions.formatDate(message.date));\n        } else {\n            full_date.setVisibility", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "      # Transform wave function using symmetry operation\n        psit_G = self.symmetry.apply(psit_G, s)\n        if time_reversal:\n            psit_G = psit_G.conj()\n        return psit_G\n    def", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "      CreateUtkastRequest utkastRequest = buildRequest(\"luse\");\n        utkastRequest.setPatientEfternamn(\"Test\");\n        utkastRequest.setPatientPersonnummer(PATIENT_PERSONNUMMER);\n        utkastRequest", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body) {\n\t\t\t\t\tILBasicBlock childAsBB = child as ILBasicBlock;\n\t\t\t\t\tif (childAsBB != null) {\n\t\t\t\t\t\tif (prevChildAsBB != null", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    //if we're not a ragdoll then we'll need to set all the parts to ragdoll\n\t    if (!IsRagdoll) {\n\t\tfor (", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class StratumLayer(GeoLayer):\nWhat should be the next class after FractureLayer?\nThe next class after FractureLayer should be the StratumLayer class. The StratumLayer class is similar to the GeoLayer class, but it is used to represent stratig", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "      out[outOff + 3] = (byte) ((num >>> 24) & 0xff);\n        out[outOff + 2] = (byte) ((num >>> 16) & 0xff);\n        out[outOff + 1] = (byte", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "          super( source );\n            this.objectVariables = objectVariables;\n        }\n        private Map<String, PatternNode> objectVariables;\n        @Override\n        protected Iterator<PatternMatch> createIterator()\n        {\n            return new Iterator<PatternMatch>()\n            {\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "def transform_values_holder_xml_to_json(values_holder_xml, format = None):\n    \"\"\"\n    Transform a values holder XML to a JSON object.\n\n    :param values_holder_xml: An XML element representing a values holder.\n    :param format:", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "          frameToClose = (InternalFrame)buttons.get(btn);\n            if (frameToClose!=null)\n              frameToClose.toFront();\n          }\n        }\n      });\n      btn.addPropertyChangeListener(new PropertyChangeListener() {\n        public void propertyChange", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "# Define the functions that will be called on the server\n# These functions should be defined in the server code\n# and should be decorated with the @zmq.api.export decorator\n# The first argument is the name of the function as it will be called from the client\n# The second argument is", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "  move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int z = 0; z < p.getRasterDepth(); z++)\n    {\n      for (int y = 0", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    ContentValues values = new ContentValues();\n                    values.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, values, Db.Table1.ID_GROUP + \" = \" + deleteId,", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "              m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n        #endregion\n        public IntPtr Pointer\n        {\n            get {", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tif (queue[0].Number > numberToCancel)\n\t\t\t\t\tqueue[0].Number -= numberToCancel;\n\t\t\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    infoText += \" file\" if numberOfFiles==1 else \" files\"\n    infoText += \"<br>\"\n\n    if numberOfHiddenFiles>0:\n        infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n        infoText += \"file", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "      code = re_m4.sub(r'%%\\1%%', code)\n        # replace the variables\n        for x in self.env.get_vars():\n            code = code.replace('%' + x, self.env[x])\n        # write the result\n", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "if __name__ == '__main__':\n    try:\n        PlanningServer()\n        rospy.spin()\n    except rospy.ROSInterruptException:\n        pass\n    except KeyboardInterrupt:\n        print \"Shutting down\"\n        rosp", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] - hdiv0, 1 );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExtent ] + chemical", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "              if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tif (qs.Execute().ReturnValue < 0)\n\t\t\t\treturn false;\n\t\t\tentity.cti_id = Convert.ToInt32(qs.GetParameterValue(\"@cti_id\"));\n\t\t\treturn true;\n\t\t}", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic int PropertyCount\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic string PropertyNames\n\t\t{\n\t\t\tget { throw new NotImplement", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "#\n# Main function\n#\ndef main():\n    argument_spec = dict(\n        key_id=dict(type='int', required=True),\n        auth_mode=dict(type='str'),\n        password=dict(type='str', no_log=True),\n", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "          component = self.store.update_item(component, editing_user)\n            # Verify that the component was updated and that the edit info was updated\n            check_node(component.location, None, None, editing_user, None, None)\n            # Verify that the child was updated", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "      digest.update((byte) (TEXT_CODE & 0xff));\n        updateWith(new String(ch, start, length));\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {\n        digest.update((byte", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "#def mkrange(data):\n#    record = unpack(data, 'range')\n#    start = record['start']\n#    end = record['end']\n#    return (start, end)\n#\n#def mkcomparison(data):\n#    record = un", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "          Type type = api.ActionArguments[0].ParameterType;\n            if (type == typeof(HttpRequestMessage))\n            {\n                type = ResolveHttpRequestMessageType(api);\n            }\n            else if (type == typeof(HttpResponseMessage))\n            {\n              ", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "      elif event.keyval == gtk.keys.Mod1Mask + gtk.keys.K_Return:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "          beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /**\n     * The order of this bean processor.\n     */\n    public int getOrder()\n    {\n       ", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "          lines = f.readlines()\n        finally:\n            f.close()\n    if lines:\n        for line in lines:\n            if len(line.strip()) == 0:\n                module.fail_json(msg=\"Password file contains blank lines\")\n    if state", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "      [In, MarshalAs(UnmanagedType.LPStruct)] IntPtr pUnkEvent\n            );\n        [PreserveSig]\n        int QueueEventParamUnkVar(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.LP", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "      ensureWriteAccess( directedAclKeys.getAclKey() );\n        spm.addPrincipalToPrincipal( directedAclKeys );\n        return null;\n    }\n}", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "      for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element matches what is expected.\n        Arguments:\n        element Element object.\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "=====================\n\nif node.nodeType == Node.ENTITY_REFERENCE_NODE:\n    clone = newOwnerDocument.createEntityReference(node.nodeName)\nelif node.nodeType == Node.NOTATION_NODE:\n    clone = newOwnerDocument.createNotation", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostics, context);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t* Valid", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.Name, endOffset)) {\n\t\t\t\tName name = new Name();\n\t\t\t\tdecodeName(name, decoder);\n\t\t\t\tkeyLocator.setKeyName(name);\n\t", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "      for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update();\n        }\n        \n        //Updates the camera position\n        if(myPlayer.destination.x != destx || myPlayer.destination", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "      action.setColor( color );\n        GameEngine.model().getGame().addJoin( action );\n        hide();\n      }\n    } );\n    m_btnOk.setEnabled( false );\n    hpanel = new HorizontalPanel();\n    hpanel.add( m", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "# Raise an error if the response is not 200 OK\nif r.status != 200:\n    err = json.loads(r.data.decode(\"utf-8\"))\n    if \"status\" in err and err[\"status\"] == False:\n        msgs", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.GetMergedOrderResponse.Order;\n\t\t\t\tfailureReason = null;\n\t\t\t}\n\t\t\tcatch (Exception ex", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "def _find_carbon_sources(model: \"Model\") -> List[Union[\"Reaction\", \"Metabolite\"]]:\n    \"\"\"Identify carbon sources in the model.\n    Parameters\n    ----------\n    model : cobra.Model\n        The model to search for carbon sources in.", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "class Unit(CachedTreeItem, models.Model):\n    \"\"\"A unit of translation, with a source string and a target string.\n    \"\"\"\n    #: The source string.\n    source = models.CharField(max_length=settings.MAX_SOURCE_LENGTH,\n                             ", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n        migrations.AddField(\n            model_name='academiccenter',\n            name='state',\n            field=models.ForeignKey(to='events.State'),\n        ),\n\n        migrations.AddField(\n            model_name='city',\n            name='state',", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "# start here\ndef main():\n    # Initialize logging\n    logging.basicConfig(format='%(asctime)s %(name)s:%(lineno)d %(levelname)s %(message)s', level=logging.INFO)\n    # Initialize OpenFlow controller", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "  if (m_IgnoreChanges)\n      return;\n\n    if (m_RecentItems.size() >= m_MaxCount) {\n      m_RecentItems.remove(m_MaxCount);\n    }\n    m_RecentItems.add(item);\n   ", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "          if (src.FightMode == FightMode.Aggressor || src.FightMode == FightMode.PassiveDefensive || src.FightMode == FightMode.Defensive)\n                return true;\n            return false;\n        }\n    }\n}\nI", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "      if (halfTradePeriodDate == null && takeOfferDate != null) {\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod() / 2);\n        }\n        return half", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompSyncSets(Node p, BitArray set) {\n\t\tif (p == null) return;\n\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)(size >> 4);\n\t\t\tWriteAsync(buff);\n\t\t\tif(!WaitForData())\n\t\t\t\tthrow new WiimoteException(\"Error reading data from Wiimote\");\n\t\t\treturn mReadBuff;", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = (order == SortOrder.DESCENDING) ? -1 : 1;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "          for (int j = N1 + N2 + 1; i < N_INDEXES; i++, j++)\n            {\n                _indx2Units[i] = j & 0xff;\n            }\n        }\n    }\n}\nThe code above is", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "# class ComputeRateCollection(BaseCollection):\n#     ENTITY = ComputeRate\n#     RATE_TYPE = 'Compute'\n#     def __init__(self, *args, **kwargs):\n#         super().__init__(*args, **kwargs)\n#         self", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.WriteData( offset, length, src, discardWholeBuffer );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new AxiomException(", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.scan_sat = buildTerTransponder(self.orbital_position, self.satfinder_scan_nims.value)\n\t\tself.scan_sat_list = [self.scan_sat]\n\t\tself.scan_satselection = getConfig", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "          else {\n                String[] filters = filterStr.split(\",\");\n                for (String filter : filters) {\n                    String[] parts = filter.split(\":\");\n                    if (parts.length != 2) {\n                        throw new IllegalArgumentException(\"Invalid filter format", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "              // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the decoded row to the previous row\n                Array.Copy(curr, 0, prior, 0, bytesPerRow);\n", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "      s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('com.example.Interface'))\n        s.set_interface", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def __call__(self, x):\n        \"\"\"\n        This is the main function that is called when the MASS object is\n        instantiated.  It sets up the database and the resolution.\n        \"\"\"\n        self.make_resolution()\n        self.make_database", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "          AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"optional_group.nosuchfield\\\".\",\n                \"optional_group.nosuchfield: 123\");\n", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\tfinal Object old = map.remove( key );\n\t\treturn old;\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal Iterator it = m.entrySet().iterator();", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member deleting an auction\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\nclass HrAttendance(models.Model):\n    _inherit = 'hr.attendance'\n\n    def attendance_action_change(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns the new attendance record.\n        \"\"\"\n        self.ensure_one()\n", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = null;\n\t\tif (orderInvestigationLiteVo.getOrderSpecimenIsNotNull())\n\t\t{\n\t\t\tparentRow = form.grdResults().getRows().get(form.grdResults().getRows().indexOf(find", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "              pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// Set the position of this item.", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "      terminal = maker.new_terminal(self, cwd, profile, debugtab)\n        self.add_terminal(terminal)\n        self.show_all()\n        self.terminator.last_active_window = self.uuid\n        self.terminator.emit", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    toReturn.Add( new StructTypeInfo( nameArraySizeFragment, managedType, marshalAttribute, arraySize ) );\n                }\n            }\n            return toReturn;\n        }\n    }\n    public class StructInfo\n    {\n        public StructInfo( string name,", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type == null || base_type.IsValueType;\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsByRef {\n\t\t\tget { return false; }\n\t\t}\n\t\tpublic override bool IsPointer {\n\t\t", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "              throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}\n//What is the next line of code?\n//The next line of code should be:\n//throw new Exception(\"Could not find model: \"", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n    self.context = OpenSSL.SSL.Context(\n        _openssl_versions[protocol],\n        self._get_verify_callback(),\n        self._get_ciphers(),\n    )\n    self.context.set_options(OpenSSL.SSL.OP_NO", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.LabelProp = global::Pango.AttrList.Empty;\n\t\t\tthis.label8.UseMark", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "# headbook.connect(\"page-reordered\", page_reordered)\n\n# The following code is for the tab order of the notebooks\n# It is not needed for the current version of PyChess\n# It is left here for reference\n#\n# def page_reordered (not", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "  \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Close-all-tabs\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_W),\n    \"Close-all-tabs-", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\"\n\t\t\t\t+ this.persistenceProviderClassName + \", transactionType=\" + this.transactionType\n\t\t\t\t+ \", nonJtaDataSource=\" + this.", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "  IEditorInput editorInput = getEditorPart().getEditorInput();\n    if (editorInput instanceof IFileEditorInput)\n    {\n      IFileEditorInput fileEditorInput = (IFileEditorInput)editorInput;\n      return fileEditorInput.exists() && !fileEditorInput.", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(732, 12);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(32", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "      if (sb != null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n}\n\n// The code above is incomplete, it is missing the last part of the encode method.\n// The missing", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-TC1-Legacy\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4122_TestVector1 ()\n\t\t{\n\t\t\tbyte[] key", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(EnumSwitcher.option_1.ordinal()) {\n\t        case 0:\n\t            current_sum += 4;\n\t            break;\n\t        case 1:\n\t            current_sum += 4;\n\t            break;\n\t        case", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "      return null;\n      String jdk = java.GetValue(\"InstallRoot\").ToString();\n      if (jdk == null)\n        return null;\n      return jdk;\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "  comment = l\n    if job is not None:\n        if l.split()[1] == job:\n            return [comment, l]\n    return []\n    def find_env(self, name):\n        for l in self.lines:\n            if re.match(r", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# Mesh Modifiers\n# -------------------------------------------------\n# old - remove after recreating meshes through import\n# -------------------------------------------------\nmodifiers = {\n    'SUBSURF': MeshModifierSUBSURF,\n    'DATA': MeshModifierDATA,\n", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "          double[] likelihoods = new double[totalBuckets];\n            for(int i = 0; i < totalBuckets; ++i)\n            {\n                double rankBucket = mScoreRankBuckets.get(i);\n                int rankCount = rankCount", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "      for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n       ", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\nif __name__ == \"__main__\":\n    pydump = Pydump()\n    args = pydump.arguments()\n    if args:\n        if args.inspect:\n            inspect = Inspect()\n            inspect.prompt(pydump.sniffer(iface", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "          this.rptComboBox.Location = new System.Drawing.Point(91, 120);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(200,", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "          'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),\n            'document': ('main.Document', [], {'related_name': \"'scans'\", 'to_", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "              // If the type is not defined in the schema, and we're not processing imports,\n                // then throw an error.\n                if (!isImportProcessor()) {\n                    throw SDOUtil.createTypeNotFoundException(targetNamespace, sdoTypeName);\n               ", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "      self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_refuse(self, cr, uid, ids, context=None):\n        self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "          set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets the number of columns in the grid\n        /// </summary>\n        int IBOColSelector.NoOfColumns\n        {\n            get { return this.Columns.Count; }\n       ", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "          return String.Format(\"{0} ({1}): {2} ({3}): {4} ({5})\",\n                this.Name,\n                this.ShortName,\n                this.TypeDescription,\n                this.TargetName,\n                this.Ch", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainFactory.getDomainObject(valueObject.getCareContext().getClass(), valueObject.getCareContext().getID(), valueObject.getCareContext().getVersion());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "          [\"cargo\", \"build\"],\n            cwd=self.get_project_dir(),\n            env=env,\n            args=opts)\n        if status:\n            return status\n        if android:\n            # Build the APK\n            with cd(self.get_project", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double[] { 0, n }, false));\n\t\t}\n\t}\n\t/**\n\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "              Stashed.SetStashDiffs(gitStash.Revision, gitStash.Revision, ResourceManager.Strings.Stash, gitItemStatuses, null, null, null);\n            }\n            Loading.Visible = false;\n            Loading.IsAnimating", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "# print out the addresses of the beam monitors:\nst_AssignAddressItem_print_out(\n    st_AssignAddressItem_are_equal,\n    lattice.cbuffer.get_object(bm0_index),\n    lattice.cbuffer.get_object(bm1_", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "      if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.match(that) > 0;\n    }\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(\"AddInt\", asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += PaneldatenDto.getPaneldaten().getLsTrennzeichen()\n\t\t\t\t\t\t\t\t.get(0).getCBezeichnung", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "# Load the archive index\nif __name__ == '__main__':\n    archive_index = load_archive_index(args.index_file)\n    args.func(archive_index, args)\n    sys.exit(0)", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "      self.mosi_bits = self.parse_bits(mosi)\n        self.ss, self.es = ss, es\n        self.samplenum += 1\n        # TODO: Handle the 'DATA' packet.\n        # TODO: Handle the 'CMD' and '", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "        cursor = limit - v_3;\n          if (cursor >= limit) {\n            break lab1;\n          }\n          cursor++;\n        } while (false);\n        // call RV, line 201\n        if (!r_verb_stemmer()) {\n", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "              o = cls.newInstance();\n                dins.readFully(o);\n                if (cd == null) {\n                    cd = new ChannelData(channel, cls, fingerprint, msg_size);\n                    channelMap.put(channel, cd);\n", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "  def _get_key_usage(self):\n        result = []\n        for usage in self.cert.get_extension(X509_EXTENSION_KEY_USAGE):\n            result.append(to_text(usage, errors='surrogate_or_strict", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (i != _slots.end());\n\t\t\t}\n\t\t\tif (still_there) {\n\"\"\", file=f)\n    print(\"\\t\\t\\tif (v) {\", file=f)\n    print", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "# The following code is the original code, which is to be extended.\n# It is assumed that the state machine is represented as a dictionary\n# where the keys are the state indices and the values are the states.\n# The states are represented as a dictionary where the keys are the\n# transitions and the", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = la.pos; int col = la.col;\n\t\t\twhile (StartOf(11)) {\n\t\t\t\tif (StartOf(12)) {\n\t\t\t\t\tGet();\n\t\t\t\t\tif (t.kind ==", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n#\n#    OpenERP, Open Source Business Application Suite\n#    The OpenERP Project: http://www.opener", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS+\"/ssl\");\n\t\treturn new ServiceDescription(\"_openhab-server-ssl._tcp.", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "              permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testVirtualPermissionServiceExtension() throws Exception\n    {\n       ", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "# Here you can add your test cases for the Enumerator class.\n# Each test case should start with the name of the test and\n# should be a method of the TestEnumerator class.\n# For example:\n# def test_match_subsystem(self, context):\n#    ", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "# Initialize device\ndevice = Device(deviceToken)\n# Initialize user\nuser = user.newUser(loginId, password)\n# Login\ndata = user.login()\n# Check inspection\ndata = device.check_inspection()\n# Notification\ndata = device.notification_post", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "# Parse the command line arguments.\nargs = docopt(__doc__)\n# Set up the observatory.\nobserver = ephem.Observer()\nobserver.date = args['--date']\nobserver.lon = args['--longitude']\nobserver.lat = args['--", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "          ItemID = 0x1011 + (int)Resource;\n        }\n        private class InternalTarget : Target\n        {\n            private KeyRing m_Owner;\n            public InternalTarget(KeyRing owner)\n                : base(1, false, TargetFlags", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "      for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String deviceName = iter.next();\n            String ipAddress = ipAddressMap.get(deviceName);\n            int model = liveModelMap.get(deviceName);\n            Tuner tun", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "  if (lastSeenVersion < Version.USER_NOTIFICATIONS) {\n      jobs.put(Version.USER_NOTIFICATIONS, new UserNotificationsMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAYDREAM_MIGRATION) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "    List<Pattern> regex = new ArrayList<>();\n      for (String regexString : split[0].split(\"\\\\s+\")) {\n        regex.add(Pattern.compile(regexString, ignoreCase ? Pattern.CASE_INSENSITIVE : 0));\n      }\n      String type", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "      for p in path:\n            if os.path.exists(os.path.join(p, n)):\n                return os.path.join(p, n)\n            # try the sub-path\n            if sub_path:\n                for p in path:\n                ", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "# Mapnik Python bindings are generated using SWIG.\n# The following lines are generated by SWIG and should not be modified.\n# They are included to make the Python module complete.\n#\n# The following lines are generated by SWIG and should not be modified.\n# They are included to", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "# Initialize the Ansible module\nmodule = AnsibleModule(\n    argument_spec=f5_argument_spec(\n        name=['name'],\n        state=['state'],\n        parent=['parent'],\n        ip=['ip'],\n        port=['port'],\n", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "=====================\nclass MethodAddView(AutomateExplorerView):\n    title = Text('#title')\n    # ...\n    def open(self, **kwargs):\n        navigate_to(self, self.context['manageiq_provider'], 'Automate', 'Methods')\n", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "          throw new Exception(\"ActionFactory: getActionObject: \"\n                    + \"Action class not found: \" + className);\n        }\n        return result;\n    }\n    public void executeAction(String actionName, Object[] args) throws Exception {\n        IAction action = getAction", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "=====================\n\n    def test_update_thread_no_body(self, mock_request):\n        self._test_request_error(\n            \"update_thread\",\n            {\"thread_id\": \"dummy\", \"course_id\": self.course.id},\n            {\"", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "# if not msvc_exists(env, 'manifesttool.exe'):\n#     raise SCons.Errors.SConsError('manifesttool.exe not found')\n#     return\n#     return\n#     return\n#     return\n#     return\n#    ", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "          ISchedulingRule rule = getSchedulingRule();\n            Job job = new Job(\"\") { //$NON-NLS-1$\n                @Override\n                protected IStatus run(IProgressMonitor monitor) {\n                    try {\n                        errorStatus[0]", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t// Allocate output row meta\n\t\tdata.outputRowMeta = new RowMetaClone(getInputRowMeta());\n\t\tmeta.getFields(data.outputRowMeta, getStepname(), null, null, this);\n\t\t\n\t\treturn super.init(smi", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "```python\nassert f('..', last_rounded_fwd) == (last_rounded_fwd, last_rounded_fwd)\n```\nThis line of code asserts that the function `f` returns the same `last_rounded_fwd` as", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "          int walkingrange = Utility.ToRange(Utility.ToInt32(swalkingrange), 0, 255);\n            int homerange = Utility.ToRange(Utility.ToInt32(shomerange), 0, 255);\n", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "def test_qemu_suspend_resume(test, params):\n    \"\"\"\n    Test qemu suspend and resume functionality.\n    \"\"\"\n    # Set up the test object\n    suspend_test = GuestSuspend(test, params)\n    try:\n        # Check whether the guest", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "      service.submit(pub);\n        service.awaitTermination(30, TimeUnit.SECONDS);\n        int received = rc.get();\n        System.out.printf(\"Received %d messages%n\", received);\n        service.shutdown();\n    }\n}\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "          if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(r, destination, res);\n            }\n            this.owner.getDecorator().", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tuint compressedSize = 0;\n\t\t\tif (value <= 0x7F)\n\t\t\t\tcompressedSize = 1;\n\t\t\telse if (value <= 0x3FFF)\n\t\t\t\tcompressedSize = 2", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "      self.fm.execute_console_command(\n            \"arj\",\n            \"x\",\n            *[one_file.path] + au_flags,\n            callback=refresh)\n\n        self.fm.env.copy.extend(copied_files)\n        self", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringString_ConstructorFlag ()\n\t\t{\n\t\t\tType type = typeof (COMTest);\n\t\t\tConstructorInfo constructor = type.GetConstructor (new Type[] { typeof (int) });\n\t\t\tobject[] args", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "  def testOneOldAndOtherNew(self):\n        da = Locale.objects.get(code='da')\n        de = Locale.objects.get(code='de')\n        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "          self.Log.debug(\"Updating userstate for user %i\", userstate.session)\n            self.send_message(PYMUMBLE_MSG_USERSTATE, userstate)\n            cmd.response = True\n            self.commands.answer(cmd)\n        elif cmd", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "      PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.setLeader(player);\n        }\n    }\n    public static PlayerGroup getGroup(int teamId) {\n        return groups.get(teamId);\n    }", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\ndef test_vltable():\n    \"\"\"\n    test vltable\n    \"\"\"\n    logger.debug(\"test_vltable\")\n    # create a table\n    table = vltable(\n        formatter=\"Terminal\",\n        outfile=sys.stdout,\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "  def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_renderer", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t}\n\twhile (parent instanceof Grid);\n\t((Grid) parent).addColumn(column);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "              Image = new CreatureImage(this);\n            } catch (Exception ex) {\n                throw new Exception(\"Error loading creature \" + Convert.ToString(GUID) + \":\\n\" + ex.Message);\n            }\n        }\n        private void ParseStatus(InventoryEntry", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\telse if ( m_Peerless == PeerlessList.MelisandeTrammel || m_Peerless == PeerlessList.MelisandeFelucca )\n\t\t\t\t\t\tm_key[i] = new MelisandeActiv", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "Version(1, new int[]{1, 1, 1, 1, 1, 1, 1, 1},\n        new ECBlocks(1, new ECB(1, 21)),\n        null, null, null),\nVersion(2, new int[]{", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pbOut = kdf.DeriveBytes(pbMsg, p);\n\t\t\tif(!MemUtil.ArraysEqual(pbOut, pbExpc))\n\t\t\t\tthrow new Exception(\"Argon2d: Test vector 1 failed\");\n#endif\n\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\tfloat discount = 0F;\n\t\tfor(int i = 0; i < 4; i", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Add your custom middleware classes here.\n#MIDDLEWARE_CLASSES += (\n#    'path.to.your.middleware.class.Name',\n#)\n# Add your custom template tags here.\n#TEMPLATES = [\n#    {", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "      if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList != null))\n                return false;\n        } else if (!this.actionTraceList.equals(other.actionTraceList))\n            return false;\n        if ((this.screensh", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "          dc.number = PhoneNumberUtils.parse(p.readString(), null);\n            voiceSettings = p.readInt();\n            dc.callType = voiceSettings & RIL_CALL_TYPES_MASK;\n            dc.dataCallId = voiceSettings >> RIL_CALL_", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "          for (int x = 0; x < xSizeP; x++)\n            {\n                int index = y * xSizeP + x;\n                newVertices[index] = new Vector3(x + leftBottomCorner.x, y + leftBottomCorner.", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_METHOD_ADD, testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tresult = ((Integer) rawResult).intValue();\n\t\t\t\t\n\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void addC", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "          out.writeBoolean(false);\n            out.writeUTF(\"Object not found\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeInt(found.identifier);\n        }\n        out.flush();\n        out.close();\n        in", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        16 + (~stactics.stactics_display_buffer[i] & 0x0f),\n                        16,\n                        pixel_x, pixel_y,\n                        Machine.drv.gfxdecodeinfo[0],\n                        TRANSP", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                    .Distance(position) <= spell.Width &&\n                                    minionPrediction.CastPosition.To2D()\n                                        .Distance(position) <= spell.Width)\n                                {\n                                    result.Add(target);\n                                    break;", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "      return existsInducingPathInto(x, y, graph, new HashSet<>());\n    }\n    public static boolean existsInducingPathInto(Node x, Node y, Graph graph, Set<Node> visited) {\n        if (x.getNodeType() != NodeType.", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if (pop[i] is Drawable)\n                        plcs.Push(pop[i] as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Initialize the element.\n        /// </summary>\n       ", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "      if (this.attachmentFile == null && other.attachmentFile != null) {\n            return false;\n        }\n        if (this.attachmentFile != null && other.attachmentFile == null) {\n            return false;\n        }\n        if (!StringUtils.equals(this.", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (mobiles[i] != from && mobiles[i].Alive && SpellHelper.CheckToxic(from, mobiles[i]))\n                            AOS.Damage(mobiles[i], from, m_Item.GetDamage(), 0, ", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t\t{\n\t\t\t\t\tHistory.OrderByDescending(kv => kv.Value.Time).First().Value.Dis", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "  return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public List<ComponentInstLight> getAvailComponentInstLights(String userId, String componentName,\n          String spaceId) {\n    return mock.getAv", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog2 = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog2.show(", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "      if (this.channel != null && this.channel.isOpen()) {\n            this.channel.close();\n        }\n    }\n    public void close(IChatBaseComponent ichatbasecomponent) {\n        if (this.channel != null && this.channel.isOpen())", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "              z_arr[p_index, kk, :] = z_dict[z_key][per][:]\n                z_err_arr[p_index, kk, :] = z_dict[z_key][per][3:]\n            for t", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "    return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany, recipients.size());\n  }\n}\nThe code above is incomplete, and I would like you to complete it by adding the missing line of code and any necessary imports. The missing", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "      env[\"PATH\"] += os.pathsep.join(extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] += os.pathsep.join(extra_lib)\n        if self.config[\"tools\"][\"ccache\"]:\n            env", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "def load_manifest(tests_root, url_base=\"/\"):\n    \"\"\"Loads a manifest file from the given directory.\"\"\"\n    manifest = Manifest(url_base)\n    tree = []\n    for root, dirs, files in os.walk(tests_root):\n       ", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "      compiledScript = null;\n    }\n    private Binding createBindingForCompilation() {\n        final Binding binding = new Binding();\n        binding.setVariable(\"node\", null);\n        binding.setVariable(\"out\", new PrintStream(System.out));\n        binding.", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "          throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\nclass AtomicMoleculeTransformer(Transformer):\n  \"\"\"\n  TODO: Implement transformation for atomic molecules.\n  \"\"\"\n  def __init__(self, dataset, transformer_fn):\n    \"\"\"\n    Initializes a transformer for atomic molecules.\n    \"\"\"\n", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo) obj;\n\t\tif (this.id == null && other.id != null)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tif (this.", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "      assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n    @Test\n    public void shouldFindAllStacks() throws Exception {\n        updateAll();\n        final List<StackImpl> found = stackDao.searchStacks(null, Collections.", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "      Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterCode(\"DEPTH\");\n        depthParameter.setParameterFamily(pf);\n        depthParameter.setValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION_REGEXP\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// If the pattern is a single node, then the candidate must be that node\n\t\t\tif (pattern.IsLeaf)\n\t\t\t\treturn candidate.IsLeaf && candidate.Equals(pattern);\n\t\t\t// If the pattern is a list, then the candidate", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "              if (colisionList.Any())\n                {\n                    extendedFarmLocation = colisionList.First().Position;\n                    extendedWillHit++;\n                }\n                }\n                int shortenWillHit = MinionManager.GetMinions(q.", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(contextMenus);\n\t\t// Controls\n\t\tsuper.addControl(factory.getControl(ctnContractDetailsContainer.class, new Object[] { control, new Integer(startControlID.intValue()), new Integer(startTabIndex.intValue", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "@task\n@timed\ndef install_python_prereqs():\n    \"\"\"\n    Install Python prerequisites.\n    \"\"\"\n    if no_prereq_install():\n        print(NO_PREREQ_MESSAGE)\n        return\n    # Install Python packages\n", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "          'subs': [(6, 0, [self.env.ref('test_testing_utilities.sub1').id])]\n        })\n        f = Form(r, view='test_testing_utilities.o2m_parent_readonly')\n        with", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "  assert simplify(Sum(x, (x, a, b)) + Sum(x, (x, b, a))) == Sum(x, (x, a, b))\n\n    # This test case is wrong, it should be:\n    assert simplify(Sum(x,", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=UnityEngine", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "              this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeRemove(action, changedItems, startingIndex);\n            }\n        }\n        private void InitializeRemove(NotifyCollectionChangedAction action, IList oldItems,", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "          String xml = writer.toString();\n            InputSource inputSource = new InputSource(new StringReader(xml));\n            XMLStreamReader xmlStreamReader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();\n            xmlStreamReader.setContentHandler(new XMLStream", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.CampusType = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  Width: {0}\", ide.width);\nConsole.WriteLine (\"  Height: {0}\", ide.height);\nConsole.WriteLine (\"  ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"  Planes: {0}\", ide.planes", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "              // adds a JSR block to the successor of the RET blocks in the subroutine\n                for (Label successor = l.successor; successor != null; successor = successor.successor) {\n                    if (successor.status & Label.RET)", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "          ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method, __mStack);\n            UnityEngine.Ray instance_of_", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.select(position.equals(Position.INSIDE) ? 0 : 1);\n\t\t\tlblLabelPosition.setText(\"Label Position: \" + position.name());\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {\n\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "      currImageValue = self._getCurrentImageValue(driver)\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImageValue)-1, \"", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "=====================\n\nclass KexGSS(object):\n    \"\"\"\n    This class implements the GSS-API key exchange method as defined in RFC 4254.\n    \"\"\"\n    def __init__(self, transport):\n        self.transport = transport\n        self.", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "          FileSystemNodeManager nodeManager = FileSystemNodeManager.getInstance();\n            FSTree tree = nodeManager.getTree();\n            DefaultMutableTreeNode parentNode = null;\n            if (disableTreeSelection) {\n                parentNode = tree.getRoot();\n            } else", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "              self.cr.execute(\"SELECT sum(number_of_days) as number_of_days, sum(number_of_hours) as number_of_hours\\\n                            FROM smart_salary_payslip as hp, hr_payslip", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "  mf, dlnm = halo_model.mass_function(lnMassSigmaSpl, chiarr, dlnm, zarr, Ns, constk, cosmo, mmin=mmin, mmax=mmax, nmax=nmax, nmin=n", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "      d.height = font.getSize() + getSettings().getLineHeight();\n        return d;\n    }\n    @Override\n    public void setText(String text) {\n        super.setText(text);\n        setSize(getBounds().width, getMinimumSize().", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "#self.cal_point_in_fit(theta=theta,phi=phi)\n#self.cal_point_in_fit(theta=theta+theta_res,phi=phi)\n#self.cal_point_in_fit(theta=theta,phi=phi+phi", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void SecuritiesButton_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "=====================\n\nclass _Hist3D(Hist):\n    def __init__(self, *args, **kwargs):\n        if kwargs.get('bins', None) is None:\n            bins = [args[i][:2] for i in xrange(3)]\n", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "          RosterItem rosterItem = RosterHelper.getRosterItem(contact, protocol);\n            if (rosterItem != null) {\n                RosterHelper.updateRosterItem(rosterItem, protocol);\n            }\n        }\n    }\n}\n\n//", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "      im1L = im1.convert(\"L\", rgb2I)\n    else:\n        im1L = im1\n    h1 = im1L.histogram()\n\n    #compute transform\n    x = arange(0, 256, 1)", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tif (tag.canDoIt()) {\n\t\t\t\ttag.write(sfi, new byte[] { 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "=====================\n\nclass ACEParser(Parser):\n    def __init__(self):\n        Parser.__init__(self)\n        self.current_size = 0\n        self.blocks = []\n        self.current_block = None\n\n    def parse(self, data", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter.removeCommAdapterByteListener(this);\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "\n        path_info = environ['PATH_INFO']\n        for prefix, app in self.apps:\n            if path_info.startswith(prefix):\n                return app(environ, start_response)\n        raise NotFoundError(path_info)\n\n# vim", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.train()\n\t\tmodel.savemodel( sys.argv[ 3 ] )\n\telse : print \"Usage : python %s <datafile> <outputmodel", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "          if (Utility.RandomDouble() < (double)chance / 100.0)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n\nI'm trying to", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "\n        entries[entry_name] = entry_value\n\n        return type(type_name, (rdltypes.UserEnum,), {'values': entries})\n\n#-------------------------------------------------------------------------------\n#-------------------------------------------------------------------------------\n#-------------------------------------------------------------------------------\n#----------------", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    MessageBox.Show(\"Unable to find any modules to configure.\");\n                    this.Close();\n                }\n            }\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (isQuiet())\n            {\n              ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "              object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "              if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(this.textureArray[textureHash] != null)\n                {\n                    if(this.currentTexture != null && this.currentTexture != this.textureArray[", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "@login_required\n@handle_500(template_path='error_pages/500.html')\ndef my_view(request):\n    # Your view code here\n    pass\n# This is a sample decorator that can be used to add a custom header to the response", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Driver driver = idlePool.Dequeue();\n                    if (now.Subtract(driver.IdleSince).TotalMinutes > Settings.IdleConnectionTimeout)\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "  return [var]\n\n\n# This is the line that is causing the error\n# return [var] if len(var) == 1 and name in ('resolution', 'radius') else var\n\n\ndef _verify_list(var, length, name):\n    \"\"\"Ensure", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "# Register the quest\n# This line is needed to register the quest in the game.\n# It will be read by the game server and makes the quest available.\n# Do not change or remove it.\n# Register the quest\n# This line is needed to register the quest in the game.\n#", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60 * 60 - (double)num1 * 60) % 60);\n\t\t\t\t\tempty = string.Format(\"{", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "          // Initialize the shader program\n            Program = GL.CreateProgram();\n            GL.AttachShader(Program, GL.CreateShader(ShaderType.VertexShader,\n                System.IO.File.ReadAllText(\"VertexShader.glsl\")));\n            GL.AttachShader(", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\n    def __getitem__(self, key):\n        \"\"\"Return a reaction, metabolite, or gene by id\"\"\"\n        if isinstance(key, int):\n            if len(self.reactions) > key:\n                return self.reactions[key]\n            elif len", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(ims.clinicaladmin.vo.beans.TumourGroupListVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(TumourGroupListVo.buildFromBean(bean));\n\t\t}\n\t\treturn coll;\n\t}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent = lines[selectedLine];\n\t\t\t\twhile(foundBottom){\n\t\t\t\t\tfoundBottom = false;\n\t\t\t\t\tfor(int i=lines.length-1; i>=0; i--){\n\t\t\t\t\t\tif", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "      new LayoutAnimationController(set, 0.2f);\n        mListView.setLayoutAnimation(controller);\n    }\n\t\n\t/**\n\t * Fill the list with data.\n\t */\n\tprivate void fillData() {\n\t\tmListView.setEmptyView", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "              if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.SetFieldKey(HighestNumber + 1);\n        }\n", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.ssToInt(protein.getStructure()[i]) != Mappings.indexUnknown)\n\t\t\t{\n\t\t\t\tInstance instance = this.", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
