{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tMobile m = p.", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tself._init(graph)\n\t\t\tgraph = self.graph.copy()\n\t\t\tself.graph = graph\n\t\t\tself.Y = Y_\n\t\t\tself.Z = Z_\n\t\t\tself.A = A\n\t\t\tself", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "if __name__ == '__main__':\n    TestSndfile.main()\n    TestSeek.main()\n# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4\n# End of file", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def get_video_info(self):\n        \"\"\"\n        Get the video title, speaker name, location and date.\n        \"\"\"\n        self.open_video_page(self.video_id)\n        title = self.get_video_title()\n        speaker = self", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t\twriter.addAttribute(\"label\", styleValue.getLabel());\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n    def __init__(self, question, category, id):\n        super(_QuestionData, self).__init__()\n        self.question = question\n        self.category = category\n        self.id = id\n        self.type = \"question\"\n\nclass _AnswerData", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    mob.Target = new SR_TargetLocation(RuneAcc, mob);\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc,", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "          for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n        }\n        s.println(\"***\");\n    }\n}\n/*\n * ServerHelloDone\n */\nstatic class ServerHelloDone extends HandshakeMessage {", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "          try {\n                sp = new JESpace (name, path);\n                spaceRegistrar.put (name, sp);\n            } catch (SpaceError e) {\n                warn (e);\n                return null;\n            }\n        }\n        return sp", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tRedButton btnImpose = new RedButton(Messages.get(this, \"impose\")) {\n\t\t\t\t@Override\n\t\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "# Create a dispatcher and a server\ndispatcher = SoapDispatcher()\nserver = HTTPServer(('localhost', 8000), WSGISOAPHandler(dispatcher))\n# Register a SOAP service\ndispatcher.soap_service('MyService')\n# Register a SO", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "  def lock_status(self, status_id):\n        self.webview.lock_status(status_id)\n\n# This is the code that needs to be completed\n# The lock_status method is called when a status is being replied, quoted, marked as favorite, deleted, etc", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "def get_process_data(self, method_name, params):\n    \"\"\"\n    Get data from process\n    :param method_name:\n    :param params:\n    :return:\n    \"\"\"\n    self.logger.info(\"Getting data from process: %s\", method", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsInstanceOf<ZoneIdentityPermission> (c);\n\t\t\tAssert.IsNotNull (c);\n\t\t\tAssert.IsFalse (c.IsSubsetOf (a", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "# This is the main function that sets up the SSLContext and returns a socket\ndef create_ssl_context(keyfile, certfile, cafile, ciphers=None):\n    context = _get_ssl_context(keyfile, certfile, cafile, ciphers)\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "      DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "      self.__tmp_dir, 'datastream.pipe')\n        self.__datastream_transport, self.__datastream_protocol = await self.__server.create_datastream_connection(\n            self.__datastream_address, self.__event_loop)\n        self", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1 && store.GetValue(iter, 10).ToString().Equals(\"\")) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, 0).ToString());\n\t\t\t\t\t//get the", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "      String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] != null) {\n                String argName = args[i].getName();\n                Object argValue =", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}));\n\t\tprivate ConfigFile configFile;\n\t\tprivate ConcurrentMap<String, Object> data;\n\t\tprivate ConfigFile getConfigFile() { return configFile; }\n\t\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new FontFieldEditor(FONT_NAME, \"Font name\", getFieldEditorParent()));\n\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "              if (m_Owner.CheckSequence())\n                {\n                    m_Owner.Target(m_Owner.SpellTarget);\n                }\n                base.OnTargetFinish(from);\n            }\n        }\n        private class InternalTarget : Target\n        {", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "# The following code is used to ensure that the Session's identity map\n# is properly populated when an object is loaded from the database.\n# It's a bit complex, but it's necessary to ensure that the identity map\n# is properly populated when the object is loaded, and that", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getName().toString();\n\t\t\tfinal List<IField> named = name2Field.get(name);\n\t\t\tif (named==null) {\n\t\t\t\tnamed = new", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "====================\n\nclass Application(object):\n    \"\"\"Application class.\n    This class is a base class for all Tornado applications.\n    It provides a number of useful methods for handling requests and\n    responses.\n    \"\"\"\n    def __init__(self, handlers, **settings):", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n//\n// The following code is used to render the MultiView control.\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "if __name__ == '__main__':\n    args = parser.parse_args()\n    downloader = WigleDownloader( args.user, args.password, args.coordfile, args.outpath )\n    downloader.run()", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "              if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Poss", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "      builds += platforms.get('desktop', [])\n    if mobile:\n        builds += android_builds(alt_build, platforms.get('mobile', []))\n    # Sort the builds by OS name\n    builds = sorted(builds, key=lambda x: x['os", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeans = StatusBL.getByProjectTypeIssueTypeAssignments(projectID, issueTypeID, objectID);\n\t\t\tif (stateBeans==null || stateBeans.isEmpty", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "          foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if ( argumentSyntax.Expression is IdentifierNameSyntax identifierNameSyntax && memberList.Any( x => x.Identifier.ValueText == identifierNameSyntax.Identifier.ValueText ) ) {\n                    var memberDeclaration = member", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "      split_test = self._update_partition_id(0)\n        # Verify that the children are the correct verticals for the first group configuration.\n        self._assertChildrenAreCorrect(split_test, 'alpha')\n        # Set to second group configuration.\n        split_test", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "          //if (vertical) {\n            //    PdfIndirectObject cmap = writer.DirectObject;\n            //    cmap.Put(PdfName.TYPE, PdfName.CMAP);\n            //    cmap.Put(PdfName.VERSION, new Pdf", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the parent\n\t\t\t\t\t\t\tCell", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "      task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      InputStream is = context.getResources().openRawResource(model.getSprite());\n      try {\n        return BitmapFactory", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "              if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "# TODO: Add NodeManagePoliciesForm and NodeEditTagsForm to the NodeView class\n# TODO: Add NodeManagePoliciesForm and NodeEditTagsForm to the NodeView class\n# TODO: Add NodeManagePoliciesForm and NodeEditTagsForm to the NodeView class\n#", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles, sequences);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "              if (Enabled)\n                    ImageUrl = EnabledImageUrl;\n                else\n                    ImageUrl = DisabledImageUrl;\n            }\n            base.Render(writer);\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "sharpness = compound.getInteger(\"sharpness\");\nfire = compound.getInteger(\"fire\");\nblast = compound.getInteger(\"blast\");\ndamage = compound.getInteger(\"damage\");\n}\n\n@Override\npublic NBTTagCompound writeToNBT", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "      return getId() + \" [\" + getProbability() + \"%]\";\n    }\n}\n// End Effect.java\n// Add the following imports at the beginning of the file:\nimport java.util.List;\nimport net.sf.freecol.common.model.Scope", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "# test that admin can access any group\ni = store.store.search(index='indicators', body={\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\n                    \"term\": {\n                        \"group\": \"everyone\"", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "# Test that the delta is empty when nothing has changed\nself.assertEqual(person._delta, {})\n# Test that the delta is correct when the document has changed\nperson.name = \"new name\"\nperson.save()\nself.assertNotEqual(person._delta, {})\nself.assertEqual", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "=====================\n\ndef inspect_l1b(product_file):\n    inspect_l1b_function = inspect_l1b_function_from_file(product_file)\n    inspect_l1b_function()\n\ndef inspect_l1b_function_from", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "              if (!ignored.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var path in toScan)\n            {\n                _ = _rootFolderService.GetByIdAsync(path);\n               ", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "      resbrains = getToolByName(self.context, 'uid_catalog').searchResults(query)\n        if len(resbrains) > 0:\n            obj = resbrains[0].getObject()\n            objcomments = pdt.getDiscussionFor(obj)", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = (ushort)value; }\n\t\t}\n\t\tpublic bool IsWater\n\t\t{\n\t\t\tget { return ( m_ID & 0x8000 ) != 0; }\n\t\t}\n\t\tpublic", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    // get channel_uri:\n                    // if we don't have a channel for this parcel, create it\n                    if (null == scene.LandChannel)\n                    {\n                        // create a new channel for this parcel\n                        // TODO: this is a", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriods.Update(PayPeriodCur);\n\t\t\tDialogResult=DialogResult.OK;\n\t\t}\n\t\tprivate void textDateStart_Validating(object sender,System.ComponentModel.CancelEventArgs e)", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "      lat, lon = _build_lat_lon_for_NAMEII_timeseries(column_headings)\n        # Convert the X and Y columns to float.\n        x = [float(x) for x in column_headings['X']]\n        y = [float(", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "# This function is used by the `group_member_create` and `organization_member_create`\n# functions to check if the user is allowed to add a new member to the group or\n# organization.\n#\n# The `data_dict` argument is a dictionary containing the following keys", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tString childClassName = example.getLabel(predictionAttribute.getName()).toString();\n\t\t\t\tNode childNode = node.getChild(childClassName);\n\t\t\t\t// setting outcome\n\t\t\t\toutcomes[parentIndex] = childNode.getPartitionId", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "          return this.SearchSegments(settings, segments, null);\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "          codePoint = string.charAt(offset++) << 10\n                      | string.charAt(offset++) & 0x3FF;\n         }\n         if (_range != null && _range.contains(codePoint)) {\n            return offset;\n         }\n         return", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\tObservationDAO observationDAO = new ObservationDAO();\n\t\tObservation observation = observationDAO.getObservationByAccessionNumber(accessionNumber);\n\t\tif (observation != null && observation.getStudyFormName() != null && !observation.", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModVersion.Current)\n\t\t", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif (beans == null)\n\t\t\treturn coll;\n\t\tfor (ims.core.vo.ValueObject vo : beans)\n\t\t\tcoll.add((CatsReferralPendingEmergencyNonEDAdmissionListVo)vo);\n\t\treturn coll;", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify()\n#-------------------\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "          int [] ret = new int[A.Dimensions.NumberOfDimensions];\n            A.GetValue(seqindex, ref ret);\n            return ret;\n        }\n    }\n}", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "pD[ 'plotName' ] = pD[ 'plotName' ].replace( ' ', '_' )\n  pD[ 'plotName' ] = pD[ 'plotName' ].replace( '/', '_' )\n  pD[ 'plotName' ] =", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (bot.TickCount % 100 == 0)\n\t\t\t{\n\t\t\t\tforeach (var builder in builders.OfType<BaseBuilderQueue>())\n\t\t\t\t{\n\t\t\t\t\tif (builder.IsProducing)", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "      // Save the compiled plan\n        String planName = \"Plan_\" + name;\n        String planPath = BuildPlanPath(planName);\n        BuildPlan(planName, planPath, plan);\n        // Save the compiled statement\n        String stmtName = \"Stmt_\" +", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(212, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte) parity;\n\t\t\tdcb.DataBits = (byte) (data_bits + 8);\n\t\t\tdcb.StopBits = (byte", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "  page = self.get_page(self.user.get_absolute_url(), user=self.user)\n    self.assertEqual(page.status_code, 200)\n    self.assertTemplateUsed(page, 'user_profile.html')\n    self.assert", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "  _keep_tempdir = parser.parse_args().keep_tempdir\n    unittest.main()\nif __name__ == '__main__':\n    main()\n# vim: set fileencoding=utf-8 :\n# Local Variables:\n# mode: python\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tself.list.append(entry)\n\t\t\t\tself.oldlist[entry[0]] = {'data': entry}\n\t\t\t\tself.listLength = len(self.list)\n\t\t\t\tself.list.moveTo(self.listLength", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "              int barWidth = (int)Math.Ceiling(x * 100 / 100f);\n                int barHeight = (int)Math.Ceiling(barHeight / 100f) * 100;\n                int bar", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "  return results;\n  }\n}\n\n// The code above is incomplete. The next line of code should be:\n// return results;\n// This method returns the string array stored in the given key in the given properties object.\n// The string array is separated by commas and there should", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "#         y_points = np.arange(-90.0, +90.0, 2.0)\n        y_points = np.arange(-90.0, +90.0, 2.0)\n        x_points, y_points =", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "          if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrent", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "# build_dataset()\n# This code is used to build the dataset for the model. It loads the audio files, extracts the features using the MFCC algorithm, and stores them in a NumPy array. The dataset is then split into training and testing sets, and the labels are encoded as one-", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "          set { _numValues = value; }\n        }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "          this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(261, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n    def nullFunction( self, name, dll=None, resultType=None, argTypes=(), doc=None, argNames=(), extension=None, deprecated=False ):\n        \"\"\"\n        Create a null function pointer.\n        \"\"\"\n        if dll is None:\n", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "          baos.write(emptyStreams.toByteArray());\n            writeUint64(header, emptyStreams.cardinality());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeUint64(final DataOutput out,", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    alphaLevel -= 1;\n                    if (alphaLevel <= 0)\n                    {\n                        inRamp = true;\n                        try {\n                            Thread.sleep(rampDelay);\n                        } catch (InterruptedException e) {\n                            e", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "          item.CanBeRemovedFromQueue.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_able_to_remove_an_item_from_the_queue_if_it_is_still_downloading()\n        {", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "          if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n            }\n            if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken,", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "#        f.writelines(['F) ', str(NX), '\t\t# Number of pixels in the', \\\n#                      ' X direction of the output image\\n'])\n#        f.writelines(['G) ', str(NY), '\t\t# Number of pixels in the", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    i =", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "  def _create_course(self):\n        \"\"\"\n        Create the course in Studio.\n        \"\"\"\n        # TODO: Implement this method\n        # Hint: You'll need to use the `self._course_dict` and `self._course_details`\n        # diction", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tString chanceString = splitNumber[1].replace(\"%\", \"\");\n\t\t\tchance = Float.parseFloat(chanceString);\n\t\t}\n\t\treturn (int) (Math.random() * chance", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "# Define main function\ndef main():\n    # Set up the argument parser\n    argument_spec = dict(\n        name=dict(required=True),\n        state=dict(choices=[\"present\", \"absent\"]),\n    )\n    module = AnsibleModule(argument", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "          this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 12);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "```\n        for plugname, plug in self.loaded_plugins:\n            try:\n                self.ui_log.info(_(\"Running plugin %s ...\") % plugname)\n                self.xml_report.add_plugin(plugname)\n                plug.", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class IConferenceSessionFossil(IConferenceFossil, ISessionFossil):\n    def __init__(self, conference, session):\n        self.conference = conference\n        self.session = session\n\n    def getId(self):\n        return self.session", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(new File(fileTextField.getText()), messageWriter, subtractRootPath(fileTextField.getText()));\n            } else {\n               ", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getNumber(\"value\").intValue();\n\t\t       \t\t} else if (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t} else if (", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "      if (currentSession != null && currentSession.isOpened()) {\n            Bundle parameters = new Bundle();\n            parameters.putString(FIELDS_PARAM, REQUEST_FIELDS);\n            Request request = new Request(currentSession, \"/me\", parameters, null", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.chance;\n\t\t}\n\t\tfor (Emotion emotion : emotions) {\n\t\t\temotion.chance /= sum;\n\t\t}\n\t}\n}\nThe code above", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "#                    'property1': 2, 'property2': 3}\n                    'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list()\n        )\n    def test_to_xml(self", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "  Long = LongOrigin + (x/k0)/(a*cos(phi1Rad))\n    Lat = phi1\n    return (Lat, Long)\n#=============================================================================\n# Main program\n#=============================================================================\nif __name__ == \"__main", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n    form = ReportUserForm(request.POST)\n    if form.is_valid():\n        report = form.save(commit=False)\n        report.user = request.user\n        report.save()\n        messages.success(request, \"User reported successfully.\")\n        return", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddStepOne(StepView):\n    \"\"\"A step for the product add form to enter the product name.\"\"\"\n    form = form.AddForm\n    step = 1\n    label = \"Enter the product name\"\n    @property\n    def next_step(self):\n       ", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "              temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}\n//The code above is incomplete, please complete it.\n//The missing code is:\n//temp >>= 8;\n//This line of code is used to shift the long", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "=====================\n    config = _Config()\n    define_defaults = define_defaults or {}\n    config._post_processors = {\n        'isa': [setattr, (lambda x: (x,) + define_defaults['isa']),],\n        'positional_tags", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "              return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override bool IsSubclassOf (Type type)\n            {\n                return false;\n            }", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "# class OBD_PID_0x1D(OBD_Packet):\n#     name = \"PID_0x1D\"\n#     fields_desc = [\n#         ShortField(\"data1\", 0),\n#         ShortField(\"data2\", 0),", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.connection = self.bus.get_connection()\n\t\tself.connection.add_filter(self.handle_method_call)\n\t\tself.connection.add_filter(self.handle_signal)\n\t\tself.connection.add_filter(self.handle", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "          }\n            else\n            {\n                index = 0;\n            }\n\n            if (Core.ML && index > 0)\n            {\n                AddMysticScroll(index, 1044385, 1044386", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    self._request_ctx = top\n    if top is not None:\n        top.pop(exc)\n    _request_ctx = None\n\n    # If we are in debug mode and an exception was raised, we keep the\n    # request context around for debugging purposes.\n", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "  response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name == topic_name)\n    return response\n# ################################################################################################################################\n#", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "          if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "dx = (rot_axis_proj[0] * ray_trafo.range.range(1) +\n     rot_axis_proj[1] * ray_trafo.range.range(2))\nelse:\n    # Find projection of axis on detector\n    axis_", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\nclass ProxyManager:\n    def __init__(self):\n        self.proxies = []\n        self.proxy_list = []\n        self.proxy_count = 0\n        self.proxy_index = 0\n        self.proxy_enabled = False\n        self", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (IsEmpty)\n\t\t\t\treturn String.Empty;\n\t\t\tif (type != FontSize.AsUnit) {\n\t\t\t\tstring size = font_size_names [(int) type];\n\t\t\t\tif (size != null)\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"Blocklength too large for decryption.\\n\");\n\t\t\t\t}\n\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerObj = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerObj.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(innerObj.Properties[0].Value.Type,", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "              for (int w = 0; w < width; w++) {\n                    int index = h * width + w;\n                    if (w < width - 1) {\n                        edges.add(T2.of(w + \"-\" + h, w + ", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "=====================\n\ni1 = isoelastics.Isoelastics(ds, lut=\"LE-2D-FEM-19\")\ni1.get_data(keys=keys, cols=[\"isoelastics\", \"circularity\"],\n           channel", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "      final File file1 = new File(args[0]);\n        final File file2 = new File(args[1]);\n\n        final LocalTripleStore db1 = new LocalTripleStore(file1);\n        final LocalTripleStore db2 = new LocalTripleStore(file", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "if __name__ == '__main__':\n    unittest.main()\nThis code is a test script for the alert module. It imports the unittest module and defines a test case class AlertTest. The test case class contains several test methods that test the functionality of the alert module. The test", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallation(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.Shutdown();\n\t\t\tOpenGL.glDeleteVertexArrays(1);\n\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\twindow.Dispose();\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "  @property\n    def total_covariance_matrix(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the total *xy* covariance matrix.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return np.vstack((self", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "      return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_internal, m_relationType);\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation of this object", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁  noCanonicalIdAccounts.add(owningAccount.getAccountNumber());\n                  continue;\n                }\n                accountIdAccountMap.put(owningAccount.getAccountNumber(), owningAccount);\n              } catch (Exception e) {\n                // Account", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "          add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public IFolder SelectedFolder\n        {\n            get { return _selectedTreeNode == null ? null : _selectedTreeNode.Folder; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "      ImportVmTemplateParameters parameters = new ImportVmTemplateParameters();\n        parameters.setName(name);\n        parameters.setImportAsNewEntity(isImportAsNewEntity);\n        List<ConstraintViolationException> violations = ValidationUtils.validate(parameters);\n        if (", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.LeftAttach = ((uint)(0));\n\t\t\tw10.RightAttach = ((uint)(0));\n\t\t\tw10.TopAttach = ((uint)(0));\n\t\t\tw10.BottomAttach = ((uint", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callingConv, Type returnType, Type[] parameterTypes, Type[] genericParameterTypes, Type[][] customModifiers)\n\t", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "    return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1810:InitializeReferenceTypeStaticFieldsInline\")]\n    public static readonly global::Google.Protobuf.", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Returns the index of the vertex that is the <code>j</code>th vertex", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "      if (showDateData.equals(\"false\")) {\n            result.add(COLUMN_NAME_DATECREATED);\n            result.add(COLUMN_NAME_DATEMODIFIED);\n        }\n        return result;\n    }\n    /**\n     * Returns the page type", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}\n//  The following code is for the Anim.cs file\nusing UnityEngine;\nnamespace MaterialUI\n{\n\tpublic static class Anim\n\t{\n\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "      Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    #endregion\n  }\n}\n\nThe code above is a partial class for a CommandButton control in a WPF application. The control is designed to automatically adjust its height based on", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n               ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "          // Check if all discount criteria codes are used at least once\n            if (CriteriaCodesUsed.Count != 3)\n            {\n                ValidationColumn = DiscountTable.Columns[DiscountTable.Columns.IndexOf(\"DiscountCriteriaCode\")];\n                VerificationResult =", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "              stream.Read (buffer, 0, (int) stream.Length);\n                // Adding file content as byte[]\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __len__(self):\n        \"\"\"Number of requirements\"\"\"\n        return sum(len(v) for v in self._reqs.values())\n\n    def __iter__(self):\n        \"\"\"Iterator over requirements\"\"\"\n        return iter(self._reqs.values())\n\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && (CopyRange || _numberOfImagesToCopy > 0); }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string ConfigurationDirectory {\n\t\t\tget { return confDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\n\t\t\tget { return cacheDir; }\n\t\t}\n\t\tpublic", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "          if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation lineAnnotation = (SourceLineAnnotation) bugAnnotation;\n                if (lineAnnotation.getLineNumber() < 0) {\n                    throw new IllegalStateException(\"Invalid line number: \" + lineAnnotation);\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "}\nThis code is a base class for food items in Ultima Online. It includes abstract methods and properties for setting the fill factor, poison, and poison resistance of the food. It also includes constructors for creating new instances of the food with a given amount and serialization support. The code includes several derived classes", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.Item(\"LaneClearQ\").GetValue<bool>())\n                    {", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0, 0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraints with default values for all parameters\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "# class DWD(object):\n#     def __init__(self, sh):\n#         self.sh = sh\n#         self.dwd = DWDPlugin(self.sh)\n#         self.dwd.start()\n#         self.dwd.register_item_", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "  self.assertEquals(field_model_def, field_def)\nif __name__ == '__main__':\n    run_tests = make_test_suite()\n    run_tests.run()", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new object[] {10, \"E1\"});\n                // widen to string\n                var stmtText = \"create index idxMyIndex2 on MyWidened(TheString)\";\n                var compiled = env.Compile(stmtText);\n               ", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        clibrebound.clibrebound_particle_scale(c, c_", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\nimport copy\nimport re\nimport simplejson as json\nimport werkzeug.exceptions as exc\nimport werkzeug.wr", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "          value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n        c.putClientProperty(documentBaseKey, null);\n    }\n    /**\n     * The key used to store the HTML renderer in the", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "s = create(filename, content)\nassert s.content_is_testharness\nassert s.name_is_test\nassert s.name_is_html\nassert s.name_is_script\nassert s.name_is_testharness_script\nassert s.name", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmNamedSQLQuery(namedQueryReference, mapDoc.GetNamedQuery(namedQueryReference));\n\t\t\t}\n\t\t}\n\t\t#endregion\n\t}\n}\nThe code above is a part of NHibernate mapping framework", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer );\n\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "      invocationQueue.pop();\n    }\n    private void popInvocations(int count) {\n        assert count >= 0;\n        for (int i = 0; i < count; i++) {\n            popInvocation();\n        }\n    }\n    private void", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "# pytest_args = pytest.split()\n# self.pytest_args = pytest_args\n# self.pytest_args.append('--capture=no')\n# self.pytest_args.append('--junit-xml=junit.xml')\n# self.", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "              if (phi) {\n                    ValueNode phiValue = getCachedPhi(key, value.getStamp());\n                    mergePhi(phiValue, value, states);\n                }\n            }\n        }\n        private void mergePhi(ValueNode phi,", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "      if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException e) {\n                // Ignore remote exceptions\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handle", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonMapGump(from));\n\t\t\t}\n\t\t}\n\t\tpublic EodonMapGump(Mobile from)\n\t\t{\n\t\t\t_ = new EodonMapGump(from);\n", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "=====================\n\nThe code above defines two classes, `Record` and `RecordMetadata`, which are used to represent records and their metadata in the database. The `Record` class is a subclass of `db.Model` and is used to store the basic information about a record, such as its ID", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "  def __getstate__(self):\n        state = self.__dict__.copy()\n        del state['module']\n        return state\n\n    def __setstate__(self, state):\n        self.__dict__.update(state)\n        self.module = self.get_cache()\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n    def __init__(self, msgid, msgstr, fuzzy=False, obsolete=False,\n                 comments=None, context=None, flags=None):\n        \"\"\"\n        Constructor for POFile entry.\n        **Keyword arguments**:\n          - *msgid*:", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "########################################################################################################################################\n#                                                                                                                                      #\n#                                                                                                                                      #\n#                                                                                                                                      #\n#                                                                                                                                      #\n#                                                                                ", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(action.startsWith(PLUGINS_PREFIX)) {\n\t\t\t\t// Allow plugins to be loaded\n\t\t\t\treturn action;\n\t\t\t}\n\t\t\t// Disallow all other forms\n\t\t\tthrow new CommentException(l10n", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "      gsp = yield self.setupGerritStatusPush()\n        result = yield self.run_fake_single_build(gsp, buildResult, verifiedScore)\n        self.assertEqual(result, str(makeReviewResult(buildResult, verifiedScore)))\n    @defer.inline", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "  self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'test'\n    self.category.label = 'label'\n    self.category.scheme = 'scheme'\n    self.category.schemeURI = '", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = new HashMap<>();\n            for (Map.Entry<String, AnnotationMirror> e1 : r1.entrySet()) {\n                String key = e1.getKey", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "# Register classes\nclasses = [\n    MATERIAL_UI_Properties,\n    MATERIAL_UI_Buttons,\n    MATERIAL_UI_Color,\n    MATERIAL_UI_Texture,\n    MATERIAL_UI_NodeTree,\n", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "          if (_engine.Memory.Mapper.MapperNo == 16)\n            {\n                var mapper16 = (Mapper16) _engine.Memory.Mapper;\n                Mapper16_IRQEnabled = mapper16.IRQEnabled;\n                Mapper", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "          JMenuItem oMenuItem = new JMenuItem(\"Open Document\");\n            oMenuItem.addActionListener(oActionListener);\n            oMenuItem.setAcceleratorKeyStroke(KeyEvent.VK_O, ActionEvent.CTRL_MASK);\n            oMenuItem.setMnemonic", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Green Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Blue Bears]\n\t\tAdd(\"Party Quest\",", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = MeasuredHeight;\n\t\t\tint newHeight = 0;\n\t\t\tfor (int i = 0; i < ChildCount; i++) {\n\t\t\t\tView child = GetChildAt (i);\n\t\t\t\tint childHeight", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "=====================\n\n# This is the next line of code that should be added to the file.\n# It creates a new manager for the Announcement model that will be used to filter announcements by Twitter publication.\nclass AnnouncementTwitterPublishedManager(models.Manager):\n    def", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "#lexers.register_lexer(name='php', filename='*.php', lexer=PhpLexer)\n#lexers.register_lexer(name='php', lexer=PhpLexer)\n# Override the default lexer for .r", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "# This is where I need help\n# I need to find the start time of the next group and the end time of the current group\n# and then add the durations together to get the total flight time\n# I then need to insert this into a new table called flight_log_final\n# I", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "# db.table('projects').update(project_id=project_id, last_snapshot=timestamp)\n#                                 ^\n# SyntaxError: invalid syntax\n\n# Instead, use the following:\n\ndb = conn.default()\ntable = db.table('projects')\ntable", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tMsg(\"I'm not involved in any of that.<br/>I don't know what you're talking about.<br/>I'm just a simple shepherd.<br/>I don't have time for your nonsense.\");\n\t\t\tbreak;\n\t\t\tcase", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "responses = {\n    'login': LoginResponse,\n    'logout': LogoutResponse,\n    'login_accept': LoginAcceptResponse,\n    'login_denied': LoginDeniedResponse,\n    'login_error': LoginErrorResponse,\n    'login_chall", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n    def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nclass HostData:\n    \"\"\"\n    Data about a single host for a single task.\n    \"\"\"\n    def __init__(self, uuid", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "              Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n            finish();\n        }\n    }\n}\nThis code is an Android app that unshortens URLs. It uses the Unshorten", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "# TODO: Add step for checking that primary.xml is present in the given path.\n# TODO: Add step for checking that primary.xml is compressed (if it is a compressed file).\n# TODO: Add step for checking that primary.xml is not corrupted.\n# TODO: Add", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\n    if __name__ == '__main__':\n        install_lib.__dict__.update(Command.__dict__)\n        install_lib()()", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tif (lazyPropertyNames[j] == fieldName)\n\t\t\t\t{\n\t\t\t\t\tobject propValue = disassembledValues", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "#\n# @param request a DbJob object\n# @return a list of command line arguments for sge_cmdline_arg()\ndef sge_cmdline_arg(request):\n    job_name = request['job_jobname']\n    log_name = request['job", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "          return View(\"Form\", new DelegateViewModel());\n        }\n        // GET: Delegate/Edit/5\n        public ActionResult Edit(int id)\n        {\n            var model = service.GetById(id);\n            if (model == null)\n            {", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        return string.Format(\"{0} - {1} - {2} - {3}\", ((Circle) obj).Center.X, ((Circle) obj).Center.Y, ((Circle) obj).Radius, ((Circle) obj).Color);\n                    }\n                ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    def handlePremium(self):\n        self.logDebug(\"handlePremium\")\n        self.premium_url = None\n        self.premium_link = None\n        self.premium_size = None\n        self.premium_md", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path != null && path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\t/// <summary>\n\t\t/// Determines the location from which to search for harvestable resources.\n\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "      return True\n\n    def clean_dhcp(self):\n        \"\"\"\n        This function is used to clean up the dhcpd.conf file\n        \"\"\"\n        if self.settings.manage_dhcp:\n            dhcpd_conf = self.api.get", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "      return Event.newBuilder().setSource(source).setSeqNo(seqNo.getAndIncrement());\n    }\n}\nThe code above is an abstract class named AbstractEventProducer which implements the EventProducer interface. It provides a default implementation for sending events with different severity levels (", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "          for (PpmContext currentContext = context; currentContext != PpmContext.ZERO; currentContext = currentContext.Suffix)\n            {\n                if (currentContext.NumberStatistics == 0)\n                {\n                    if (currentContext.SummaryStatistics > 0)", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "              return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Sequence VR.\n        /// </summary>\n        public static readonly DicomVr Sqvr = new DicomVr(\"SQ\", false", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[0]);\n\t\t\t//if(SqliteJump.SelectCount(sessionID, tFull[1]) > 0)\n\t\t\t//\tcontinue;\n\t\t\t//if(SqliteRun", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n    def test_delete_from_empty(self):\n        o = self.file(b'')\n        delete_bytes(o, 0, 8)\n        self.assertEquals(b'', self.read(o))\n\n    def test_delete_from_middle", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n<td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X</td>\n    <", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "# plot the data\n# TODO: plot the data\n# TODO: plot the data\n# TODO: plot the data\n# TODO: plot the data\n# TODO: plot the data\n# TODO: plot the data\n# TODO: plot the data\n# TODO: plot the data\n# TODO:", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "if __name__ == '__main__':\n    unittest.main()", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRoundRect(x + 1, y + 1, controlSize - 2, controlSize - 2, 2, 2);\n\t\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "def simulateClassifier(self, classifier, testPatterns, numTestPatterns,\n                         testCategories, testPatternsFile,\n                         testCategoriesFile, testDistancesFile,\n                         testCategoriesDistancesFile,\n                         testCategoriesProb", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "      mirror.writeElement(elementKind, value.toInt().intValue(), offset);\n    }\n    @HOSTED_ONLY\n    public void writeValue(ObjectMirror mirror, int offset, Value value) {\n        if (offset == lengthOffset) {\n            mirror.writeArray", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "          if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyPath = FileUtils.CombinePaths(ParentDirectory, relativePath);\n            if (File.Exists(assemblyPath)) {\n                return assemblyPath;\n            }\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\ndef url_parse(url):\n    \"\"\"\n    Parses a URL into its components\n    \"\"\"\n    if py_version >= 3:\n        return urllib.parse.urlparse(url)\n    else:\n        return urllib.parse.urlparse(url", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "    }\n    }\n  }\n}\nThe code above is incomplete. The next line of code should be:\ni20 = i18 + 1;\nThis line of code is missing in the code above. The missing line should be added before the comment \"Next line of code", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"  \" + s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "              });\n            #endregion\n            #region Lux\n            SpellData lux = new SpellData();\n            lux.Name = \"Lux\";\n            lux.Slot = SpellSlot.Q;\n            lux.Range = 1200;\n            lux.Delay =", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.user@test.com\", \"test.user\"));\n\t}\n\tprotected void mockSecurityContext(EmfUser user) {\n\t\twhen(securityContext.getCurrentTenant", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "  @testlib.with_context\n    def test_popen_raises_error_on_non_existent_executable(self, context):\n        context.setup_error_codes()\n        context.add_error(errno.ENOENT, 'non_existent_", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (string.IsNullOrEmpty(configDirectory)) {\n\t\t\t\tconfigDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), PropertiesName);\n\t\t\t}\n\t\t\tif (string.IsNullOrEmpty(dataDirectory", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//\n\t\t// The following code is used to implement the\n\t\t// ICloneable interface.\n\t\t//\n\t\t//\n\t\t//\n\t\t// The following code is used to implement the\n\t\t// ICloneable interface.\n\t\t//\n\t\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n        Dialog.setTabOrder(self.font_size_option, self.zoomby_option)\n        Dialog.setTabOrder(self.zoomby_option", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "              return true;\n            }\n            String stationId = wxs.getString( wxs.getColumnIndex( Wxs.COLUMN_ID ) );\n            String name = wxs.getString( wxs.getColumnIndex( Wxs.COLUMN_NAME ) );\n            String", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring queryString = \"from Continent c join fetch c.countries\";\n\t\t\t\tint count = s.CreateQuery(queryString).List().Count;\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount);\n\t\t\t\tAssert", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "              uiCRCITTSum = (uiCRCITTSum >> 8) ^ crc_it_table[(uiCRCITTSum & 0xFF) ^ uiByteValue];\n            }\n            return (ushort)uiCRCITTSum;\n        }", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn hasSpeedModule() ? 10 : 5;\n\t}\n\t/**\n\t * @return The block below that affects the sentry's movement\n\t */\n\tprivate BlockPos getBlockPosBelowThatAffectsMovement() {\n\t\tBlockPos pos", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "          return new IHyperlinkDetector[] {};\n        }\n        IHyperlinkDetector[] detectors = \n                new IHyperlinkDetector[] {\n                        new CeylonHyperlinkDetector(editor, controller),\n                        new JavaHyperlink", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "# Create the Object3DAspect widget\nself.object3DAspect = Object3DAspect(self)\n# Create the Object3DScale widget\nself.object3DScale = Object3DScale(self)\n# Create the Object3DPrivateInterface widget\nself.object", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set X\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( info.X, m_Mobile.Location.Y );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁     for (Object valueChoice : valueChoices)\n                     {\n                        String label = selectConverter.convert(valueChoice);\n                        if (Strings.equalsIgnoreCase(label, Strings.toString(value)))\n                        {\n                           chosenObj = valueChoice;", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++)\n\t\t\t\t\tsb.append(\"\"+k+\"\\t\"+totalWithChange[i][j][k]+\"\\t\"+fractionWithChange[i][j][k]+\"\\n", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order that contains the unpriced line\n                                int orderIndex = unpricedLine.Key;\n                               ", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\tpublic void AddParameterInspector (IParameterInspector inspector)\n\t\t{\n\t\t\tThrowIfOpened ();\n\t\t\tinspectors.Add (inspector);\n\t\t", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "      final SimpleACLPermission permission = new SimpleACLPermission(ownerId, ownerGroupId, mode);\n        final SimpleACLPermission acl = new SimpleACLPermission(ownerId, ownerGroupId, mode);\n        final Subject subject = EasyMock.createMock(Subject.class);", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X / viewport.Width, v.Y / viewport.Height);\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn new Vector3 (", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats_key(XDRUnion):\n    class in_stats(endpoint_stats):\n        pass\n\n    class out_stats(endpoint_stats):\n        pass\n\n    members = (in_stats, out_stats)\n\n    @classmethod\n    def un", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    Console.WriteLine(\"Client disconnected: \" + i);\n\t\t\t\t    RemoveClient(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Receives a message from a", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "          if(type == RequestType.Step) {\n                List<StepBucket> stepList = GooglePortal.this.logicToConvertToStepBuckets(list);\n                notifyStepsReceived(requestId, stepList);\n            } else if(type == RequestType", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "# Generate the Single use callback class\n  GenerateSingleUseCallback(1, 0)\n  # Generate the Multi use callback classes\n  for i in range(2, 6):\n    GenerateCallback(i, 0)\n  # Generate the helper functions\n  for i in range", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\"\"\"\nresponse = HttpResponse(content_type='application/json')\njson_data = []\nfor item in items:\n    json_data.append(range_item_dict(item))\njson_str = json.dumps(json_data)\nresponse.write(json_", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "              new VarNode(\"score\"), null/* c */, Scope.DEFAULT));\n                whereClause.addChild(new ServiceNode(\n                        new ConstantNode(searchIV), serviceGraphPattern,\n                        null/* c */));\n            }\n        }\n        final ASTOpt", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n    def dispatch(self, request, *args, **kwargs):\n        self.object = None\n        try:\n            self.object = self.get_object(queryset=self.model.objects.filter(pk=kwargs[\"pk\"]))\n            if not self.object:", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "    get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "          // tfqmr_iter(A, b, x, &tol, &max_it, &iter, &err, &precond, &m, &n, &nz, &nnz, &work, &info);\n            // tfqmr_iter(matrix, input", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "          if reference_set_map[v] != -1:\n                A[focal[v]] += 1\n                L[focal[v]] += 1\n                sample_count[reference_set_map[v]] += 1\n                break\n           ", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "  def test_backend(self):\n        self.connector = self._test_connectors()[0]\n        self._test_backend()\n\n        # Test with CSV mappings\n        self.connector = self._test_connectors()[1]\n        self._test_backend()", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots && slot.Value.LockTeam == null)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(Order.AddBot", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" : \" + _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "# TODO: Implement DataFrame, with padding, and serialization/deserialization.\n# TODO: Implement WindowUpdateFrame, with serialization/deserialization.\n# TODO: Implement PingFrame, with serialization/deserialization.\n# TODO: Implement GoAwayFrame, with serial", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "#endif\n        }\n    }", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos (m_maxSlopeRadians);\n}\nvoid btKinematicCharacterController::setMaxSlopeCosine(double slopeCosine)\n{\n\tm_maxSlopeCosine = slopeCosine;", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "      for (ExpressionTree initializer : initializers) {\n            if (initializer instanceof VariableTree) {\n                VariableTree variableTree = (VariableTree) initializer;\n                AnnotatedTypeMirror annotatedTypeMirror = atypeFactory.\n                        get", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tN", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t\t_type = typeAttribute.Value;\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the methods for this item.\n\t\t/// </summary>\n\t\tprivate void", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()){\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Size = new Size(100, 50);\n\t\t\t\tmyTrackBar.Orientation =", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\n\t\t\twhen(classType.isAnnotationType()).thenReturn(true);\n\t\t\twhen(classType.isInterfaceType()).thenReturn(false);\n\t\t\tdoReturn(Collections.singleton(", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.postdominators != other.postdominators)\n\t\t\treturn false;\n\t\tif (this.dependsOnCutPoint != other.dependsOnCutPoint)\n\t\t\treturn false;\n\t\tif (this.dependsOnCallSite !=", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "          int min2 = wideLExtent[start][r.leftChild];\n            int min = (min1 < min2 ? min1 : min2);\n            int max1 = wideRExtent[end][r.rightChild];\n            int max2 = narrowL;\n           ", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "              'rsync',\n                '--archive',\n                '--compress',\n                '--delete',\n                '--exclude={\"pg_hba.conf\", \"pg_stat.conf\"}'\n                '--exclude-from={\"pg_ex", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "writer.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n}", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null ) {\n\t\t\t return false;\n\t\t}\n\t\tif ( !( aThat instanceof Contact ) ) {\n\t\t\t return false;\n\t\t}\n\t\tfinal Contact that = (Contact)aThat;\n\t\treturn ( (", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "  if total_rej > 10:\n      print('Total number of rejected timesteps = %s' %total_rej)\n      break\n\nThe code above is a part of a multi-body simulation code. It uses the Luby-Muskat algorithm to solve the", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "      idx = node.op.idx_list\n\n        if len(idx) == 1 and isinstance(idx[0], (int, long)):\n            if shape_match(node.inputs[0],\n                          node.fgraph.shape(node.inputs[0],\n                ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "=====================\n\ndef save_permissions(form, request):\n\"\"\"\nFunction to save the selected groups for a user.\n\"\"\"\n# Get the selected groups from the form\nselected_groups = form.cleaned_data['groups']\n# Get the user from the request\nuser =", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "```python\nreturn query\n```\n# This is the end of the code. The code above is for an ORM (Object-Relational\n# Mapping) library, specifically for the SQLAlchemy library. It defines several\n# classes for different types of events that can occur during the", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "# Register the descriptor\nXBlockRegistry.register_xblock_type(ConditionalDescriptor)\n# Register the module\nXBlockRegistry.register_module_type(ConditionalModule)\n# Register the js and css files\nXBlockRegistry.register_static_files(ConditionalModule, '", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "=====================\n\nThe code seems to be incomplete and missing some context. Here's a possible completion based on the given code:\n\n```python\n# ...\n\nNext line of code:\n=====================\n\ndef to_global(key):\n    return self._map_", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && (Method == null && Field == null && Sig == null))\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"ldtoken: 'class' attribute must be combined with either 'method', 'field'", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description Y:\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "      c = self.getNoPrefix(\"mail/syncmail.5\")\n        self.assertEqual(c.branch, \"trunk\")\n        self.assertEqual(set(c.files), set([\"buildbot/buildbot.py\"]))\n        self.assertEqual(c.comments,", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "      if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> datum : csvData.entrySet())", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\tif(player.capabilities.isCreativeMode) {\n\t\t\t\tif(BotaniaAPI.manaHandler.addMana(player, getValue())) {\n\t\t\t\t\tworld.playSound(", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "          intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCommunityOperation(Comm", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "if __name__ == \"__main__\":\n    do_upgrade = True\n    if do_upgrade:\n        do_upgrade()\n    else:\n        print(\"Skipping upgrade\")", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.Close();\n\t\t\tcomputerMgmt = null;\n\t\t\tcomputerMgmt = new ComputerManagement();\n\t\t\tcomputerMgmt.Open();\n\t\t\tcomputerMgmt.Start();\n\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "  for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Converts a ical4j Period to a Datable.", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.EventName = SourceEventName;\n\t\tsourceEventBinding.Target = DataSource.Component;\n\t\tsourceEventBinding.MethodName = \"On\" + SourceEventName[0].ToString().ToUpper() + SourceEventName.Substring( 1 );\n", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "          ISwitchManager switchManager = (ISwitchManager) ServiceManager.getService(ISwitchManager.class, container);\n            SpanPortConfig spanPortConfig = new ObjectMapper().readValue(jsonData, SpanPortConfig.class);\n            Status status = switchManager.addSpan", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAlert = new ImageHelper(100001, \"/ims/images/alert.gif\", new Integer(16", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "      return rnd.nextInt(size);\n    }\n}", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "  def make_assertions(self,\n                        project_uuid,\n                        predicate_uuid,\n                        subject_uri,\n                        object_uri,\n                        assertion_type='skos:broader'):\n        \"\"\"\n        Make assertions between two UR", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "          buffer.Append(\"          .shrinktofit= \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .readonly   = \")\n                .Append(StringUtil.ToHexString", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katana\n\t\t\t\tbytes[posn++] = (byte) (ch - 0x30);\n\t\t\t\tbytes[posn++] = (byte) (value >> 8);\n\t\t\t\tbytes[posn++] =", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n# -----------------------------------------------------------------------------------------------------------------------\n# -----------------------------------------------------------------------------------------------------------------------\n# -----------------------------------------------------------------------------------------------------------------------\n# -----------------------------------------------------------------------------------------------------------------------\n# -----------------------------------------------------------------------------------------------------------------------\n# ------------------------------------------------------------------------------------------------", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties properties = new Properties();\n\t\t\tstream = location.openStream();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap map = new JRPropertiesMap();\n\t\t\tfor (Enumeration<Object> keys = properties.propertyNames();", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "          return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n         *", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd = new CommonSecurityDescriptor (false, false, null, null, null, null, null);\n\t\t\tAssert.IsFalse (csd.IsDiscretionaryAclPresent);\n\t\t\tAssert.IsFalse (csd.IsSystemAclPresent);", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "# Here we start the lookup thread and submit the results to it.\n# The lookup thread will then submit the results to the Acoustid\n# service and return the results.\n# The results will be used to update the tags of the songs.\n# The lookup thread will be stopped when all songs have", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "      // ----------------------------------------------------------------------------\n        // Add your custom RPCs here.\n        // ----------------------------------------------------------------------------\n        // ----------------------------------------------------------------------------\n        // Add your custom RPCs here.\n        // ----------------------------------------------------------------------------\n        // ------------------------------------------------", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "      return rootView;\n    }\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n        if (Config.getBoolean(\"use_global_transport\", getContext())) {", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "      # Transform wave function\n        psit_G = np.dot(psit_G, self.symmetry.op_scc[s])\n        if time_reversal:\n            psit_G = np.conj(psit_G)\n        return ps", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "      CreateUtkastRequest utkastRequest = new CreateUtkastRequest();\n        utkastRequest.setIntygType(INTYG_TYPE_ID);\n        utkastRequest.setPatient(new Patient());\n        utkastRequest.setPatient().", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body) {\n\t\t\t\t\tif(child is ILBasicBlock) {\n\t\t\t\t\t\tILBasicBlock childAsBB = child as ILBasicBlock;\n\t\t\t\t\t\tif(prevChildAsBB !=", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    //if we're not a ragdoll then we'll need to set all the parts to ragdoll\n\t    if (!IsRagdoll) {\n\t\tfor (", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class StratumLayer(GeoLayer):\nWhat should be the next class after FractureLayer?\nThe next class after FractureLayer should be StratumLayer. StratumLayer is a subclass of GeoLayer and represents a geological layer that is not fractured or has", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "      out[outOff + 3] = (byte) ((num >>> 24) & 0xff);\n        out[outOff + 2] = (byte) ((num >>> 16) & 0xff);\n        out[outOff + 1] = (byte", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "          super( source );\n            this.objectVariables = objectVariables;\n        }\n        private Map<String, PatternNode> objectVariables;\n        @Override\n        protected Predicate<PatternMatch> getFilter()\n        {\n            return new Predicate<PatternMatch>()\n            {\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "def transform_values_holder_to_json(values_holder, format = None):\n    \"\"\"\n    Transform a values holder to a JSON object.\n    \"\"\"\n    if not values_holder:\n        return {}\n    if isinstance(values_holder, list):\n        return [", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "          frameToClose = (InternalFrame)buttons.get(btn);\n            if (frameToClose!=null)\n              frameToClose.toFront();\n          }\n        }\n      });\n      btn.addActionListener(new ActionListener() {\n        public void actionPerformed(", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "# This is where you would put the code to use the functions you've defined above.\n# For example, you might call getRandLC() to get a random LC file, or getLC('SDSS J123456.1+567890.1", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "  for (int z = 0; z < p.getRasterDepth(); z++)\n    {\n      for (int y = 0; y < p.getRasterHeight(); y++)\n      {\n        for (int x = 0; x < p.getRaster", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    ContentValues values = new ContentValues();\n                    values.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, values, Db.Table1.ID_GROUP + \" = \" + deleteId,", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "              m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n        #endregion\n        public IntPtr GetPointer()\n        {\n           ", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tqueue.RemoveAt(0);\n\t\t\t\tplayerResources.GiveCash(queue[0].Cost);\n\t\t\t\tif (", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    infoText += \" file\" if numberOfFiles==1 else \" files\"\n    infoText += \"<br>\"\n\n    if numberOfHiddenFiles>0:\n        infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n        infoText += \"file", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "      code = re_m4.sub(r'@\\1@@', code)\n        # replace all variables by their value\n        for x in self.env.get_values():\n            code = code.replace('@%s@' % x, self.env[x])\n", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "if __name__ == '__main__':\n    try:\n        PlanningServer()\n    except rospy.ROSInterruptException:\n        pass\n    except KeyboardInterrupt:\n        pass\n    except:\n        rospy.logerr(sys.exc_info", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] - h[ 0 ], 2 );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExtent ] +", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "              if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tif (qs.NextResultSet())\n\t\t\t{\n\t\t\t\tentity.cti_id = Convert.ToInt32(qs.GetValue(0));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic int PropertyCount\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic string PropertyNames\n\t\t{\n\t\t\tget { throw new NotImplement", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "#\n# Main function\n#\ndef main():\n    \"\"\"Main function\"\"\"\n    argument_spec = dict(\n        key_id=dict(type='int', required=True),\n        password=dict(type='str', no_log=True),\n        trusted_key=dict", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "          component = self.store.update(component, fields=['display_name'], user=editing_user)\n            # Verify that the component was updated\n            self.assertEqual(component.display_name, 'Changed')\n            # Verify that the component's ancestor's edited_", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "      digest.update((byte) (TEXT_CODE & 0xff));\n        updateWith(new String(ch, start, length));\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {\n        digest.update((byte", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "#def mkrange(data):\n#    record = unpack(data, 'rang')\n#    return record['min'], record['max']\n#\n#def mkcomparison(data):\n#    record = unpack(data, 'cmpd')\n#    return record['", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "          Type type = api.ActionDescriptor.GetParameters()[0].ParameterType;\n            if (type == typeof(HttpActionContext))\n            {\n                type = api.ActionDescriptor.ReturnType;\n            }\n            if (type == typeof(HttpResponseMessage))\n            {\n", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "      elif event.keyval == gtk.keys.Return:\n            self.set_value()\n            return True\n\n        elif event.keyval == gtk.keys.Escape:\n            self.set_cursor_position(self.get_cursor_position() - 1", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "          beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /**\n     * The order of this bean processor.\n     */\n    public int getOrder()\n    {\n       ", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "          lines = f.readlines()\n        finally:\n            f.close()\n    if lines:\n        for line in lines:\n            if len(line.strip()) == 0:\n                module.fail_json(msg=\"Password file contains blank lines\")\n    if password", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "      [In, MarshalAs(UnmanagedType.LPStruct)] ref MF_EVENT_DATA_BASIC pEventData\n        );\n    }\n    [StructLayout(LayoutKind.Sequential)]\n    public struct MF_EVENT_DATA_BASIC\n    {\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "      ensureAdminAccess();\n        spm.addPrincipalToPrincipal( directedAclKeys );\n        return null;\n    }\n}", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "      for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element matches what is expected.\"\"\"\n        full_tag = self.expected_tag(", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "=====================\n\nif node.nodeType == node.DOCUMENT_NODE:\n    newOwnerDocument.__dict__['documentElement'] = clone\n    if node.doctype:\n        newOwnerDocument.doctype = node.doctype.cloneNode(deep)\n", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostics, context);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t* Validate validation of EM", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.Name, endOffset)) {\n\t\t\t\tName name = new Name();\n\t\t\t\tdecodeName(name, decoder);\n\t\t\t\tkeyLocator.setKeyName(name);\n\t", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "      for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update();\n        }\n        \n        //Updates the camera\n        updateCamera();\n        \n        //Updates the HUD\n        display.", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "      action.setColor( colorValue );\n        GameEngine.model().getGame().addGameJoin( action );\n        hide();\n      }\n    } );\n    action.setColor( colorValue );\n    GameEngine.model().getGame().addGameJoin( action );\n   ", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "# Raise an error if the response status code is not 200\nif r.status != 200:\n    err = json.loads(r.data.decode(\"utf-8\"))\n    if \"status\" in err and err[\"status\"] == False:\n        ms", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = response.FailureReason;\n\t\t\t}\n\t\t\tcatch (Exception ex)", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "def _find_carbon_sources(model):\n    \"\"\"Find carbon sources in the model.\n    Parameters\n    ----------\n    model : cobra.Model\n        The model to search for carbon sources.\n    Returns\n    -------\n    list of cobra.Reaction\n        A list", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "class Unit(CachedTreeItem, models.Model):\n    \"\"\"A unit is a single translation of a source string.\n    \"\"\"\n    #: The source string.\n    source = models.CharField(max_length=255, db_index=True)\n    #:", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n        migrations.AddField(\n            model_name='city',\n            name='state',\n            field=models.ForeignKey(to='events.State'),\n        ),\n\n        migrations.AddField(\n            model_name='city',\n            name='city_type',\n", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "# Add the OpenFlow switch to the controller\ncontroller = pox.core.Controller()\ncontroller.openflow.addListener(ofp)\ncontroller.openflow.addListener(OpenflowListener)\ncontroller.openflow.addListener(OpenflowListener2)\ncontroller.openflow.", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "  if (m_RecentItems.size() >= m_MaxSize) {\n      m_RecentItems.remove(m_RecentItems.size() - 1);\n    }\n    m_RecentItems.add(item);\n    if (m_IgnoreChanges)", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "          if (src.FightMode == FightMode.Aggressor || src.FightMode == FightMode.PassiveDefensive || src.FightMode == FightMode.Defensive)\n                return true;\n            return false;\n        }\n    }\n}\nThe", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "      if (halfTradePeriodDate == null && takeOfferDate != null) {\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod() / 2);\n        }\n        return half", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompileFollowSets() {\n\t\tforeach (Symbol sym in Parser.symbols) {\n\t\t\tif", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteAsync(buff);\n\t\t\tBeginAsyncRead();\n\t\t\treturn mReadBuff;\n\t\t}\n\t\tprivate void WriteAsync(byte[] data)\n\t\t{\n\t\t\tmWriteDone = false;\n\t\t\tmWriteData = data", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(order);\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tMskJointVo mskJointVo1 = (MskJ", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List<Item>();\n\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "          for (int j = 0; j < N_INDEXES; j++)\n            {\n                _units2Indx[j] = j;\n            }\n        }\n    }\n}\nThe code above is a part of a SubAllocator class in SharpPlex", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "# Create a new compute rate\nrates = ChargebackRates()\nnew_rate = rates.ComputeRate(description='TestComputeRate',\n                            fields={'Used CPU': {'Per Hour': 1.2, 'Variable': 0.5}})\nnew_rate.create", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock();\n\t\t\t\tMemory.Copy( src, shadowBuffer.Data + offset, length );\n\t\t\t\tshadowBuffer.Unlock();\n\t\t\t}\n\t\t\telse", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.scan_sat = buildSatSelection(self.feid, self.orbital_position, self.satfinder_scan_nims.value)\n\t\tself.scan_sat_list = [self.scan_sat]\n\t\tself.scan_sat_", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "          else {\n                String[] filters = filterStr.split(\",\");\n                for (String filter : filters) {\n                    String[] parts = filter.split(\":\");\n                    if (parts.length != 2) {\n                        throw new IllegalArgumentException(\"Invalid filter:", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "              // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                \n                // Copy the decoded row to the previous row\n                Array.Copy(curr, 0, prior, 0, bytesPerRow", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "      s = lowlevel.Signal('foo', 'org.freedesktop.DBus', 'org.freedesktop.DBus')\n        self.assertEqual(s.get_interface(), 'org.freedesktop.DBus')\n        self.assertTrue(s.has", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def __str__(self):\n        return \"MASS ELEMENTS: \" + str(self.get_E_page().get_mass_elements())\n\nI'm trying to add a method to the MASS class that computes the Massey product of two elements in the", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "          \"1:1: Message \\\"protobuf_unittest.TestMessage\\\" has no field \" +\n            \"\\\"nosuchfield\\\".\",\n            \"nosuchfield: 123\");\n        }\n    }\n}", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal Iterator i = m.entrySet().iterator();\n\t\t\twhile ( i.has", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member deleting an auction\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\nclass HrAttendance(models.Model):\n    _inherit = 'hr.attendance'\n\n    def attendance_action_change(self):\n        \"\"\"\n        This method is used to change the attendance status of the employee.\n        \"\"\"\n        self.ensure_one()\n", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = null;\n\t\tif (orderInvestigationLiteVo.getOrderSpecimen() != null)\n\t\t{\n\t\t\tparentRow = form.grdResults().getRows().get(form.grdResults().getRows().indexOf(", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "              pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.X, pt.Y);\n            }\n        }\n        /// <summary>\n        /// Sets the position of the item.", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "      terminal = maker.new_terminal(self, cwd, profile, debugtab)\n        self.add_terminal(terminal)\n        self.show_all()\n        self.terminal_focus(terminal)\n        self.emit('tab-new', terminal)", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    toReturn.Add( new StructFieldInfo( nameArraySizeFragment, managedType, marshalAttribute ) );\n                }\n            }\n            return toReturn;\n        }\n    }\n    public class StructFieldInfo\n    {\n        public StructFieldInfo( string name,", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type == null || base_type.IsValueType;\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsByRef {\n\t\t\tget { return false; }\n\t\t}\n\t\tpublic override bool IsPointer {\n\t\t", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "              throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}\n//The code above is incomplete, you need to add the following code to complete it:\n//\n//using System;\n//using System.", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n    self.context = OpenSSL.SSL.Context(\n        _openssl_versions[protocol],\n        self._get_verify_locations(),\n        self._get_ciphers(),\n        self._get_ssl_options()\n    )\n    self.context.set", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.Xalign = 0.5F;\n\t\t\tthis.label8.UseMarkup = true;", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "# headbook.connect(\"page-reordered\", page_reordered)\n\n# The following code is for the tab order of the notebooks\n# It is not needed for the current version of PyGTK\n# It is left here for reference\n#\n# def page_reordered (not", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "  \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-next\": QKeySequence(Qt.CTRL + Qt.Key_PageDown),\n    \"Move-Tab-to-previous", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [name=\" + this.persistenceUnitName + \", providerClass=\"\n\t\t\t\t+ (this.persistenceProviderClassName != null ? this.persistenceProviderClassName : \"\")\n\t\t\t\t+ \", transactionType=\" + this.transactionType + \", dataSource=\"", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "  IEditorInput editorInput = getEditorInput();\n    if (editorInput instanceof IFileEditorInput)\n    {\n      IFileEditorInput fileEditorInput = (IFileEditorInput)editorInput;\n      return fileEditorInput.exists() && !fileEditorInput.isSaveLocal();", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(625, 12);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(10", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "      if (sb != null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n}\n\nThe code above is incomplete, and I need to complete it. The missing part is the last line of code", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-Legacy-TC1\", hmac, data, digest);\n\t\t}\n\t\tpublic void Check (string name, HMAC hmac, byte[] data, byte[] digest)\n\t\t{\n\t\t\tbyte[] result =", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch (EnumSwitcher.valueOf(EnumSwitcher.option_1.name())) {\n\t        case option_1:\n\t            current_sum += 4;\n\t            break;\n\t        case option_2:\n\t            current_sum += 4;\n\t", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "      return null;\n      String javaPath = java.GetStringValue(\"JavaHome\");\n      if (javaPath == null)\n        return null;\n      return javaPath;\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n     ", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "  comment = l\n\n    if comment == name:\n        return [comment, l]\n\n    if job is not None:\n        if re.match(r'^%s' % shlex_quote(job), l):\n            return [comment, l]\n\n    return", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# Mesh Modifiers\n# -------------\n#\n# Mesh modifiers are a collection of modifiers that can be applied to a mesh object.\n#\n# Each mesh modifier is a separate class that inherits from the MeshModifierBase class.\n#\n# To create a new mesh", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "          double[] likelihoods = new double[totalBuckets];\n            for(int i = 0; i < totalBuckets; ++i)\n            {\n                double rankCount = rankCounts[i];\n                double rankBucket = mScoreRankBuckets.", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "      for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n       ", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\nif __name__ == \"__main__\":\n    p = Pydump()\n    p.main()\n\n#This is the main part of the code. It initializes the Pydump object and calls its main method.\n#The main method is responsible for handling the command line arguments and", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "          this.rptComboBox.Location = new System.Drawing.Point(12, 12);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(121, ", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "          'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),\n            'document': ('main.Document', []),\n            'id': ('django.db.models", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "              // If we're processing a restriction, we may have already processed the base type.\n                // In that case, we should return true here.\n                if (inRestriction()) {\n                    return true;\n                }\n            }\n        }\n        return", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "      self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_refuse(self, cr, uid, ids, context=None):\n        self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "          set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets the name of the column\n        /// </summary>\n        string IBOColSelector.ColumnName\n        {\n            get { return this.Columns[this.CurrentCellAddress.X].", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "          return String.Format(\"{0} ({1}): {2} ({3})\", this.Name, this.TargetName, this.TypeDescription, this.Channels);\n        }\n    }\n}", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainFactory.getDomainObject(valueObject.getCareContext().getID(), valueObject.getCareContext().getVersion());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\tdomainObject.setCustomID(value", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "          [\"cargo\", \"run\", \"--\", \"--features\", \"servo\", \"--features\", \"wasm-bindgen\", \"--features\", \"wasm-bindgen-test\", \"--features\", \"wasm-bindgen-test-jest\", \"--features\", \"wasm-bindgen-", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double[] { 0, estN }, false));\n\t\t}\n\t}\n\t/**\n", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "              Stashed.SetStashDiffs(gitStash.Name, gitItemStatuses);\n            }\n            Loading.Visible = false;\n            Loading.IsBusy = false;\n            Stashed.Refresh();\n            Stashed.Update();\n            Stashed.", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "# print out the addresses of the beam monitors\nfor i in range(bm0_index, bm1_index + 1):\n    st_arch_status_t status = st.st_arch_status()\n    st.st_arch_status_get_status(status", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "      if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.match(that) > 0;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(\"AddInt\", asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += Panelstk.TAB;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "# Load the archive index\narchive_index = load_archive_index(args.index_file)\nargs.index_file = archive_index.path\n# Run the action\nargs.index_file = archive_index\nargs.index_file.path = archive_index.path\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "      self.miso_bits = self.parse_bits(miso)\n        self.samplenum += len(miso) // 8\n        self.es = es\n        # TODO: Handle the 'DATA' packet.\n        # The 'DATA' packet is sent by the", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "        cursor = limit - v_3;\n          if (cursor >= limit_backward) {\n            break lab0;\n          }\n          cursor += v_3;\n        } while (false);\n        // setlimit, line 200\n        limit_backward = cursor", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "              o = cls.newInstance();\n                dins.readFully(o);\n                if (cd == null) {\n                    cd = new ChannelData(channel, cls, fingerprint, msg_size);\n                    channelMap.put(channel, cd);\n", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "  def _get_key_usage(self):\n        result = []\n        for extension in self.cert.get_extensions():\n            if extension.get_short_name() == 'X509v3 Key Usage':\n                for usage in extension.get_value():", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (i != s.end());\n\t\t\t}\n\t\t\tif (still_there) {\n\"\"\", file=f)\n        # Here is where you need to complete the code\n        # You need to call the slot function and handle", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "# The following code is a simple test case. It is not part of the code to be\n# completed. It is just a test case to show the effect of the code.\nif __name__ == \"__main__\":\n    # The following code is a simple test case. It is not part of", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = la.pos, col = la.col;\n\t\t\tif (la.kind == 26) {\n\t\t\t\tGet();\n\t\t\t\tif (t.pos > beg) {\n\t\t\t\t\tsym.attrPos = new", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n#\n#     OpenERP, OpenERP Community Association (OCA), all rights reserved.\n#     This software is a", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS_SSL);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "              permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testGetPermissions() throws Exception\n    {\n        // test", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "# Here you can add your tests for the context.list_devices() method.\n# For example:\n# devices = context.list_devices()\n# assert len(devices) > 0\n# for device in devices:\n#     assert isinstance(device, Device)\n#     assert device", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "# Initialize device\ndevice = Device(deviceToken)\n# Initialize user\nuser = user.newUser(loginId, password)\n# Login\nuser.login()\n# Check inspection\ninspection = device.check_inspection()\nprint(inspection)\n# End of code\n#", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "# Parse the command line arguments.\nargs = docopt(__doc__)\n# Set up the observatory.\nobserver = ephem.Observer()\nobserver.lat = args['<LATITUDE>']\nobserver.lon = args['<LONGITUDE>']\n", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "          ItemID = 0x102F + (int)(Hue * 10);\n        }\n        private class InternalTarget : Target\n        {\n            private KeyRing m_Owner;\n            public InternalTarget(KeyRing owner)\n                : base(1", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "      for (String device : devices) {\n            try {\n                Tuner tuner = new Tuner(device, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "  if (lastSeenVersion < Version.USER_NOTIFICATIONS) {\n      jobs.put(Version.USER_NOTIFICATIONS, new UserNotificationsMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAYDREAM_MIGRATION) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "    List<Pattern> regex = new ArrayList<>();\n      for (String regexString : split[0].split(\"\\\\s+\")) {\n        regex.add(Pattern.compile(regexString));\n      }\n      String type = split[1];\n      Set<String> overwrites =", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "      for p in path:\n            if os.path.exists(os.path.join(p, n)):\n                return SCons.Node(os.path.join(p, n))\n            # try the sub-path\n            if sub_path:\n                for p", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "#\n#    def __getitem__(self, idx):\n#        return self.features[idx]\n#\n#    def __len__(self):\n#        return len(self.features)\n#\n#    def __iter__(self):\n#        return iter(self.features", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "# Initialize the Ansible module\nmodule = AnsibleModule(\n    argument_spec=__sso_spec__,\n    supports_check_mode=True,\n)\n# Get the current state of the resource\ntry:\n    rest_client = module.params['provider']\n", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "=====================\nclass MethodAddView(AutomateExplorer):\n    # ...\n    @NavigateTo\n    def go_to_method_add_page(self):\n        self.browser.click_link('Automate > Methods > Add Method')\n    # ...\n", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "          throw new Exception(\"ActionFactory: \" + className + \" not found.\");\n        }\n        return result;\n    }\n    public void publishEvent(String eventName, Object eventData) {\n        // TODO: Implement this method\n        // get all the listeners for the event\n        List", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "=====================\n\n    def test_update_thread_no_title(self, mock_request):\n        self._test_request_error(\n            \"update_thread\",\n            {\"thread_id\": \"dummy_thread_id\"},\n            {\"body\": \"foo\"},\n           ", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "#         embedManifestDllAction([target[0]], [manifestSrc], env)\n        else:\n            raise SCons.Errors.BuildError(\"Manifest file %s does not exist\" % manifestSrc)\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "          ISchedulingRule schedulingRule = getSchedulingRule();\n            if (schedulingRule != null) {\n                JobManager.getJobManager().join(schedulingRule);\n            }\n            final IStructuredSelection selection = getStructuredSelection();\n           ", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t// Allocate output row meta data\n\t\t//\n\t\t// This is needed for the aggregated rows to be able to write back to the output stream\n\t\t//\n\t\t// We can't do this in the constructor, because the input row meta data is not yet available there", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "```python\nassert f('2014-01-31 23:59:59..2015-01-01 00:00:01') == (\n    datetime(2015, 1, 1),", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "          else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //Walking Range\n            int walkingrange = 0;\n            if (swalkingrange != null)\n                walkingrange = Ut", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "def get_vm_info(vm):\n    \"\"\"\n    Get the information of a running VM.\n\n    :param vm: A QEMU virtual machine object.\n    :return: A dictionary containing the following keys:\n        - 'name': The name of the VM.\n        -", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "      service.submit(pub);\n        service.shutdown();\n        service.awaitTermination(1, TimeUnit.MINUTES);\n        int received = rc.get();\n        System.out.printf(\"Received %d messages from subscriber%n\", received);\n    }\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "          if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestParameters(r, destination);\n            }\n            this.owner.getDecorator().setOnSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn (uint)value;\n\t\t\tif (value <= 0xFF)\n\t\t\t\treturn (uint)((ushort)(value | 0x80));\n\t\t\tif (value <=", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "      self.fm.env.execute_command('extract', au_flags, descr, refresh)\n# Extracts copied archive (yy) --> extractto\nclass extractto(Command):\n    def execute(self, path):\n        \"\"\" Extract copied files to given directory \"\"\"\n       ", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringString_ConstructorFlag ()\n\t\t{\n\t\t\tType type = typeof (COMTest);\n\t\t\tConstructorInfo constructor = type.GetConstructor (new Type [] { typeof (int) });\n\t\t\tobject[] args", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "  def testOneOldAndOtherNew(self):\n        da = Locale.objects.get(code='da')\n        de = Locale.objects.get(code='de')\n        repo = self._setup(da, Action.ACCEPTED, Action.REJECTED)\n", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "          self.Log.debug(\"Sending userstate : %s\", userstate)\n            self.send_message(userstate)\n            cmd.response = True\n            cmd.response_data = userstate\n            cmd.response_data_type = PYMUM_USERSTATE\n", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "      PlayerGroup group = player.getPlayerGroup();\n        if (group != null) {\n            group.setLeader(player);\n        }\n    }\n    public static PlayerGroup getGroup(Player player) {\n        return player.getPlayerGroup();\n    }\n    public", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\ndef test_vltable():\n    logger.debug(\"test_vltable\")\n    # create a table with 3 columns\n    table = vltable(formatter=\"Terminal\", outfile=sys.stdout)\n    table.add_column(\"Name\")\n    table", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "  def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_changed", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t}\n\twhile (parent instanceof Grid);\n\t((Grid) parent).addColumn(column);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "              ImageIndex = ConvertHelper.ParseInt(ReadElement(element, \"ImageIndex\"), 0);\n            } catch (Exception ex) {\n                throw new Exception(\"Error loading creature \" + GUID + \":\\n\" + ex.Message);\n            }\n        }\n       ", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\t\tm_key[i] = new PeerlessActivation();\n\t\t\t\t\tfrom.AddToBackpack( m_key[", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(ims.careuk.vo.beans.ChangeOfServiceVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(bean.buildVo());\n\t\t}\n\t\treturn coll", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "Version(1, new int[]{1, 1, 1, 1}, new ECBlocks(1, new ECBlocks.ECBlocks(1, 1), null, null, null, null, null, null, null, null, null, null, null, null, null, null,", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pbOut = kdf.DeriveBytes(pbMsg, p.Salt, p.Iterations, p.Length);\n\t\t\tif(!MemUtil.ArraysEqual(pbOut, pbExpc)) throw new Exception(\"Argon2 test failed\");\n#endif", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\tfloat discount = 0F;\n\t\tfor(ItemStack armor : player.inventory.armorIn", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Add your custom middleware classes here.\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.Cs", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "      if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList != null))\n                return false;\n        } else if (!this.actionTraceList.equals(other.actionTraceList))\n            return false;\n        if ((this.userErrorMessage", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "          dc.number = PhoneNumberUtils.parse(p.readString(), null);\n            dc.type = p.readInt();\n            dc.isMultipart = p.readInt() != 0;\n            dc.isVideo = p.readInt() != 0;\n           ", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "          for (int x = 0; x < xSizeP; x++)\n            {\n                int index = y * xSizeP + x;\n                newVertices[index] = new Vector3(x, y, 0);\n                newUV[index] =", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_METHOD_ADD, testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tresult = ((Integer) rawResult).intValue();\n\t\t\t\t\n\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void addC", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "          out.writeBoolean(false);\n            out.writeUTF(\"Object not found\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeInt(found.identifier);\n        }\n        out.flush();\n        out.close();\n        in", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        16 + (~stactics.stactics_barrier_ramp[i] & 0x0f),\n                        16,\n                        bitmap, Machine.gfx[5],\n                        i,\n                        pixel_x, pixel_y,\n", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                    .Distance(position) <= spell.Width &&\n                                    minionPrediction.CastPosition.To2D()\n                                        .Distance(position) <= spell.Width)\n                                {\n                                    result.Add(target);\n                                    break;", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "      return existsInducingPath(graph, x, y, new HashSet<>());\n    }\n    /**\n     * Returns true if there is a path from x to y in graph that does not contain any node in the set s.\n     *\n     * @param graph the graph\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    if (pop[i] is Drawable)\n                        plcs.Push(pop[i] as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Finds the first element with the specified name in the descend", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "      if (this.attachmentFile == null && other.attachmentFile != null) {\n            return false;\n        }\n        if (this.attachmentFile != null && other.attachmentFile == null) {\n            return false;\n        }\n        if (this.attachmentFile != null &&", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (m_Item.From.CanBeHarmful(mobiles[i], false))\n                            m_Item.From.DoHarmful(mobiles[i]);\n                    }\n                }\n            }\n        }\n    }\n\nThe code above", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t\t{\n\t\t\t\t\tHistory.RemoveAt(0);\n\t\t\t\t}\n\t\t\t}\n\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "  return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sComponentName) {\n    return mock.getAvailCompo", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog10 = ZipFilesDialog.newInstance(files);\n                    dialog10.show(ActionModeController.this.", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "      if (this.channel != null && this.channel.isOpen()) {\n            this.channel.close();\n        }\n    }\n    public void close(IChatBaseComponent ichatbasecomponent) {\n        if (this.channel != null && this.channel.isOpen())", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "              z_arr[p_index, kk, :] = z_dict[z_key][per][:]\n                z_err_arr[p_index, kk, :] = z_dict[z_key][per][3:]\n            for t", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "    return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany, recipients.size());\n  }\n}\nThe code above is incomplete, and I would like you to complete it by adding the missing line of code. The missing line of code is", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "      env[\"PATH\"] = os.pathsep.join(env[\"PATH\"] + extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = os.pathsep.join(env[\"LD_LIBRARY_PATH\"] + extra_lib)", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "def parse_manifest(manifest_file):\n    with open(manifest_file) as f:\n        manifest_json = json.load(f)\n        manifest = Manifest()\n        manifest.update(manifest_json)\n        return manifest\n\nWhat is the purpose", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "      if (compiledScript != null) {\n            compiledScript.dispose();\n        }\n    }\n    private Binding createBindingForCompilation() {\n        final Binding binding = new Binding();\n        binding.setVariable(\"node\", new NodeBinding());\n        binding.", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "          throw new NotImplementedException();\n        }\n        /// <summary>\n        /// Indicates whether a timeout can be set for the wrapped layer\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\nclass AtomicTransformer(Transformer):\n  \"\"\"\n  TODO: Implement AtomicTransformer.\n  \"\"\"\n  def __init__(self, dataset, transformer_fn):\n    super(Transformer, self).__init__(dataset)\n    self.transformer_fn =", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo) obj;\n\t\tif (this.id == null && other.id != null)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tif (this.", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "      assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n    @Test\n    public void shouldFindAllStacks() throws Exception {\n        updateAll();\n        final List<StackImpl> found = stackDao.searchStacks(null, Collections.", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "      Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterCode(\"DEPTH\");\n        depthParameter.setParameterFamily(pf);\n        depthParameter.setValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION_REGEXP\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// If the pattern is a single node, then the candidate must be the same node\n\t\t\tif (pattern.IsLeaf)\n\t\t\t\treturn candidate.IsLeaf && candidate.Equals(pattern);\n\t\t\t// If the pattern is a list, then the", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "              if (colisionList.Any())\n                {\n                    extendedFarmLocation = colisionList.First().Position;\n                    extendedWillHit++;\n                }\n                }\n                int shortWillHit = MinionManager.Minions.Count(\n                ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(contextMenus);\n\t\t// Controls\n\t\tsuper.addControl(new ctnrContracts().setContext(this, control, 0, 0, 1, 1, 1, 1, 1, 1", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "@task\ndef python_prereqs():\n    \"\"\"\n    Install Python prerequisites.\n    \"\"\"\n    # TODO: Add a check for Python version >= 3.5\n    # TODO: Add a check for pip >= 9.0.3\n    # TODO: Add", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "          'sub_ids': [(6, 0, self.env['test_testing_utilities.sub2'].create({\n                'name': 'sub2'\n            }).id)]\n        })\n        f = Form(r, view='test_testing_utilities.", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "  assert simplify(Sum(x**2, (x, a, b)).change_index((a, b, x))) == \\\n        Sum(x**2, (x, b, a))\ndef test_change_index_issue_1123():\n    assert simpl", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif (argc==1) {\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "              this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeRemove(action, changedItems, startingIndex);\n            }\n        }\n        private void InitializeRemove(NotifyCollectionChangedAction action, IList oldItems,", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "          String xml = writer.toString();\n            InputSource inputSource = new InputSource(new StringReader(xml));\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setNamespaceAware(true);\n            factory.setValidating(true);\n            factory.", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.CampusType = Token2Csv();\n                    break;\n                case Param.CampusStatus:\n                    c.CampusStatus", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  Width: {0}\", ide.width);\nConsole.WriteLine (\"  Height: {0}\", ide.height);\nConsole.WriteLine (\"  ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"  Planes: {0}\", ide.planes", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "              // adds a JSR to the successor of the RET blocks\n                if ((l.status & Label.TARGET) != 0) {\n                    Edge e = l.successor;\n                    while (e != null) {\n                        if ((e.target.status", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "          ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method, __mStack);\n            UnityEngine.Ray instance_of_", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.setText(position.toString());\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {\n\t\t\tString text = comboLabelPosition.getText();\n\t\t\treturn Position.fromString(text);\n\t\t}\n\t\t\n", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "      currImageValue = self._getCurrentImageValue()\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue\n        print \"newImageValue=\", currImageValue\n        self.assertEqual(currImageValue, lastImageValue-1)\n\n# This test", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "=====================\n\nclass KexGSS(object):\n    \"\"\"\n    KexGSS is a Kex method that uses GSSAPI for authentication.\n    \"\"\"\n    def __init__(self, gss_kex_algs=None):\n        \"\"\"\n        :param", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "          FileSystemTreeModel treeModel = (FileSystemTreeModel) tree.getModel();\n            FSTree tree = (FSTree) treeModel.getTree();\n            FileSystemNode rootNode = treeModel.getRootNode();\n            FileSystemNode databaseNode = FileSystemNode.", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "              (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                if res:\n                    result = res[0]\n                return result\n                else:\n                    return 0.", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "  mvir = np.linspace(1e10, 1e15, 1000) #Mpc/h\n    mvir_arr = MvirToMvir(mvir, h=h) #Mpc/h to Mpc\n    mvir_", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "      d.height = font.getSize() + getSettings().getLineHeight() + getSettings().getLineSpacing();\n        d.width = getPreferredSize().width;\n        return d;\n    }\n    @Override\n    public void setText(String text) {\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "#self.cal_p2()\n#self.all_in_all()\n#self.print_path()\n#self.print_result()\n#self.print_xyz()\n#self.print_xyz_all()\n#self.print_xyz_all", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void SecuritiesButton_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "=====================\n\nclass _Hist3D(Hist3D):\n    def __init__(self, *args, **kwargs):\n        super(_Hist3D, self).__init__(*args, **kwargs)\n        self.xaxis = self.GetXaxis()\n        self", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "          Roster roster = protocol.getRoster();\n            roster.addMessage(contact, query.getMessages());\n        }\n    }\n}\n\nThe code above is a part of XMPP protocol implementation. It is responsible for handling message archiving. The code is incomplete", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "      im1L = im1.convert(\"L\", rgb2I)\n    else:\n        im1L = im1\n    h1 = im1L.histogram()\n\n    #compute transform\n    if channel == \"I\":\n        #compute transform from histograms", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tif (rsp.getSW() == 0x6100) {\n\t\t\t\tfinal int l = rsp.getLeShort(0);\n\t\t\t\tif (l > 0) {\n\t\t\t\t\tfinal int r = tag.read", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "=====================\n\n# Create the parser\nparser = Parser()\nparser.register(\"ace\", ACEParser)\n\n# Parse the file\nwith open(\"test.ace\", \"rb\") as f:\n    data = f.read()\n    result = parser.parse(data)", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter.removeCommListener(this);\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "\n        path = environ['PATH_INFO']\n        for prefix, app in self.apps:\n            if path.startswith(prefix):\n                return app(environ, start_response)\n        raise NotFoundError(path)\n\n# vim: set et sw=4", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.setparents( sys.argv[ 2 ] )\n\t\tmodel.train()\n\t\tmodel.savemodel( sys.argv[ 3 ] )\n\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "          if (Utility.RandomDouble() < (double)chance / 100.0)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n\nThe code above is for", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "\n        entries[entry_name] = entry_value\n\n        return typed_enum(type_name, entries)\n\n# This is a placeholder for the 'typed_enum' function.\n# You need to implement it in order to parse the enumeration.\n# You can use", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    MessageBox.Show(\"Unable to find any modules to configure.\");\n                    this.Close();\n                }\n            }\n        }\n        private Boolean writeFile(String strFile, String strText)\n        {\n            try\n            {\n                using (StreamWriter sw", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "              object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "              if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(this.textureArray[textureHash] != null)\n                {\n                    if(!this.textureArray[textureHash].getImage().isSelected())\n                       ", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "@login_required\n@handle_exception(HttpResponse)\n@add_csrf_protection\n@add_cors_headers\n@add_p3p_header\n@fix_csrf_cookie_on_redirect\n@cache_page(60 * 60)", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Driver driver = idlePool.Dequeue();\n                    if (driver.Connection.IsExpired(now))\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else\n                    {\n                        idlePool.Enqueue", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "  return [var] if name in ('resolution', 'radius') else var\n\ndef _verify_list(var, name, length):\n    \"\"\"Ensure that list is of the correct length and contains only numbers.\"\"\"\n    if var is None:\n        return None\n    if not isinstance", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "# Register the quest\n# This line is needed to register the quest in the game.\n# It will be read by the game server and makes the quest available.\n# Do not change or remove it.\n# Register the quest\n# This line is needed to register the quest in the game.\n#", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60 * 60 - (double)num1 * 60) % 60);\n\t\t\t\t\tempty = string.Format(\"{", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "          // Initialize OpenGL state\n            GL.ClearColor(Color4.CornflowerBlue);\n            GL.Enable(EnableCap.DepthTest);\n            GL.Enable(EnableCap.CullFace);\n            GL.CullFace(CullFaceMode.Back);\n           ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\n    def add_metabolite(self, metabolite):\n        \"\"\"Add a metabolite to the model\"\"\"\n        self.metabolites.append(metabolite)\n        metabolite._model = self\n        self._trimmed = False\n\n# This is the", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (Object bean : beans)\n\t\t{\n\t\t\tims.clinical.vo.TumourGroupListVo vo = new ims.clinical.vo.TumourGroupListVo();\n\t\t\tvo.setBean((ims.clinical", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent = lines[selectedLine];\n\t\t\t\twhile(foundBottom){\n\t\t\t\t\tfoundBottom = false;\n\t\t\t\t\tfor(int i=selected.size()-1; i>=0; i--){\n\t\t\t\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "      new LayoutAnimationController(set, 0.2f);\n        mListView.setLayoutAnimation(controller);\n    }\n\t\n\t/**\n\t * Fill the list with data.\n\t */\n\tprivate void fillData() {\n\t\tList<Bookmark> bookmarks", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "              if (PartnerInterestRow.RowState != DataRowState.Deleted)\n                {\n                    if (PartnerInterestRow.FieldKey > HighestNumber)\n                    {\n                        HighestNumber = PartnerInterestRow.FieldKey;\n                    }", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.ssToInt(protein.getStructure()[i]) == Mappings.ssToInt(Globals.SS_SOL))\n\t\t\t{", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
